//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var $ = Package.jquery.$;
var jQuery = Package.jquery.jQuery;

/* Package-scope variables */
var JSON, Validator, Integer, pos, ace, sel;

(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/mrt:alpaca/alpaca.js                                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*!                                                                                                                    // 1
Alpaca Version 1.1.2                                                                                                   // 2
                                                                                                                       // 3
Copyright 2013 Gitana Software, Inc.                                                                                   // 4
                                                                                                                       // 5
Licensed under the Apache License, Version 2.0 (the "License");                                                        // 6
you may not use this file except in compliance with the License.                                                       // 7
                                                                                                                       // 8
You may obtain a copy of the License at                                                                                // 9
	http://www.apache.org/licenses/LICENSE-2.0                                                                            // 10
                                                                                                                       // 11
Unless required by applicable law or agreed to in writing, software                                                    // 12
distributed under the License is distributed on an "AS IS" BASIS,                                                      // 13
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                               // 14
See the License for the specific language governing permissions and                                                    // 15
limitations under the License.                                                                                         // 16
                                                                                                                       // 17
For more information, please contact Gitana Software, Inc. at this                                                     // 18
address:                                                                                                               // 19
                                                                                                                       // 20
  info@gitanasoftware.com                                                                                              // 21
*/                                                                                                                     // 22
/*                                                                                                                     // 23
 Based on Base.js 1.1a (c) 2006-2010, Dean Edwards                                                                     // 24
 Updated to pass JSHint and converted into a module by Kenneth Powers                                                  // 25
 License: http://www.opensource.org/licenses/mit-license.php                                                           // 26
                                                                                                                       // 27
 GitHub: https://github.com/KenPowers/Base.js-Module                                                                   // 28
 */                                                                                                                    // 29
/*global define:true module:true*/                                                                                     // 30
/*jshint eqeqeq:true*/                                                                                                 // 31
(function (name, global, definition) {                                                                                 // 32
//    if (typeof module !== 'undefined') {                                                                             // 33
//        module.exports = definition();                                                                               // 34
//    } else if (typeof define !== 'undefined' && typeof define.amd === 'object') {                                    // 35
//        define(definition);                                                                                          // 36
//    } else {                                                                                                         // 37
        global[name] = definition();                                                                                   // 38
//    }                                                                                                                // 39
})('Base', this, function () {                                                                                         // 40
    // Base Object                                                                                                     // 41
    var Base = function () {};                                                                                         // 42
                                                                                                                       // 43
    // Implementation                                                                                                  // 44
    Base.extend = function (_instance, _static) { // subclass                                                          // 45
        var extend = Base.prototype.extend;                                                                            // 46
        // build the prototype                                                                                         // 47
        Base._prototyping = true;                                                                                      // 48
        var proto = new this();                                                                                        // 49
        extend.call(proto, _instance);                                                                                 // 50
        proto.base = function () {                                                                                     // 51
            // call this method from any other method to invoke that method's ancestor                                 // 52
        };                                                                                                             // 53
        delete Base._prototyping;                                                                                      // 54
        // create the wrapper for the constructor function                                                             // 55
        //var constructor = proto.constructor.valueOf(); //-dean                                                       // 56
        var constructor = proto.constructor;                                                                           // 57
        var klass = proto.constructor = function () {                                                                  // 58
            if (!Base._prototyping) {                                                                                  // 59
                if (this._constructing || this.constructor === klass) { // instantiation                               // 60
                    this._constructing = true;                                                                         // 61
                    constructor.apply(this, arguments);                                                                // 62
                    delete this._constructing;                                                                         // 63
                } else if (arguments[0] !== null) { // casting                                                         // 64
                    return (arguments[0].extend || extend).call(arguments[0], proto);                                  // 65
                }                                                                                                      // 66
            }                                                                                                          // 67
        };                                                                                                             // 68
        // build the class interface                                                                                   // 69
        klass.ancestor = this;                                                                                         // 70
        klass.extend = this.extend;                                                                                    // 71
        klass.forEach = this.forEach;                                                                                  // 72
        klass.implement = this.implement;                                                                              // 73
        klass.prototype = proto;                                                                                       // 74
        klass.toString = this.toString;                                                                                // 75
        klass.valueOf = function (type) {                                                                              // 76
            return (type === 'object') ? klass : constructor.valueOf();                                                // 77
        };                                                                                                             // 78
        extend.call(klass, _static);                                                                                   // 79
        // class initialization                                                                                        // 80
        if (typeof klass.init === 'function') klass.init();                                                            // 81
        return klass;                                                                                                  // 82
    };                                                                                                                 // 83
                                                                                                                       // 84
    Base.prototype = {                                                                                                 // 85
        extend: function (source, value) {                                                                             // 86
            if (arguments.length > 1) { // extending with a name/value pair                                            // 87
                var ancestor = this[source];                                                                           // 88
                if (ancestor && (typeof value === 'function') && // overriding a method?                               // 89
                    // the valueOf() comparison is to avoid circular references                                        // 90
                    (!ancestor.valueOf || ancestor.valueOf() !== value.valueOf()) && /\bbase\b/.test(value)) {         // 91
                    // get the underlying method                                                                       // 92
                    var method = value.valueOf();                                                                      // 93
                    // override                                                                                        // 94
                    value = function () {                                                                              // 95
                        var previous = this.base || Base.prototype.base;                                               // 96
                        this.base = ancestor;                                                                          // 97
                        var returnValue = method.apply(this, arguments);                                               // 98
                        this.base = previous;                                                                          // 99
                        return returnValue;                                                                            // 100
                    };                                                                                                 // 101
                    // point to the underlying method                                                                  // 102
                    value.valueOf = function (type) {                                                                  // 103
                        return (type === 'object') ? value : method;                                                   // 104
                    };                                                                                                 // 105
                    value.toString = Base.toString;                                                                    // 106
                }                                                                                                      // 107
                this[source] = value;                                                                                  // 108
            } else if (source) { // extending with an object literal                                                   // 109
                var extend = Base.prototype.extend;                                                                    // 110
                // if this object has a customized extend method then use it                                           // 111
                if (!Base._prototyping && typeof this !== 'function') {                                                // 112
                    extend = this.extend || extend;                                                                    // 113
                }                                                                                                      // 114
                var proto = {                                                                                          // 115
                    toSource: null                                                                                     // 116
                };                                                                                                     // 117
                // do the "toString" and other methods manually                                                        // 118
                var hidden = ['constructor', 'toString', 'valueOf'];                                                   // 119
                // if we are prototyping then include the constructor                                                  // 120
                for (var i = Base._prototyping ? 0 : 1; i < hidden.length; i++) {                                      // 121
                    var h = hidden[i];                                                                                 // 122
                    if (source[h] !== proto[h])                                                                        // 123
                        extend.call(this, h, source[h]);                                                               // 124
                }                                                                                                      // 125
                // copy each of the source object's properties to this object                                          // 126
                for (var key in source) {                                                                              // 127
                    if (!proto[key]) extend.call(this, key, source[key]);                                              // 128
                }                                                                                                      // 129
            }                                                                                                          // 130
            return this;                                                                                               // 131
        }                                                                                                              // 132
    };                                                                                                                 // 133
                                                                                                                       // 134
    // initialize                                                                                                      // 135
    Base = Base.extend({                                                                                               // 136
        constructor: function () {                                                                                     // 137
            this.extend(arguments[0]);                                                                                 // 138
        }                                                                                                              // 139
    }, {                                                                                                               // 140
        ancestor: Object,                                                                                              // 141
        version: '1.1',                                                                                                // 142
        forEach: function (object, block, context) {                                                                   // 143
            for (var key in object) {                                                                                  // 144
                if (this.prototype[key] === undefined) {                                                               // 145
                    block.call(context, object[key], key, object);                                                     // 146
                }                                                                                                      // 147
            }                                                                                                          // 148
        },                                                                                                             // 149
        implement: function () {                                                                                       // 150
            for (var i = 0; i < arguments.length; i++) {                                                               // 151
                if (typeof arguments[i] === 'function') {                                                              // 152
                    // if it's a function, call it                                                                     // 153
                    arguments[i](this.prototype);                                                                      // 154
                } else {                                                                                               // 155
                    // add the interface using the extend method                                                       // 156
                    this.prototype.extend(arguments[i]);                                                               // 157
                }                                                                                                      // 158
            }                                                                                                          // 159
            return this;                                                                                               // 160
        },                                                                                                             // 161
        toString: function () {                                                                                        // 162
            return String(this.valueOf());                                                                             // 163
        }                                                                                                              // 164
    });                                                                                                                // 165
                                                                                                                       // 166
    // Return Base implementation                                                                                      // 167
    return Base;                                                                                                       // 168
});/*                                                                                                                  // 169
 json2.js                                                                                                              // 170
 2012-10-08                                                                                                            // 171
                                                                                                                       // 172
 Public Domain.                                                                                                        // 173
                                                                                                                       // 174
 NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.                                                               // 175
                                                                                                                       // 176
 See http://www.JSON.org/js.html                                                                                       // 177
                                                                                                                       // 178
                                                                                                                       // 179
 This code should be minified before deployment.                                                                       // 180
 See http://javascript.crockford.com/jsmin.html                                                                        // 181
                                                                                                                       // 182
 USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO                                            // 183
 NOT CONTROL.                                                                                                          // 184
                                                                                                                       // 185
                                                                                                                       // 186
 This file creates a global JSON object containing two methods: stringify                                              // 187
 and parse.                                                                                                            // 188
                                                                                                                       // 189
 JSON.stringify(value, replacer, space)                                                                                // 190
 value       any JavaScript value, usually an object or array.                                                         // 191
                                                                                                                       // 192
 replacer    an optional parameter that determines how object                                                          // 193
 values are stringified for objects. It can be a                                                                       // 194
 function or an array of strings.                                                                                      // 195
                                                                                                                       // 196
 space       an optional parameter that specifies the indentation                                                      // 197
 of nested structures. If it is omitted, the text will                                                                 // 198
 be packed without extra whitespace. If it is a number,                                                                // 199
 it will specify the number of spaces to indent at each                                                                // 200
 level. If it is a string (such as '\t' or '&nbsp;'),                                                                  // 201
 it contains the characters used to indent at each level.                                                              // 202
                                                                                                                       // 203
 This method produces a JSON text from a JavaScript value.                                                             // 204
                                                                                                                       // 205
 When an object value is found, if the object contains a toJSON                                                        // 206
 method, its toJSON method will be called and the result will be                                                       // 207
 stringified. A toJSON method does not serialize: it returns the                                                       // 208
 value represented by the name/value pair that should be serialized,                                                   // 209
 or undefined if nothing should be serialized. The toJSON method                                                       // 210
 will be passed the key associated with the value, and this will be                                                    // 211
 bound to the value                                                                                                    // 212
                                                                                                                       // 213
 For example, this would serialize Dates as ISO strings.                                                               // 214
                                                                                                                       // 215
 Date.prototype.toJSON = function (key) {                                                                              // 216
 function f(n) {                                                                                                       // 217
 // Format integers to have at least two digits.                                                                       // 218
 return n < 10 ? '0' + n : n;                                                                                          // 219
 }                                                                                                                     // 220
                                                                                                                       // 221
 return this.getUTCFullYear()   + '-' +                                                                                // 222
 f(this.getUTCMonth() + 1) + '-' +                                                                                     // 223
 f(this.getUTCDate())      + 'T' +                                                                                     // 224
 f(this.getUTCHours())     + ':' +                                                                                     // 225
 f(this.getUTCMinutes())   + ':' +                                                                                     // 226
 f(this.getUTCSeconds())   + 'Z';                                                                                      // 227
 };                                                                                                                    // 228
                                                                                                                       // 229
 You can provide an optional replacer method. It will be passed the                                                    // 230
 key and value of each member, with this bound to the containing                                                       // 231
 object. The value that is returned from your method will be                                                           // 232
 serialized. If your method returns undefined, then the member will                                                    // 233
 be excluded from the serialization.                                                                                   // 234
                                                                                                                       // 235
 If the replacer parameter is an array of strings, then it will be                                                     // 236
 used to select the members to be serialized. It filters the results                                                   // 237
 such that only members with keys listed in the replacer array are                                                     // 238
 stringified.                                                                                                          // 239
                                                                                                                       // 240
 Values that do not have JSON representations, such as undefined or                                                    // 241
 functions, will not be serialized. Such values in objects will be                                                     // 242
 dropped; in arrays they will be replaced with null. You can use                                                       // 243
 a replacer function to replace those with JSON values.                                                                // 244
 JSON.stringify(undefined) returns undefined.                                                                          // 245
                                                                                                                       // 246
 The optional space parameter produces a stringification of the                                                        // 247
 value that is filled with line breaks and indentation to make it                                                      // 248
 easier to read.                                                                                                       // 249
                                                                                                                       // 250
 If the space parameter is a non-empty string, then that string will                                                   // 251
 be used for indentation. If the space parameter is a number, then                                                     // 252
 the indentation will be that many spaces.                                                                             // 253
                                                                                                                       // 254
 Example:                                                                                                              // 255
                                                                                                                       // 256
 text = JSON.stringify(['e', {pluribus: 'unum'}]);                                                                     // 257
 // text is '["e",{"pluribus":"unum"}]'                                                                                // 258
                                                                                                                       // 259
                                                                                                                       // 260
 text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');                                                         // 261
 // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'                                                           // 262
                                                                                                                       // 263
 text = JSON.stringify([new Date()], function (key, value) {                                                           // 264
 return this[key] instanceof Date ?                                                                                    // 265
 'Date(' + this[key] + ')' : value;                                                                                    // 266
 });                                                                                                                   // 267
 // text is '["Date(---current time---)"]'                                                                             // 268
                                                                                                                       // 269
                                                                                                                       // 270
 JSON.parse(text, reviver)                                                                                             // 271
 This method parses a JSON text to produce an object or array.                                                         // 272
 It can throw a SyntaxError exception.                                                                                 // 273
                                                                                                                       // 274
 The optional reviver parameter is a function that can filter and                                                      // 275
 transform the results. It receives each of the keys and values,                                                       // 276
 and its return value is used instead of the original value.                                                           // 277
 If it returns what it received, then the structure is not modified.                                                   // 278
 If it returns undefined then the member is deleted.                                                                   // 279
                                                                                                                       // 280
 Example:                                                                                                              // 281
                                                                                                                       // 282
 // Parse the text. Values that look like ISO date strings will                                                        // 283
 // be converted to Date objects.                                                                                      // 284
                                                                                                                       // 285
 myData = JSON.parse(text, function (key, value) {                                                                     // 286
 var a;                                                                                                                // 287
 if (typeof value === 'string') {                                                                                      // 288
 a =                                                                                                                   // 289
 /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);                                           // 290
 if (a) {                                                                                                              // 291
 return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],                                                              // 292
 +a[5], +a[6]));                                                                                                       // 293
 }                                                                                                                     // 294
 }                                                                                                                     // 295
 return value;                                                                                                         // 296
 });                                                                                                                   // 297
                                                                                                                       // 298
 myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {                                                   // 299
 var d;                                                                                                                // 300
 if (typeof value === 'string' &&                                                                                      // 301
 value.slice(0, 5) === 'Date(' &&                                                                                      // 302
 value.slice(-1) === ')') {                                                                                            // 303
 d = new Date(value.slice(5, -1));                                                                                     // 304
 if (d) {                                                                                                              // 305
 return d;                                                                                                             // 306
 }                                                                                                                     // 307
 }                                                                                                                     // 308
 return value;                                                                                                         // 309
 });                                                                                                                   // 310
                                                                                                                       // 311
                                                                                                                       // 312
 This is a reference implementation. You are free to copy, modify, or                                                  // 313
 redistribute.                                                                                                         // 314
 */                                                                                                                    // 315
                                                                                                                       // 316
/*jslint evil: true, regexp: true */                                                                                   // 317
                                                                                                                       // 318
/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,                                                   // 319
 call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,                                                            // 320
 getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,                                                      // 321
 lastIndex, length, parse, prototype, push, replace, slice, stringify,                                                 // 322
 test, toJSON, toString, valueOf                                                                                       // 323
 */                                                                                                                    // 324
                                                                                                                       // 325
                                                                                                                       // 326
// Create a JSON object only if one does not already exist. We create the                                              // 327
// methods in a closure to avoid creating global variables.                                                            // 328
                                                                                                                       // 329
if (typeof JSON !== 'object') {                                                                                        // 330
    JSON = {};                                                                                                         // 331
}                                                                                                                      // 332
                                                                                                                       // 333
(function () {                                                                                                         // 334
    'use strict';                                                                                                      // 335
                                                                                                                       // 336
    function f(n) {                                                                                                    // 337
        // Format integers to have at least two digits.                                                                // 338
        return n < 10 ? '0' + n : n;                                                                                   // 339
    }                                                                                                                  // 340
                                                                                                                       // 341
    if (typeof Date.prototype.toJSON !== 'function') {                                                                 // 342
                                                                                                                       // 343
        Date.prototype.toJSON = function (key) {                                                                       // 344
                                                                                                                       // 345
            return isFinite(this.valueOf())                                                                            // 346
                ? this.getUTCFullYear()     + '-' +                                                                    // 347
                f(this.getUTCMonth() + 1) + '-' +                                                                      // 348
                f(this.getUTCDate())      + 'T' +                                                                      // 349
                f(this.getUTCHours())     + ':' +                                                                      // 350
                f(this.getUTCMinutes())   + ':' +                                                                      // 351
                f(this.getUTCSeconds())   + 'Z'                                                                        // 352
                : null;                                                                                                // 353
        };                                                                                                             // 354
                                                                                                                       // 355
        String.prototype.toJSON      =                                                                                 // 356
            Number.prototype.toJSON  =                                                                                 // 357
                Boolean.prototype.toJSON = function (key) {                                                            // 358
                    return this.valueOf();                                                                             // 359
                };                                                                                                     // 360
    }                                                                                                                  // 361
                                                                                                                       // 362
    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        gap,                                                                                                           // 365
        indent,                                                                                                        // 366
        meta = {    // table of character substitutions                                                                // 367
            '\b': '\\b',                                                                                               // 368
            '\t': '\\t',                                                                                               // 369
            '\n': '\\n',                                                                                               // 370
            '\f': '\\f',                                                                                               // 371
            '\r': '\\r',                                                                                               // 372
            '"' : '\\"',                                                                                               // 373
            '\\': '\\\\'                                                                                               // 374
        },                                                                                                             // 375
        rep;                                                                                                           // 376
                                                                                                                       // 377
                                                                                                                       // 378
    function quote(string) {                                                                                           // 379
                                                                                                                       // 380
// If the string contains no control characters, no quote characters, and no                                           // 381
// backslash characters, then we can safely slap some quotes around it.                                                // 382
// Otherwise we must also replace the offending characters with safe escape                                            // 383
// sequences.                                                                                                          // 384
                                                                                                                       // 385
        escapable.lastIndex = 0;                                                                                       // 386
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {                                 // 387
            var c = meta[a];                                                                                           // 388
            return typeof c === 'string'                                                                               // 389
                ? c                                                                                                    // 390
                : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);                                           // 391
        }) + '"' : '"' + string + '"';                                                                                 // 392
    }                                                                                                                  // 393
                                                                                                                       // 394
                                                                                                                       // 395
    function str(key, holder) {                                                                                        // 396
                                                                                                                       // 397
// Produce a string from holder[key].                                                                                  // 398
                                                                                                                       // 399
        var i,          // The loop counter.                                                                           // 400
            k,          // The member key.                                                                             // 401
            v,          // The member value.                                                                           // 402
            length,                                                                                                    // 403
            mind = gap,                                                                                                // 404
            partial,                                                                                                   // 405
            value = holder[key];                                                                                       // 406
                                                                                                                       // 407
// If the value has a toJSON method, call it to obtain a replacement value.                                            // 408
                                                                                                                       // 409
        if (value && typeof value === 'object' &&                                                                      // 410
            typeof value.toJSON === 'function') {                                                                      // 411
            value = value.toJSON(key);                                                                                 // 412
        }                                                                                                              // 413
                                                                                                                       // 414
// If we were called with a replacer function, then call the replacer to                                               // 415
// obtain a replacement value.                                                                                         // 416
                                                                                                                       // 417
        if (typeof rep === 'function') {                                                                               // 418
            value = rep.call(holder, key, value);                                                                      // 419
        }                                                                                                              // 420
                                                                                                                       // 421
// What happens next depends on the value's type.                                                                      // 422
                                                                                                                       // 423
        switch (typeof value) {                                                                                        // 424
            case 'string':                                                                                             // 425
                return quote(value);                                                                                   // 426
                                                                                                                       // 427
            case 'number':                                                                                             // 428
                                                                                                                       // 429
// JSON numbers must be finite. Encode non-finite numbers as null.                                                     // 430
                                                                                                                       // 431
                return isFinite(value) ? String(value) : 'null';                                                       // 432
                                                                                                                       // 433
            case 'boolean':                                                                                            // 434
            case 'null':                                                                                               // 435
                                                                                                                       // 436
// If the value is a boolean or null, convert it to a string. Note:                                                    // 437
// typeof null does not produce 'null'. The case is included here in                                                   // 438
// the remote chance that this gets fixed someday.                                                                     // 439
                                                                                                                       // 440
                return String(value);                                                                                  // 441
                                                                                                                       // 442
// If the type is 'object', we might be dealing with an object or an array or                                          // 443
// null.                                                                                                               // 444
                                                                                                                       // 445
            case 'object':                                                                                             // 446
                                                                                                                       // 447
// Due to a specification blunder in ECMAScript, typeof null is 'object',                                              // 448
// so watch out for that case.                                                                                         // 449
                                                                                                                       // 450
                if (!value) {                                                                                          // 451
                    return 'null';                                                                                     // 452
                }                                                                                                      // 453
                                                                                                                       // 454
// Make an array to hold the partial results of stringifying this object value.                                        // 455
                                                                                                                       // 456
                gap += indent;                                                                                         // 457
                partial = [];                                                                                          // 458
                                                                                                                       // 459
// Is the value an array?                                                                                              // 460
                                                                                                                       // 461
                if (Object.prototype.toString.apply(value) === '[object Array]') {                                     // 462
                                                                                                                       // 463
// The value is an array. Stringify every element. Use null as a placeholder                                           // 464
// for non-JSON values.                                                                                                // 465
                                                                                                                       // 466
                    length = value.length;                                                                             // 467
                    for (i = 0; i < length; i += 1) {                                                                  // 468
                        partial[i] = str(i, value) || 'null';                                                          // 469
                    }                                                                                                  // 470
                                                                                                                       // 471
// Join all of the elements together, separated with commas, and wrap them in                                          // 472
// brackets.                                                                                                           // 473
                                                                                                                       // 474
                    v = partial.length === 0                                                                           // 475
                        ? '[]'                                                                                         // 476
                        : gap                                                                                          // 477
                        ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'                                  // 478
                        : '[' + partial.join(',') + ']';                                                               // 479
                    gap = mind;                                                                                        // 480
                    return v;                                                                                          // 481
                }                                                                                                      // 482
                                                                                                                       // 483
// If the replacer is an array, use it to select the members to be stringified.                                        // 484
                                                                                                                       // 485
                if (rep && typeof rep === 'object') {                                                                  // 486
                    length = rep.length;                                                                               // 487
                    for (i = 0; i < length; i += 1) {                                                                  // 488
                        if (typeof rep[i] === 'string') {                                                              // 489
                            k = rep[i];                                                                                // 490
                            v = str(k, value);                                                                         // 491
                            if (v) {                                                                                   // 492
                                partial.push(quote(k) + (gap ? ': ' : ':') + v);                                       // 493
                            }                                                                                          // 494
                        }                                                                                              // 495
                    }                                                                                                  // 496
                } else {                                                                                               // 497
                                                                                                                       // 498
// Otherwise, iterate through all of the keys in the object.                                                           // 499
                                                                                                                       // 500
                    for (k in value) {                                                                                 // 501
                        if (Object.prototype.hasOwnProperty.call(value, k)) {                                          // 502
                            v = str(k, value);                                                                         // 503
                            if (v) {                                                                                   // 504
                                partial.push(quote(k) + (gap ? ': ' : ':') + v);                                       // 505
                            }                                                                                          // 506
                        }                                                                                              // 507
                    }                                                                                                  // 508
                }                                                                                                      // 509
                                                                                                                       // 510
// Join all of the member texts together, separated with commas,                                                       // 511
// and wrap them in braces.                                                                                            // 512
                                                                                                                       // 513
                v = partial.length === 0                                                                               // 514
                    ? '{}'                                                                                             // 515
                    : gap                                                                                              // 516
                    ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'                                      // 517
                    : '{' + partial.join(',') + '}';                                                                   // 518
                gap = mind;                                                                                            // 519
                return v;                                                                                              // 520
        }                                                                                                              // 521
    }                                                                                                                  // 522
                                                                                                                       // 523
// If the JSON object does not yet have a stringify method, give it one.                                               // 524
                                                                                                                       // 525
    if (typeof JSON.stringify !== 'function') {                                                                        // 526
        JSON.stringify = function (value, replacer, space) {                                                           // 527
                                                                                                                       // 528
// The stringify method takes a value and an optional replacer, and an optional                                        // 529
// space parameter, and returns a JSON text. The replacer can be a function                                            // 530
// that can replace values, or an array of strings that will select the keys.                                          // 531
// A default replacer method can be provided. Use of the space parameter can                                           // 532
// produce text that is more easily readable.                                                                          // 533
                                                                                                                       // 534
            var i;                                                                                                     // 535
            gap = '';                                                                                                  // 536
            indent = '';                                                                                               // 537
                                                                                                                       // 538
// If the space parameter is a number, make an indent string containing that                                           // 539
// many spaces.                                                                                                        // 540
                                                                                                                       // 541
            if (typeof space === 'number') {                                                                           // 542
                for (i = 0; i < space; i += 1) {                                                                       // 543
                    indent += ' ';                                                                                     // 544
                }                                                                                                      // 545
                                                                                                                       // 546
// If the space parameter is a string, it will be used as the indent string.                                           // 547
                                                                                                                       // 548
            } else if (typeof space === 'string') {                                                                    // 549
                indent = space;                                                                                        // 550
            }                                                                                                          // 551
                                                                                                                       // 552
// If there is a replacer, it must be a function or an array.                                                          // 553
// Otherwise, throw an error.                                                                                          // 554
                                                                                                                       // 555
            rep = replacer;                                                                                            // 556
            if (replacer && typeof replacer !== 'function' &&                                                          // 557
                (typeof replacer !== 'object' ||                                                                       // 558
                    typeof replacer.length !== 'number')) {                                                            // 559
                throw new Error('JSON.stringify');                                                                     // 560
            }                                                                                                          // 561
                                                                                                                       // 562
// Make a fake root object containing our value under the key of ''.                                                   // 563
// Return the result of stringifying the value.                                                                        // 564
                                                                                                                       // 565
            return str('', {'': value});                                                                               // 566
        };                                                                                                             // 567
    }                                                                                                                  // 568
                                                                                                                       // 569
                                                                                                                       // 570
// If the JSON object does not yet have a parse method, give it one.                                                   // 571
                                                                                                                       // 572
    if (typeof JSON.parse !== 'function') {                                                                            // 573
        JSON.parse = function (text, reviver) {                                                                        // 574
                                                                                                                       // 575
// The parse method takes a text and an optional reviver function, and returns                                         // 576
// a JavaScript value if the text is a valid JSON text.                                                                // 577
                                                                                                                       // 578
            var j;                                                                                                     // 579
                                                                                                                       // 580
            function walk(holder, key) {                                                                               // 581
                                                                                                                       // 582
// The walk method is used to recursively walk the resulting structure so                                              // 583
// that modifications can be made.                                                                                     // 584
                                                                                                                       // 585
                var k, v, value = holder[key];                                                                         // 586
                if (value && typeof value === 'object') {                                                              // 587
                    for (k in value) {                                                                                 // 588
                        if (Object.prototype.hasOwnProperty.call(value, k)) {                                          // 589
                            v = walk(value, k);                                                                        // 590
                            if (v !== undefined) {                                                                     // 591
                                value[k] = v;                                                                          // 592
                            } else {                                                                                   // 593
                                delete value[k];                                                                       // 594
                            }                                                                                          // 595
                        }                                                                                              // 596
                    }                                                                                                  // 597
                }                                                                                                      // 598
                return reviver.call(holder, key, value);                                                               // 599
            }                                                                                                          // 600
                                                                                                                       // 601
                                                                                                                       // 602
// Parsing happens in four stages. In the first stage, we replace certain                                              // 603
// Unicode characters with escape sequences. JavaScript handles many characters                                        // 604
// incorrectly, either silently deleting them, or treating them as line endings.                                       // 605
                                                                                                                       // 606
            text = String(text);                                                                                       // 607
            cx.lastIndex = 0;                                                                                          // 608
            if (cx.test(text)) {                                                                                       // 609
                text = text.replace(cx, function (a) {                                                                 // 610
                    return '\\u' +                                                                                     // 611
                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);                                             // 612
                });                                                                                                    // 613
            }                                                                                                          // 614
                                                                                                                       // 615
// In the second stage, we run the text against regular expressions that look                                          // 616
// for non-JSON patterns. We are especially concerned with '()' and 'new'                                              // 617
// because they can cause invocation, and '=' because it can cause mutation.                                           // 618
// But just to be safe, we want to reject all unexpected forms.                                                        // 619
                                                                                                                       // 620
// We split the second stage into 4 regexp operations in order to work around                                          // 621
// crippling inefficiencies in IE's and Safari's regexp engines. First we                                              // 622
// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we                                        // 623
// replace all simple value tokens with ']' characters. Third, we delete all                                           // 624
// open brackets that follow a colon or comma or that begin the text. Finally,                                         // 625
// we look to see that the remaining characters are only whitespace or ']' or                                          // 626
// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.                                            // 627
                                                                                                                       // 628
            if (/^[\],:{}\s]*$/                                                                                        // 629
                .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')                                         // 630
                .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')                      // 631
                .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {                                                               // 632
                                                                                                                       // 633
// In the third stage we use the eval function to compile the text into a                                              // 634
// JavaScript structure. The '{' operator is subject to a syntactic ambiguity                                          // 635
// in JavaScript: it can begin a block or an object literal. We wrap the text                                          // 636
// in parens to eliminate the ambiguity.                                                                               // 637
                                                                                                                       // 638
                j = eval('(' + text + ')');                                                                            // 639
                                                                                                                       // 640
// In the optional fourth stage, we recursively walk the new structure, passing                                        // 641
// each name/value pair to a reviver function for possible transformation.                                             // 642
                                                                                                                       // 643
                return typeof reviver === 'function'                                                                   // 644
                    ? walk({'': j}, '')                                                                                // 645
                    : j;                                                                                               // 646
            }                                                                                                          // 647
                                                                                                                       // 648
// If the text is not JSON parseable, then a SyntaxError is thrown.                                                    // 649
                                                                                                                       // 650
            throw new SyntaxError('JSON.parse');                                                                       // 651
        };                                                                                                             // 652
    }                                                                                                                  // 653
}());/*!                                                                                                               // 654
 * JSONSchema Validator - Validates JavaScript objects using JSON Schemas                                              // 655
 *    (http://www.json.com/json-schema-proposal/)                                                                      // 656
 *                                                                                                                     // 657
 * Copyright (c) 2007 Kris Zyp SitePen (www.sitepen.com)                                                               // 658
 * Licensed under the MIT (MIT-LICENSE.txt) license.                                                                   // 659
 To use the validator call the validate function with an instance object and an optional schema object.                // 660
 If a schema is provided, it will be used to validate. If the instance object refers to a schema (self-validating),    // 661
 that schema will be used to validate and the schema parameter is not necessary (if both exist,                        // 662
 both validations will occur).                                                                                         // 663
 The validate method will return an array of validation errors. If there are no errors, then an                        // 664
 empty list will be returned. A validation error will have two properties:                                             // 665
 "property" which indicates which property had the error                                                               // 666
 "message" which indicates what the error was                                                                          // 667
 */                                                                                                                    // 668
(function($) {                                                                                                         // 669
                                                                                                                       // 670
    /** @namespace */                                                                                                  // 671
    Validator = {                                                                                                      // 672
                                                                                                                       // 673
        /**                                                                                                            // 674
         * Summary:                                                                                                    // 675
         * To use the validator call JSONSchema.validate with an instance object and an optional schema object.        // 676
         * If a schema is provided, it will be used to validate. If the instance object refers to a schema (self-validating),
         * that schema will be used to validate and the schema parameter is not necessary (if both exist,              // 678
         * both validations will occur).                                                                               // 679
         * The validate method will return an object with two properties:                                              // 680
         * valid: A boolean indicating if the instance is valid by the schema                                          // 681
         * errors: An array of validation errors. If there are no errors, then an                                      // 682
         * empty list will be returned. A validation error will have two properties:                                   // 683
         * property: which indicates which property had the error                                                      // 684
         * message: which indicates what the error was                                                                 // 685
         *                                                                                                             // 686
         * @param {Any} instance                                                                                       // 687
         * @param {Object} schema                                                                                      // 688
         *                                                                                                             // 689
         * @returns {object} result validation result                                                                  // 690
         */                                                                                                            // 691
        validate: function (/*Any*/instance, /*Object*/schema) {                                                       // 692
            return Validator._validate(instance, schema, {changing: false});//, coerce: false, existingOnly: false});  // 693
        },                                                                                                             // 694
                                                                                                                       // 695
        /**                                                                                                            // 696
         * Summary:                                                                                                    // 697
         * The checkPropertyChange method will check to see if an value can legally be in property with the given schema
         * This is slightly different than the validate method in that it will fail if the schema is readonly and it will
         * not check for self-validation, it is assumed that the passed in value is already internally valid.          // 700
         * The checkPropertyChange method will return the same object type as validate, see JSONSchema.validate for    // 701
         * information.                                                                                                // 702
         *                                                                                                             // 703
         * @param {Any} value                                                                                          // 704
         * @param {Object} schema                                                                                      // 705
         * @param {String} property                                                                                    // 706
         */                                                                                                            // 707
        checkPropertyChange : function(/*Any*/value, /*Object*/schema, /*String*/property) {                           // 708
            return Validator._validate(value, schema, {changing: property || "property"});                             // 709
        },                                                                                                             // 710
                                                                                                                       // 711
        /**                                                                                                            // 712
         * @internal                                                                                                   // 713
         * @param instance                                                                                             // 714
         * @param schema                                                                                               // 715
         * @param options                                                                                              // 716
         */                                                                                                            // 717
        _validate : function(/*Any*/instance, /*Object*/schema, /*Object*/options) {                                   // 718
                                                                                                                       // 719
            if (!options) options = {};                                                                                // 720
            var _changing = options.changing;                                                                          // 721
                                                                                                                       // 722
            var errors = [];                                                                                           // 723
            // validate a value against a property definition                                                          // 724
            function checkProp(value, schema, path, i) {                                                               // 725
                                                                                                                       // 726
                var l;                                                                                                 // 727
                path += path ? typeof i == 'number' ? '[' + i + ']' : typeof i == 'undefined' ? '' : '.' + i : i;      // 728
                function addError(message) {                                                                           // 729
                    errors.push({property:path,message:message});                                                      // 730
                }                                                                                                      // 731
                                                                                                                       // 732
                if ((typeof schema != 'object' || schema instanceof Array) && (path || typeof schema != 'function') && !(schema && schema.type)) {
                    if (typeof schema == 'function') {                                                                 // 734
                        if (!(value instanceof schema)) {                                                              // 735
                            addError("is not an instance of the class/constructor " + schema.name);                    // 736
                        }                                                                                              // 737
                    } else if (schema) {                                                                               // 738
                        addError("Invalid schema/property definition " + schema);                                      // 739
                    }                                                                                                  // 740
                    return null;                                                                                       // 741
                }                                                                                                      // 742
                if (_changing && schema.readonly) {                                                                    // 743
                    addError("is a readonly field, it can not be changed");                                            // 744
                }                                                                                                      // 745
                if (schema['extends']) { // if it extends another schema, it must pass that schema as well             // 746
                    checkProp(value, schema['extends'], path, i);                                                      // 747
                }                                                                                                      // 748
                // validate a value against a type definition                                                          // 749
                function checkType(type, value) {                                                                      // 750
                    if (type) {                                                                                        // 751
                        if (typeof type == 'string' && type != 'any' &&                                                // 752
                                (type == 'null' ? value !== null : typeof value != type) &&                            // 753
                                !(value instanceof Array && type == 'array') &&                                        // 754
                                !(value instanceof Date && type == 'date') &&                                          // 755
                                !(type == 'integer' && value % 1 === 0)) {                                             // 756
                            return [                                                                                   // 757
                                {property:path,message:(typeof value) + " value found, but a " + type + " is required"}
                            ];                                                                                         // 759
                        }                                                                                              // 760
                        if (type instanceof Array) {                                                                   // 761
                            var unionErrors = [];                                                                      // 762
                            for (var j = 0; j < type.length; j++) { // a union type                                    // 763
                                if (!(unionErrors = checkType(type[j], value)).length) {                               // 764
                                    break;                                                                             // 765
                                }                                                                                      // 766
                            }                                                                                          // 767
                            if (unionErrors.length) {                                                                  // 768
                                return unionErrors;                                                                    // 769
                            }                                                                                          // 770
                        } else if (typeof type == 'object') {                                                          // 771
                            var priorErrors = errors;                                                                  // 772
                            errors = [];                                                                               // 773
                            checkProp(value, type, path);                                                              // 774
                            var theseErrors = errors;                                                                  // 775
                            errors = priorErrors;                                                                      // 776
                            return theseErrors;                                                                        // 777
                        }                                                                                              // 778
                    }                                                                                                  // 779
                    return [];                                                                                         // 780
                }                                                                                                      // 781
                                                                                                                       // 782
                if (value === undefined) {                                                                             // 783
                    if (schema.required) {                                                                             // 784
                        addError("is missing and it is required");                                                     // 785
                    }                                                                                                  // 786
                } else {                                                                                               // 787
                    errors = errors.concat(checkType(schema.type, value));                                             // 788
                    if (schema.disallow && !checkType(schema.disallow, value).length) {                                // 789
                        addError(" disallowed value was matched");                                                     // 790
                    }                                                                                                  // 791
                    if (value !== null) {                                                                              // 792
                        if (value instanceof Array) {                                                                  // 793
                            if (schema.items) {                                                                        // 794
                                var itemsIsArray = schema.items instanceof Array;                                      // 795
                                var propDef = schema.items;                                                            // 796
                                for (i = 0,l = value.length; i < l; i += 1) {                                          // 797
                                    if (itemsIsArray)                                                                  // 798
                                        propDef = schema.items[i];                                                     // 799
                                    if (options.coerce)                                                                // 800
                                        value[i] = options.coerce(value[i], propDef);                                  // 801
                                    errors.concat(checkProp(value[i], propDef, path, i));                              // 802
                                }                                                                                      // 803
                            }                                                                                          // 804
                            if (schema.minItems && value.length < schema.minItems) {                                   // 805
                                addError("There must be a minimum of " + schema.minItems + " in the array");           // 806
                            }                                                                                          // 807
                            if (schema.maxItems && value.length > schema.maxItems) {                                   // 808
                                addError("There must be a maximum of " + schema.maxItems + " in the array");           // 809
                            }                                                                                          // 810
                        } else if (schema.properties || schema.additionalProperties) {                                 // 811
                            errors.concat(checkObj(value, schema.properties, path, schema.additionalProperties));      // 812
                        }                                                                                              // 813
                        if (schema.pattern && typeof value == 'string' && !value.match(schema.pattern)) {              // 814
                            addError("does not match the regex pattern " + schema.pattern);                            // 815
                        }                                                                                              // 816
                        if (schema.maxLength && typeof value == 'string' && value.length > schema.maxLength) {         // 817
                            addError("may only be " + schema.maxLength + " characters long");                          // 818
                        }                                                                                              // 819
                        if (schema.minLength && typeof value == 'string' && value.length < schema.minLength) {         // 820
                            addError("must be at least " + schema.minLength + " characters long");                     // 821
                        }                                                                                              // 822
                        if (typeof schema.minimum !== undefined && typeof value == typeof schema.minimum &&            // 823
                                schema.minimum > value) {                                                              // 824
                            addError("must have a minimum value of " + schema.minimum);                                // 825
                        }                                                                                              // 826
                        if (typeof schema.maximum !== undefined && typeof value == typeof schema.maximum &&            // 827
                                schema.maximum < value) {                                                              // 828
                            addError("must have a maximum value of " + schema.maximum);                                // 829
                        }                                                                                              // 830
                        if (schema['enum']) {                                                                          // 831
                            var enumer = schema['enum'];                                                               // 832
                            l = enumer.length;                                                                         // 833
                            var found;                                                                                 // 834
                            for (var j = 0; j < l; j++) {                                                              // 835
                                if (enumer[j] === value) {                                                             // 836
                                    found = 1;                                                                         // 837
                                    break;                                                                             // 838
                                }                                                                                      // 839
                            }                                                                                          // 840
                            if (!found) {                                                                              // 841
                                addError("does not have a value in the enumeration " + enumer.join(", "));             // 842
                            }                                                                                          // 843
                        }                                                                                              // 844
                        if (typeof schema.maxDecimal == 'number' &&                                                    // 845
                                (value.toString().match(new RegExp("\\.[0-9]{" + (schema.maxDecimal + 1) + ",}")))) {  // 846
                            addError("may only have " + schema.maxDecimal + " digits of decimal places");              // 847
                        }                                                                                              // 848
                    }                                                                                                  // 849
                }                                                                                                      // 850
                return null;                                                                                           // 851
            }                                                                                                          // 852
                                                                                                                       // 853
            // validate an object against a schema                                                                     // 854
            function checkObj(instance, objTypeDef, path, additionalProp) {                                            // 855
                                                                                                                       // 856
                if (typeof objTypeDef == 'object') {                                                                   // 857
                    if (typeof instance != 'object' || instance instanceof Array) {                                    // 858
                        errors.push({property:path,message:"an object is required"});                                  // 859
                    }                                                                                                  // 860
                                                                                                                       // 861
                    for (var i in objTypeDef) {                                                                        // 862
                        if (objTypeDef.hasOwnProperty(i)) {                                                            // 863
                            var value = instance[i];                                                                   // 864
                            // skip _not_ specified properties                                                         // 865
                            if (value === undefined && options.existingOnly) continue;                                 // 866
                            var propDef = objTypeDef[i];                                                               // 867
                            // set default                                                                             // 868
                            if (value === undefined && propDef["default"]) {                                           // 869
                                value = instance[i] = propDef["default"];                                              // 870
                            }                                                                                          // 871
                            if (options.coerce && i in instance) {                                                     // 872
                                value = instance[i] = options.coerce(value, propDef);                                  // 873
                            }                                                                                          // 874
                            checkProp(value, propDef, path, i);                                                        // 875
                        }                                                                                              // 876
                    }                                                                                                  // 877
                }                                                                                                      // 878
                for (i in instance) {                                                                                  // 879
                    if (instance.hasOwnProperty(i) && !(i.charAt(0) == '_' && i.charAt(1) == '_') && objTypeDef && !objTypeDef[i] && additionalProp === false) {
                        if (options.filter) {                                                                          // 881
                            delete instance[i];                                                                        // 882
                            continue;                                                                                  // 883
                        } else {                                                                                       // 884
                            errors.push({property:path,message:(typeof value) + "The property " + i +                  // 885
                                    " is not defined in the schema and the schema does not allow additional properties"});
                        }                                                                                              // 887
                    }                                                                                                  // 888
                    var requires = objTypeDef && objTypeDef[i] && objTypeDef[i].requires;                              // 889
                    if (requires && !(requires in instance)) {                                                         // 890
                        errors.push({property:path,message:"the presence of the property " + i + " requires that " + requires + " also be present"});
                    }                                                                                                  // 892
                    value = instance[i];                                                                               // 893
                    if (additionalProp && (!(objTypeDef && typeof objTypeDef == 'object') || !(i in objTypeDef))) {    // 894
                        if (options.coerce) {                                                                          // 895
                            value = instance[i] = options.coerce(value, additionalProp);                               // 896
                        }                                                                                              // 897
                        checkProp(value, additionalProp, path, i);                                                     // 898
                    }                                                                                                  // 899
                    if (!_changing && value && value.$schema) {                                                        // 900
                        errors = errors.concat(checkProp(value, value.$schema, path, i));                              // 901
                    }                                                                                                  // 902
                }                                                                                                      // 903
                return errors;                                                                                         // 904
            }                                                                                                          // 905
                                                                                                                       // 906
            if (schema) {                                                                                              // 907
                checkProp(instance, schema, '', _changing || '');                                                      // 908
            }                                                                                                          // 909
            if (!_changing && instance && instance.$schema) {                                                          // 910
                checkProp(instance, instance.$schema, '', '');                                                         // 911
            }                                                                                                          // 912
            return {valid:!errors.length,errors:errors};                                                               // 913
        },                                                                                                             // 914
                                                                                                                       // 915
        /**                                                                                                            // 916
         * summary:                                                                                                    // 917
         * This checks to ensure that the result is valid and will throw an appropriate error message if it is not     // 918
         * result: the result returned from checkPropertyChange or validate                                            // 919
         * @param result                                                                                               // 920
         */                                                                                                            // 921
        mustBeValid : function(result) {                                                                               // 922
            if (!result.valid) {                                                                                       // 923
                throw new TypeError(result.errors.map(                                                                 // 924
                        function(error) {                                                                              // 925
                            return "for property " + error.property + ': ' + error.message;                            // 926
                        }).join(", \n"));                                                                              // 927
            }                                                                                                          // 928
        }                                                                                                              // 929
    };                                                                                                                 // 930
                                                                                                                       // 931
    // setup primitive classes to be JSON Schema types                                                                 // 932
    String.type = "string";                                                                                            // 933
    Boolean.type = "boolean";                                                                                          // 934
    Number.type = "number";                                                                                            // 935
    Integer = {type:"integer"};                                                                                        // 936
    Object.type = "object";                                                                                            // 937
    Array.type = "array";                                                                                              // 938
    Date.type = "date";                                                                                                // 939
                                                                                                                       // 940
    $.validator = window.Validator = Validator;                                                                        // 941
                                                                                                                       // 942
})(jQuery);                                                                                                            // 943
/*!                                                                                                                    // 944
 * jQuery Templates Plugin 1.0.0pre                                                                                    // 945
 * http://github.com/jquery/jquery-tmpl                                                                                // 946
 * Requires jQuery 1.4.2                                                                                               // 947
 *                                                                                                                     // 948
 * Copyright 2011, Software Freedom Conservancy, Inc.                                                                  // 949
 * Dual licensed under the MIT or GPL Version 2 licenses.                                                              // 950
 * http://jquery.org/license                                                                                           // 951
 */                                                                                                                    // 952
(function( jQuery, undefined ){                                                                                        // 953
	var oldManip = jQuery.fn.domManip, tmplItmAtt = "_tmplitem", htmlExpr = /^[^<]*(<[\w\W]+>)[^>]*$|\{\{\! /,            // 954
		newTmplItems = {}, wrappedItems = {}, appendToTmplItems, topTmplItem = { key: 0, data: {} }, itemKey = 0, cloneIndex = 0, stack = [];
                                                                                                                       // 956
	function newTmplItem( options, parentItem, fn, data ) {                                                               // 957
		// Returns a template item data structure for a new rendered instance of a template (a 'template item').             // 958
		// The content field is a hierarchical array of strings and nested items (to be                                      // 959
		// removed and replaced by nodes field of dom elements, once inserted in DOM).                                       // 960
		var newItem = {                                                                                                      // 961
			data: data || (data === 0 || data === false) ? data : (parentItem ? parentItem.data : {}),                          // 962
			_wrap: parentItem ? parentItem._wrap : null,                                                                        // 963
			tmpl: null,                                                                                                         // 964
			parent: parentItem || null,                                                                                         // 965
			nodes: [],                                                                                                          // 966
			calls: tiCalls,                                                                                                     // 967
			nest: tiNest,                                                                                                       // 968
			wrap: tiWrap,                                                                                                       // 969
			html: tiHtml,                                                                                                       // 970
			update: tiUpdate                                                                                                    // 971
		};                                                                                                                   // 972
		if ( options ) {                                                                                                     // 973
			jQuery.extend( newItem, options, { nodes: [], parent: parentItem });                                                // 974
		}                                                                                                                    // 975
		if ( fn ) {                                                                                                          // 976
			// Build the hierarchical content to be used during insertion into DOM                                              // 977
			newItem.tmpl = fn;                                                                                                  // 978
			newItem._ctnt = newItem._ctnt || newItem.tmpl( jQuery, newItem );                                                   // 979
			newItem.key = ++itemKey;                                                                                            // 980
			// Keep track of new template item, until it is stored as jQuery Data on DOM element                                // 981
			(stack.length ? wrappedItems : newTmplItems)[itemKey] = newItem;                                                    // 982
		}                                                                                                                    // 983
		return newItem;                                                                                                      // 984
	}                                                                                                                     // 985
                                                                                                                       // 986
	// Override appendTo etc., in order to provide support for targeting multiple elements. (This code would disappear if integrated in jquery core).
	jQuery.each({                                                                                                         // 988
		appendTo: "append",                                                                                                  // 989
		prependTo: "prepend",                                                                                                // 990
		insertBefore: "before",                                                                                              // 991
		insertAfter: "after",                                                                                                // 992
		replaceAll: "replaceWith"                                                                                            // 993
	}, function( name, original ) {                                                                                       // 994
		jQuery.fn[ name ] = function( selector ) {                                                                           // 995
			var ret = [], insert = jQuery( selector ), elems, i, l, tmplItems,                                                  // 996
				parent = this.length === 1 && this[0].parentNode;                                                                  // 997
                                                                                                                       // 998
			appendToTmplItems = newTmplItems || {};                                                                             // 999
			if ( parent && parent.nodeType === 11 && parent.childNodes.length === 1 && insert.length === 1 ) {                  // 1000
				insert[ original ]( this[0] );                                                                                     // 1001
				ret = this;                                                                                                        // 1002
			} else {                                                                                                            // 1003
				for ( i = 0, l = insert.length; i < l; i++ ) {                                                                     // 1004
					cloneIndex = i;                                                                                                   // 1005
					elems = (i > 0 ? this.clone(true) : this).get();                                                                  // 1006
					jQuery( insert[i] )[ original ]( elems );                                                                         // 1007
					ret = ret.concat( elems );                                                                                        // 1008
				}                                                                                                                  // 1009
				cloneIndex = 0;                                                                                                    // 1010
				ret = this.pushStack( ret, name, insert.selector );                                                                // 1011
			}                                                                                                                   // 1012
			tmplItems = appendToTmplItems;                                                                                      // 1013
			appendToTmplItems = null;                                                                                           // 1014
			jQuery.tmpl.complete( tmplItems );                                                                                  // 1015
			return ret;                                                                                                         // 1016
		};                                                                                                                   // 1017
	});                                                                                                                   // 1018
                                                                                                                       // 1019
	jQuery.fn.extend({                                                                                                    // 1020
		// Use first wrapped element as template markup.                                                                     // 1021
		// Return wrapped set of template items, obtained by rendering template against data.                                // 1022
		tmpl: function( data, options, parentItem ) {                                                                        // 1023
			return jQuery.tmpl( this[0], data, options, parentItem );                                                           // 1024
		},                                                                                                                   // 1025
                                                                                                                       // 1026
		// Find which rendered template item the first wrapped DOM element belongs to                                        // 1027
		tmplItem: function() {                                                                                               // 1028
			return jQuery.tmplItem( this[0] );                                                                                  // 1029
		},                                                                                                                   // 1030
                                                                                                                       // 1031
		// Consider the first wrapped element as a template declaration, and get the compiled template or store it as a named template.
		template: function( name ) {                                                                                         // 1033
			return jQuery.template( name, this[0] );                                                                            // 1034
		},                                                                                                                   // 1035
                                                                                                                       // 1036
		domManip: function( args, table, callback, options ) {                                                               // 1037
			if ( args[0] && jQuery.isArray( args[0] )) {                                                                        // 1038
				var dmArgs = jQuery.makeArray( arguments ), elems = args[0], elemsLength = elems.length, i = 0, tmplItem;          // 1039
				while ( i < elemsLength && !(tmplItem = jQuery.data( elems[i++], "tmplItem" ))) {}                                 // 1040
				if ( tmplItem && cloneIndex ) {                                                                                    // 1041
					dmArgs[2] = function( fragClone ) {                                                                               // 1042
						// Handler called by oldManip when rendered template has been inserted into DOM.                                 // 1043
						jQuery.tmpl.afterManip( this, fragClone, callback );                                                             // 1044
					};                                                                                                                // 1045
				}                                                                                                                  // 1046
				oldManip.apply( this, dmArgs );                                                                                    // 1047
			} else {                                                                                                            // 1048
				oldManip.apply( this, arguments );                                                                                 // 1049
			}                                                                                                                   // 1050
			cloneIndex = 0;                                                                                                     // 1051
			if ( !appendToTmplItems ) {                                                                                         // 1052
				jQuery.tmpl.complete( newTmplItems );                                                                              // 1053
			}                                                                                                                   // 1054
			return this;                                                                                                        // 1055
		}                                                                                                                    // 1056
	});                                                                                                                   // 1057
                                                                                                                       // 1058
	jQuery.extend({                                                                                                       // 1059
		// Return wrapped set of template items, obtained by rendering template against data.                                // 1060
		tmpl: function( tmpl, data, options, parentItem ) {                                                                  // 1061
			var ret, topLevel = !parentItem;                                                                                    // 1062
			if ( topLevel ) {                                                                                                   // 1063
				// This is a top-level tmpl call (not from a nested template using {{tmpl}})                                       // 1064
				parentItem = topTmplItem;                                                                                          // 1065
				tmpl = jQuery.template[tmpl] || jQuery.template( null, tmpl );                                                     // 1066
				wrappedItems = {}; // Any wrapped items will be rebuilt, since this is top level                                   // 1067
			} else if ( !tmpl ) {                                                                                               // 1068
				// The template item is already associated with DOM - this is a refresh.                                           // 1069
				// Re-evaluate rendered template for the parentItem                                                                // 1070
				tmpl = parentItem.tmpl;                                                                                            // 1071
				newTmplItems[parentItem.key] = parentItem;                                                                         // 1072
				parentItem.nodes = [];                                                                                             // 1073
				if ( parentItem.wrapped ) {                                                                                        // 1074
					updateWrapped( parentItem, parentItem.wrapped );                                                                  // 1075
				}                                                                                                                  // 1076
				// Rebuild, without creating a new template item                                                                   // 1077
				return jQuery( build( parentItem, null, parentItem.tmpl( jQuery, parentItem ) ));                                  // 1078
			}                                                                                                                   // 1079
			if ( !tmpl ) {                                                                                                      // 1080
				return []; // Could throw...                                                                                       // 1081
			}                                                                                                                   // 1082
			if ( typeof data === "function" ) {                                                                                 // 1083
				data = data.call( parentItem || {} );                                                                              // 1084
			}                                                                                                                   // 1085
			if ( options && options.wrapped ) {                                                                                 // 1086
				updateWrapped( options, options.wrapped );                                                                         // 1087
			}                                                                                                                   // 1088
			ret = jQuery.isArray( data ) ?                                                                                      // 1089
				jQuery.map( data, function( dataItem ) {                                                                           // 1090
					return dataItem ? newTmplItem( options, parentItem, tmpl, dataItem ) : null;                                      // 1091
				}) :                                                                                                               // 1092
				[ newTmplItem( options, parentItem, tmpl, data ) ];                                                                // 1093
			return topLevel ? jQuery( build( parentItem, null, ret ) ) : ret;                                                   // 1094
		},                                                                                                                   // 1095
                                                                                                                       // 1096
		// Return rendered template item for an element.                                                                     // 1097
		tmplItem: function( elem ) {                                                                                         // 1098
			var tmplItem;                                                                                                       // 1099
			if ( elem instanceof jQuery ) {                                                                                     // 1100
				elem = elem[0];                                                                                                    // 1101
			}                                                                                                                   // 1102
			while ( elem && elem.nodeType === 1 && !(tmplItem = jQuery.data( elem, "tmplItem" )) && (elem = elem.parentNode) ) {}
			return tmplItem || topTmplItem;                                                                                     // 1104
		},                                                                                                                   // 1105
                                                                                                                       // 1106
		// Set:                                                                                                              // 1107
		// Use $.template( name, tmpl ) to cache a named template,                                                           // 1108
		// where tmpl is a template string, a script element or a jQuery instance wrapping a script element, etc.            // 1109
		// Use $( "selector" ).template( name ) to provide access by name to a script block template declaration.            // 1110
                                                                                                                       // 1111
		// Get:                                                                                                              // 1112
		// Use $.template( name ) to access a cached template.                                                               // 1113
		// Also $( selectorToScriptBlock ).template(), or $.template( null, templateString )                                 // 1114
		// will return the compiled template, without adding a name reference.                                               // 1115
		// If templateString includes at least one HTML tag, $.template( templateString ) is equivalent                      // 1116
		// to $.template( null, templateString )                                                                             // 1117
		template: function( name, tmpl ) {                                                                                   // 1118
			if (tmpl) {                                                                                                         // 1119
				// Compile template and associate with name                                                                        // 1120
				if ( typeof tmpl === "string" ) {                                                                                  // 1121
					// This is an HTML string being passed directly in.                                                               // 1122
					tmpl = buildTmplFn( tmpl );                                                                                       // 1123
				} else if ( tmpl instanceof jQuery ) {                                                                             // 1124
					tmpl = tmpl[0] || {};                                                                                             // 1125
				}                                                                                                                  // 1126
				if ( tmpl.nodeType ) {                                                                                             // 1127
					// If this is a template block, use cached copy, or generate tmpl function and cache.                             // 1128
					tmpl = jQuery.data( tmpl, "tmpl" ) || jQuery.data( tmpl, "tmpl", buildTmplFn( tmpl.innerHTML ));                  // 1129
					// Issue: In IE, if the container element is not a script block, the innerHTML will remove quotes from attribute values whenever the value does not include white space.
					// This means that foo="${x}" will not work if the value of x includes white space: foo="${x}" -> foo=value of x. // 1131
					// To correct this, include space in tag: foo="${ x }" -> foo="value of x"                                        // 1132
				}                                                                                                                  // 1133
				return typeof name === "string" ? (jQuery.template[name] = tmpl) : tmpl;                                           // 1134
			}                                                                                                                   // 1135
			// Return named compiled template                                                                                   // 1136
			return name ? (typeof name !== "string" ? jQuery.template( null, name ):                                            // 1137
				(jQuery.template[name] ||                                                                                          // 1138
					// If not in map, and not containing at least on HTML tag, treat as a selector.                                   // 1139
					// (If integrated with core, use quickExpr.exec)                                                                  // 1140
					jQuery.template( null, htmlExpr.test( name ) ? name : jQuery( name )))) : null;                                   // 1141
		},                                                                                                                   // 1142
                                                                                                                       // 1143
		encode: function( text ) {                                                                                           // 1144
			// Do HTML encoding replacing < > & and ' and " by corresponding entities.                                          // 1145
			return ("" + text).split("<").join("&lt;").split(">").join("&gt;").split('"').join("&#34;").split("'").join("&#39;");
		}                                                                                                                    // 1147
	});                                                                                                                   // 1148
                                                                                                                       // 1149
	jQuery.extend( jQuery.tmpl, {                                                                                         // 1150
		tag: {                                                                                                               // 1151
			"tmpl": {                                                                                                           // 1152
				_default: { $2: "null" },                                                                                          // 1153
				open: "if($notnull_1){__=__.concat($item.nest($1,$2));}"                                                           // 1154
				// tmpl target parameter can be of type function, so use $1, not $1a (so not auto detection of functions)          // 1155
				// This means that {{tmpl foo}} treats foo as a template (which IS a function).                                    // 1156
				// Explicit parens can be used if foo is a function that returns a template: {{tmpl foo()}}.                       // 1157
			},                                                                                                                  // 1158
			"wrap": {                                                                                                           // 1159
				_default: { $2: "null" },                                                                                          // 1160
				open: "$item.calls(__,$1,$2);__=[];",                                                                              // 1161
				close: "call=$item.calls();__=call._.concat($item.wrap(call,__));"                                                 // 1162
			},                                                                                                                  // 1163
			"each": {                                                                                                           // 1164
				_default: { $2: "$index, $value" },                                                                                // 1165
				open: "if($notnull_1){$.each($1a,function($2){with(this){",                                                        // 1166
				close: "}});}"                                                                                                     // 1167
			},                                                                                                                  // 1168
			"if": {                                                                                                             // 1169
				open: "if(($notnull_1) && $1a){",                                                                                  // 1170
				close: "}"                                                                                                         // 1171
			},                                                                                                                  // 1172
			"else": {                                                                                                           // 1173
				_default: { $1: "true" },                                                                                          // 1174
				open: "}else if(($notnull_1) && $1a){"                                                                             // 1175
			},                                                                                                                  // 1176
			"html": {                                                                                                           // 1177
				// Unecoded expression evaluation.                                                                                 // 1178
				open: "if($notnull_1){__.push($1a);}"                                                                              // 1179
			},                                                                                                                  // 1180
			"=": {                                                                                                              // 1181
				// Encoded expression evaluation. Abbreviated form is ${}.                                                         // 1182
				_default: { $1: "$data" },                                                                                         // 1183
				open: "if($notnull_1){__.push($.encode($1a));}"                                                                    // 1184
			},                                                                                                                  // 1185
			"!": {                                                                                                              // 1186
				// Comment tag. Skipped by parser                                                                                  // 1187
				open: ""                                                                                                           // 1188
			}                                                                                                                   // 1189
		},                                                                                                                   // 1190
                                                                                                                       // 1191
		// This stub can be overridden, e.g. in jquery.tmplPlus for providing rendered events                                // 1192
		complete: function( items ) {                                                                                        // 1193
			newTmplItems = {};                                                                                                  // 1194
		},                                                                                                                   // 1195
                                                                                                                       // 1196
		// Call this from code which overrides domManip, or equivalent                                                       // 1197
		// Manage cloning/storing template items etc.                                                                        // 1198
		afterManip: function afterManip( elem, fragClone, callback ) {                                                       // 1199
			// Provides cloned fragment ready for fixup prior to and after insertion into DOM                                   // 1200
			var content = fragClone.nodeType === 11 ?                                                                           // 1201
				jQuery.makeArray(fragClone.childNodes) :                                                                           // 1202
				fragClone.nodeType === 1 ? [fragClone] : [];                                                                       // 1203
                                                                                                                       // 1204
			// Return fragment to original caller (e.g. append) for DOM insertion                                               // 1205
			callback.call( elem, fragClone );                                                                                   // 1206
                                                                                                                       // 1207
			// Fragment has been inserted:- Add inserted nodes to tmplItem data structure. Replace inserted element annotations by jQuery.data.
			storeTmplItems( content );                                                                                          // 1209
			cloneIndex++;                                                                                                       // 1210
		}                                                                                                                    // 1211
	});                                                                                                                   // 1212
                                                                                                                       // 1213
	//========================== Private helper functions, used by code above ==========================                  // 1214
                                                                                                                       // 1215
	function build( tmplItem, nested, content ) {                                                                         // 1216
		// Convert hierarchical content into flat string array                                                               // 1217
		// and finally return array of fragments ready for DOM insertion                                                     // 1218
		var frag, ret = content ? jQuery.map( content, function( item ) {                                                    // 1219
			return (typeof item === "string") ?                                                                                 // 1220
				// Insert template item annotations, to be converted to jQuery.data( "tmplItem" ) when elems are inserted into DOM.
				(tmplItem.key ? item.replace( /(<\w+)(?=[\s>])(?![^>]*_tmplitem)([^>]*)/g, "$1 " + tmplItmAtt + "=\"" + tmplItem.key + "\" $2" ) : item) :
				// This is a child template item. Build nested template.                                                           // 1223
				build( item, tmplItem, item._ctnt );                                                                               // 1224
		}) :                                                                                                                 // 1225
		// If content is not defined, insert tmplItem directly. Not a template item. May be a string, or a string array, e.g. from {{html $item.html()}}.
		tmplItem;                                                                                                            // 1227
		if ( nested ) {                                                                                                      // 1228
			return ret;                                                                                                         // 1229
		}                                                                                                                    // 1230
                                                                                                                       // 1231
		// top-level template                                                                                                // 1232
		ret = ret.join("");                                                                                                  // 1233
                                                                                                                       // 1234
		// Support templates which have initial or final text nodes, or consist only of text                                 // 1235
		// Also support HTML entities within the HTML markup.                                                                // 1236
		ret.replace( /^\s*([^<\s][^<]*)?(<[\w\W]+>)([^>]*[^>\s])?\s*$/, function( all, before, middle, after) {              // 1237
			frag = jQuery( middle ).get();                                                                                      // 1238
                                                                                                                       // 1239
			storeTmplItems( frag );                                                                                             // 1240
			if ( before ) {                                                                                                     // 1241
				frag = unencode( before ).concat(frag);                                                                            // 1242
			}                                                                                                                   // 1243
			if ( after ) {                                                                                                      // 1244
				frag = frag.concat(unencode( after ));                                                                             // 1245
			}                                                                                                                   // 1246
		});                                                                                                                  // 1247
		return frag ? frag : unencode( ret );                                                                                // 1248
	}                                                                                                                     // 1249
                                                                                                                       // 1250
	function unencode( text ) {                                                                                           // 1251
		// Use createElement, since createTextNode will not render HTML entities correctly                                   // 1252
		var el = document.createElement( "div" );                                                                            // 1253
		el.innerHTML = text;                                                                                                 // 1254
		return jQuery.makeArray(el.childNodes);                                                                              // 1255
	}                                                                                                                     // 1256
                                                                                                                       // 1257
	// Generate a reusable function that will serve to render a template against data                                     // 1258
	function buildTmplFn( markup ) {                                                                                      // 1259
		return new Function("jQuery","$item",                                                                                // 1260
			// Use the variable __ to hold a string array while building the compiled template. (See https://github.com/jquery/jquery-tmpl/issues#issue/10).
			"var $=jQuery,call,__=[],$data=$item.data;" +                                                                       // 1262
                                                                                                                       // 1263
			// Introduce the data as local variables using with(){}                                                             // 1264
			"with($data){__.push('" +                                                                                           // 1265
                                                                                                                       // 1266
			// Convert the template into pure JavaScript                                                                        // 1267
			jQuery.trim(markup)                                                                                                 // 1268
				.replace( /([\\'])/g, "\\$1" )                                                                                     // 1269
				.replace( /[\r\t\n]/g, " " )                                                                                       // 1270
				.replace( /\$\{([^\}]*)\}/g, "{{= $1}}" )                                                                          // 1271
				.replace( /\{\{(\/?)(\w+|.)(?:\(((?:[^\}]|\}(?!\}))*?)?\))?(?:\s+(.*?)?)?(\(((?:[^\}]|\}(?!\}))*?)\))?\s*\}\}/g,   // 1272
				function( all, slash, type, fnargs, target, parens, args ) {                                                       // 1273
					var tag = jQuery.tmpl.tag[ type ], def, expr, exprAutoFnDetect;                                                   // 1274
					if ( !tag ) {                                                                                                     // 1275
						throw "Unknown template tag: " + type;                                                                           // 1276
					}                                                                                                                 // 1277
					def = tag._default || [];                                                                                         // 1278
					if ( parens && !/\w$/.test(target)) {                                                                             // 1279
						target += parens;                                                                                                // 1280
						parens = "";                                                                                                     // 1281
					}                                                                                                                 // 1282
					if ( target ) {                                                                                                   // 1283
						target = unescape( target );                                                                                     // 1284
						args = args ? ("," + unescape( args ) + ")") : (parens ? ")" : "");                                              // 1285
						// Support for target being things like a.toLowerCase();                                                         // 1286
						// In that case don't call with template item as 'this' pointer. Just evaluate...                                // 1287
						expr = parens ? (target.indexOf(".") > -1 ? target + unescape( parens ) : ("(" + target + ").call($item" + args)) : target;
						exprAutoFnDetect = parens ? expr : "(typeof(" + target + ")==='function'?(" + target + ").call($item):(" + target + "))";
					} else {                                                                                                          // 1290
						exprAutoFnDetect = expr = def.$1 || "null";                                                                      // 1291
					}                                                                                                                 // 1292
					fnargs = unescape( fnargs );                                                                                      // 1293
					return "');" +                                                                                                    // 1294
						tag[ slash ? "close" : "open" ]                                                                                  // 1295
							.split( "$notnull_1" ).join( target ? "typeof(" + target + ")!=='undefined' && (" + target + ")!=null" : "true" )
							.split( "$1a" ).join( exprAutoFnDetect )                                                                        // 1297
							.split( "$1" ).join( expr )                                                                                     // 1298
							.split( "$2" ).join( fnargs || def.$2 || "" ) +                                                                 // 1299
						"__.push('";                                                                                                     // 1300
				}) +                                                                                                               // 1301
			"');}return __;"                                                                                                    // 1302
		);                                                                                                                   // 1303
	}                                                                                                                     // 1304
	function updateWrapped( options, wrapped ) {                                                                          // 1305
		// Build the wrapped content.                                                                                        // 1306
		options._wrap = build( options, true,                                                                                // 1307
			// Suport imperative scenario in which options.wrapped can be set to a selector or an HTML string.                  // 1308
			jQuery.isArray( wrapped ) ? wrapped : [htmlExpr.test( wrapped ) ? wrapped : jQuery( wrapped ).html()]               // 1309
		).join("");                                                                                                          // 1310
	}                                                                                                                     // 1311
                                                                                                                       // 1312
	function unescape( args ) {                                                                                           // 1313
		return args ? args.replace( /\\'/g, "'").replace(/\\\\/g, "\\" ) : null;                                             // 1314
	}                                                                                                                     // 1315
	function outerHtml( elem ) {                                                                                          // 1316
		var div = document.createElement("div");                                                                             // 1317
		div.appendChild( elem.cloneNode(true) );                                                                             // 1318
		return div.innerHTML;                                                                                                // 1319
	}                                                                                                                     // 1320
                                                                                                                       // 1321
	// Store template items in jQuery.data(), ensuring a unique tmplItem data data structure for each rendered template instance.
	function storeTmplItems( content ) {                                                                                  // 1323
		var keySuffix = "_" + cloneIndex, elem, elems, newClonedItems = {}, i, l, m;                                         // 1324
		for ( i = 0, l = content.length; i < l; i++ ) {                                                                      // 1325
			if ( (elem = content[i]).nodeType !== 1 ) {                                                                         // 1326
				continue;                                                                                                          // 1327
			}                                                                                                                   // 1328
			elems = elem.getElementsByTagName("*");                                                                             // 1329
			for ( m = elems.length - 1; m >= 0; m-- ) {                                                                         // 1330
				processItemKey( elems[m] );                                                                                        // 1331
			}                                                                                                                   // 1332
			processItemKey( elem );                                                                                             // 1333
		}                                                                                                                    // 1334
		function processItemKey( el ) {                                                                                      // 1335
			var pntKey, pntNode = el, pntItem, tmplItem, key;                                                                   // 1336
			// Ensure that each rendered template inserted into the DOM has its own template item,                              // 1337
			if ( (key = el.getAttribute( tmplItmAtt ))) {                                                                       // 1338
				while ( pntNode.parentNode && (pntNode = pntNode.parentNode).nodeType === 1 && !(pntKey = pntNode.getAttribute( tmplItmAtt ))) { }
				if ( pntKey !== key ) {                                                                                            // 1340
					// The next ancestor with a _tmplitem expando is on a different key than this one.                                // 1341
					// So this is a top-level element within this template item                                                       // 1342
					// Set pntNode to the key of the parentNode, or to 0 if pntNode.parentNode is null, or pntNode is a fragment.     // 1343
					pntNode = pntNode.parentNode ? (pntNode.nodeType === 11 ? 0 : (pntNode.getAttribute( tmplItmAtt ) || 0)) : 0;     // 1344
					if ( !(tmplItem = newTmplItems[key]) ) {                                                                          // 1345
						// The item is for wrapped content, and was copied from the temporary parent wrappedItem.                        // 1346
						tmplItem = wrappedItems[key];                                                                                    // 1347
						tmplItem = newTmplItem( tmplItem, newTmplItems[pntNode]||wrappedItems[pntNode] );                                // 1348
						tmplItem.key = ++itemKey;                                                                                        // 1349
						newTmplItems[itemKey] = tmplItem;                                                                                // 1350
					}                                                                                                                 // 1351
					if ( cloneIndex ) {                                                                                               // 1352
						cloneTmplItem( key );                                                                                            // 1353
					}                                                                                                                 // 1354
				}                                                                                                                  // 1355
				el.removeAttribute( tmplItmAtt );                                                                                  // 1356
			} else if ( cloneIndex && (tmplItem = jQuery.data( el, "tmplItem" )) ) {                                            // 1357
				// This was a rendered element, cloned during append or appendTo etc.                                              // 1358
				// TmplItem stored in jQuery data has already been cloned in cloneCopyEvent. We must replace it with a fresh cloned tmplItem.
				cloneTmplItem( tmplItem.key );                                                                                     // 1360
				newTmplItems[tmplItem.key] = tmplItem;                                                                             // 1361
				pntNode = jQuery.data( el.parentNode, "tmplItem" );                                                                // 1362
				pntNode = pntNode ? pntNode.key : 0;                                                                               // 1363
			}                                                                                                                   // 1364
			if ( tmplItem ) {                                                                                                   // 1365
				pntItem = tmplItem;                                                                                                // 1366
				// Find the template item of the parent element.                                                                   // 1367
				// (Using !=, not !==, since pntItem.key is number, and pntNode may be a string)                                   // 1368
				while ( pntItem && pntItem.key != pntNode ) {                                                                      // 1369
					// Add this element as a top-level node for this rendered template item, as well as for any                       // 1370
					// ancestor items between this item and the item of its parent element                                            // 1371
					pntItem.nodes.push( el );                                                                                         // 1372
					pntItem = pntItem.parent;                                                                                         // 1373
				}                                                                                                                  // 1374
				// Delete content built during rendering - reduce API surface area and memory use, and avoid exposing of stale data after rendering...
				delete tmplItem._ctnt;                                                                                             // 1376
				delete tmplItem._wrap;                                                                                             // 1377
				// Store template item as jQuery data on the element                                                               // 1378
				jQuery.data( el, "tmplItem", tmplItem );                                                                           // 1379
			}                                                                                                                   // 1380
			function cloneTmplItem( key ) {                                                                                     // 1381
				key = key + keySuffix;                                                                                             // 1382
				tmplItem = newClonedItems[key] =                                                                                   // 1383
					(newClonedItems[key] || newTmplItem( tmplItem, newTmplItems[tmplItem.parent.key + keySuffix] || tmplItem.parent ));
			}                                                                                                                   // 1385
		}                                                                                                                    // 1386
	}                                                                                                                     // 1387
                                                                                                                       // 1388
	//---- Helper functions for template item ----                                                                        // 1389
                                                                                                                       // 1390
	function tiCalls( content, tmpl, data, options ) {                                                                    // 1391
		if ( !content ) {                                                                                                    // 1392
			return stack.pop();                                                                                                 // 1393
		}                                                                                                                    // 1394
		stack.push({ _: content, tmpl: tmpl, item:this, data: data, options: options });                                     // 1395
	}                                                                                                                     // 1396
                                                                                                                       // 1397
	function tiNest( tmpl, data, options ) {                                                                              // 1398
		// nested template, using {{tmpl}} tag                                                                               // 1399
		return jQuery.tmpl( jQuery.template( tmpl ), data, options, this );                                                  // 1400
	}                                                                                                                     // 1401
                                                                                                                       // 1402
	function tiWrap( call, wrapped ) {                                                                                    // 1403
		// nested template, using {{wrap}} tag                                                                               // 1404
		var options = call.options || {};                                                                                    // 1405
		options.wrapped = wrapped;                                                                                           // 1406
		// Apply the template, which may incorporate wrapped content,                                                        // 1407
		return jQuery.tmpl( jQuery.template( call.tmpl ), call.data, options, call.item );                                   // 1408
	}                                                                                                                     // 1409
                                                                                                                       // 1410
	function tiHtml( filter, textOnly ) {                                                                                 // 1411
		var wrapped = this._wrap;                                                                                            // 1412
		return jQuery.map(                                                                                                   // 1413
			jQuery( jQuery.isArray( wrapped ) ? wrapped.join("") : wrapped ).filter( filter || "*" ),                           // 1414
			function(e) {                                                                                                       // 1415
				return textOnly ?                                                                                                  // 1416
					e.innerText || e.textContent :                                                                                    // 1417
					e.outerHTML || outerHtml(e);                                                                                      // 1418
			});                                                                                                                 // 1419
	}                                                                                                                     // 1420
                                                                                                                       // 1421
	function tiUpdate() {                                                                                                 // 1422
		var coll = this.nodes;                                                                                               // 1423
		jQuery.tmpl( null, null, null, this).insertBefore( coll[0] );                                                        // 1424
		jQuery( coll ).remove();                                                                                             // 1425
	}                                                                                                                     // 1426
})( jQuery );                                                                                                          // 1427
// Determine what is o.                                                                                                // 1428
/**                                                                                                                    // 1429
 * @ignore                                                                                                             // 1430
 * @param o                                                                                                            // 1431
 */                                                                                                                    // 1432
function hoozit(o) {                                                                                                   // 1433
    if (o.constructor === String) {                                                                                    // 1434
        return "string";                                                                                               // 1435
                                                                                                                       // 1436
    } else if (o.constructor === Boolean) {                                                                            // 1437
        return "boolean";                                                                                              // 1438
                                                                                                                       // 1439
    } else if (o.constructor === Number) {                                                                             // 1440
                                                                                                                       // 1441
        if (isNaN(o)) {                                                                                                // 1442
            return "nan";                                                                                              // 1443
        } else {                                                                                                       // 1444
            return "number";                                                                                           // 1445
        }                                                                                                              // 1446
                                                                                                                       // 1447
    } else if (typeof o === "undefined") {                                                                             // 1448
        return "undefined";                                                                                            // 1449
                                                                                                                       // 1450
    // consider: typeof null === object                                                                                // 1451
    } else if (o === null) {                                                                                           // 1452
        return "null";                                                                                                 // 1453
                                                                                                                       // 1454
    // consider: typeof [] === object                                                                                  // 1455
    } else if (o instanceof Array) {                                                                                   // 1456
        return "array";                                                                                                // 1457
                                                                                                                       // 1458
    // consider: typeof new Date() === object                                                                          // 1459
    } else if (o instanceof Date) {                                                                                    // 1460
        return "date";                                                                                                 // 1461
                                                                                                                       // 1462
    // consider: /./ instanceof Object;                                                                                // 1463
    //           /./ instanceof RegExp;                                                                                // 1464
    //          typeof /./ === "function"; // => false in IE and Opera,                                                // 1465
    //                                          true in FF and Safari                                                  // 1466
    } else if (o instanceof RegExp) {                                                                                  // 1467
        return "regexp";                                                                                               // 1468
                                                                                                                       // 1469
    } else if (typeof o === "object") {                                                                                // 1470
        return "object";                                                                                               // 1471
                                                                                                                       // 1472
    } else if (o instanceof Function) {                                                                                // 1473
        return "function";                                                                                             // 1474
    } else {                                                                                                           // 1475
        return undefined;                                                                                              // 1476
    }                                                                                                                  // 1477
}                                                                                                                      // 1478
                                                                                                                       // 1479
// Call the o related callback with the given arguments.                                                               // 1480
/**                                                                                                                    // 1481
 * @ignore                                                                                                             // 1482
 * @param o                                                                                                            // 1483
 * @param callbacks                                                                                                    // 1484
 * @param args                                                                                                         // 1485
 */                                                                                                                    // 1486
function bindCallbacks(o, callbacks, args) {                                                                           // 1487
    var prop = hoozit(o);                                                                                              // 1488
    if (prop) {                                                                                                        // 1489
        if (hoozit(callbacks[prop]) === "function") {                                                                  // 1490
            return callbacks[prop].apply(callbacks, args);                                                             // 1491
        } else {                                                                                                       // 1492
            return callbacks[prop]; // or undefined                                                                    // 1493
        }                                                                                                              // 1494
    }                                                                                                                  // 1495
}                                                                                                                      // 1496
// Test for equality any JavaScript type.                                                                              // 1497
// Discussions and reference: http://philrathe.com/articles/equiv                                                      // 1498
// Test suites: http://philrathe.com/tests/equiv                                                                       // 1499
// Author: Philippe Rath̩ <prathe@gmail.com>                                                                           // 1500
/**                                                                                                                    // 1501
 * @ignore                                                                                                             // 1502
 */                                                                                                                    // 1503
var equiv = function () {                                                                                              // 1504
                                                                                                                       // 1505
    var innerEquiv; // the real equiv function                                                                         // 1506
    var callers = []; // stack to decide between skip/abort functions                                                  // 1507
                                                                                                                       // 1508
                                                                                                                       // 1509
    var callbacks = function () {                                                                                      // 1510
                                                                                                                       // 1511
        // for string, boolean, number and null                                                                        // 1512
        function useStrictEquality(b, a) {                                                                             // 1513
            if (b instanceof a.constructor || a instanceof b.constructor) {                                            // 1514
                // to catch short annotaion VS 'new' annotation of a declaration                                       // 1515
                // e.g. var i = 1;                                                                                     // 1516
                //      var j = new Number(1);                                                                         // 1517
                return a == b;                                                                                         // 1518
            } else {                                                                                                   // 1519
                return a === b;                                                                                        // 1520
            }                                                                                                          // 1521
        }                                                                                                              // 1522
                                                                                                                       // 1523
        return {                                                                                                       // 1524
            "string": useStrictEquality,                                                                               // 1525
            "boolean": useStrictEquality,                                                                              // 1526
            "number": useStrictEquality,                                                                               // 1527
            "null": useStrictEquality,                                                                                 // 1528
            "undefined": useStrictEquality,                                                                            // 1529
                                                                                                                       // 1530
            "nan": function (b) {                                                                                      // 1531
                return isNaN(b);                                                                                       // 1532
            },                                                                                                         // 1533
                                                                                                                       // 1534
            "date": function (b, a) {                                                                                  // 1535
                return hoozit(b) === "date" && a.valueOf() === b.valueOf();                                            // 1536
            },                                                                                                         // 1537
                                                                                                                       // 1538
            "regexp": function (b, a) {                                                                                // 1539
                return hoozit(b) === "regexp" &&                                                                       // 1540
                    a.source === b.source && // the regex itself                                                       // 1541
                    a.global === b.global && // and its modifers (gmi) ...                                             // 1542
                    a.ignoreCase === b.ignoreCase &&                                                                   // 1543
                    a.multiline === b.multiline;                                                                       // 1544
            },                                                                                                         // 1545
                                                                                                                       // 1546
            // - skip when the property is a method of an instance (OOP)                                               // 1547
            // - abort otherwise,                                                                                      // 1548
            //   initial === would have catch identical references anyway                                              // 1549
            "function": function () {                                                                                  // 1550
                var caller = callers[callers.length - 1];                                                              // 1551
                return caller !== Object &&                                                                            // 1552
                        typeof caller !== "undefined";                                                                 // 1553
            },                                                                                                         // 1554
                                                                                                                       // 1555
            "array": function (b, a) {                                                                                 // 1556
                var i;                                                                                                 // 1557
                var len;                                                                                               // 1558
                                                                                                                       // 1559
                // b could be an object literal here                                                                   // 1560
                if ( ! (hoozit(b) === "array")) {                                                                      // 1561
                    return false;                                                                                      // 1562
                }                                                                                                      // 1563
                                                                                                                       // 1564
                len = a.length;                                                                                        // 1565
                if (len !== b.length) { // safe and faster                                                             // 1566
                    return false;                                                                                      // 1567
                }                                                                                                      // 1568
                for (i = 0; i < len; i++) {                                                                            // 1569
                    if( ! innerEquiv(a[i], b[i])) {                                                                    // 1570
                        return false;                                                                                  // 1571
                    }                                                                                                  // 1572
                }                                                                                                      // 1573
                return true;                                                                                           // 1574
            },                                                                                                         // 1575
                                                                                                                       // 1576
            "object": function (b, a) {                                                                                // 1577
                var i;                                                                                                 // 1578
                var eq = true; // unless we can proove it                                                              // 1579
                var aProperties = [], bProperties = []; // collection of strings                                       // 1580
                                                                                                                       // 1581
                // comparing constructors is more strict than using instanceof                                         // 1582
                if ( a.constructor !== b.constructor) {                                                                // 1583
                    return false;                                                                                      // 1584
                }                                                                                                      // 1585
                                                                                                                       // 1586
                // stack constructor before traversing properties                                                      // 1587
                callers.push(a.constructor);                                                                           // 1588
                                                                                                                       // 1589
                for (i in a) { // be strict: don't ensures hasOwnProperty and go deep                                  // 1590
                                                                                                                       // 1591
                    aProperties.push(i); // collect a's properties                                                     // 1592
                                                                                                                       // 1593
                    if ( ! innerEquiv(a[i], b[i])) {                                                                   // 1594
                        eq = false;                                                                                    // 1595
                    }                                                                                                  // 1596
                }                                                                                                      // 1597
                                                                                                                       // 1598
                callers.pop(); // unstack, we are done                                                                 // 1599
                                                                                                                       // 1600
                for (i in b) {                                                                                         // 1601
                    bProperties.push(i); // collect b's properties                                                     // 1602
                }                                                                                                      // 1603
                                                                                                                       // 1604
                // Ensures identical properties name                                                                   // 1605
                return eq && innerEquiv(aProperties.sort(), bProperties.sort());                                       // 1606
            }                                                                                                          // 1607
        };                                                                                                             // 1608
    }();                                                                                                               // 1609
    /**                                                                                                                // 1610
     * @ignore                                                                                                         // 1611
     */                                                                                                                // 1612
    innerEquiv = function () { // can take multiple arguments                                                          // 1613
        var args = Array.prototype.slice.apply(arguments);                                                             // 1614
        if (args.length < 2) {                                                                                         // 1615
            return true; // end transition                                                                             // 1616
        }                                                                                                              // 1617
                                                                                                                       // 1618
        return (function (a, b) {                                                                                      // 1619
            if (a === b) {                                                                                             // 1620
                return true; // catch the most you can                                                                 // 1621
            } else if (a === null || b === null || typeof a === "undefined" || typeof b === "undefined" || hoozit(a) !== hoozit(b)) {
                return false; // don't lose time with error prone cases                                                // 1623
            } else {                                                                                                   // 1624
                return bindCallbacks(a, callbacks, [b, a]);                                                            // 1625
            }                                                                                                          // 1626
                                                                                                                       // 1627
        // apply transition with (1..n) arguments                                                                      // 1628
        })(args[0], args[1]) && arguments.callee.apply(this, args.splice(1, args.length -1));                          // 1629
    };                                                                                                                 // 1630
                                                                                                                       // 1631
    return innerEquiv;                                                                                                 // 1632
                                                                                                                       // 1633
}();/*                                                                                                                 // 1634
 Masked Input plugin for jQuery                                                                                        // 1635
 Copyright (c) 2007-2013 Josh Bush (digitalbush.com)                                                                   // 1636
 Licensed under the MIT license (http://digitalbush.com/projects/masked-input-plugin/#license)                         // 1637
 Version: 1.3.1                                                                                                        // 1638
 */                                                                                                                    // 1639
(function($) {                                                                                                         // 1640
    function getPasteEvent() {                                                                                         // 1641
        var el = document.createElement('input'),                                                                      // 1642
            name = 'onpaste';                                                                                          // 1643
        el.setAttribute(name, '');                                                                                     // 1644
        return (typeof el[name] === 'function')?'paste':'input';                                                       // 1645
    }                                                                                                                  // 1646
                                                                                                                       // 1647
    var pasteEventName = getPasteEvent() + ".mask",                                                                    // 1648
        ua = navigator.userAgent,                                                                                      // 1649
        iPhone = /iphone/i.test(ua),                                                                                   // 1650
        android=/android/i.test(ua),                                                                                   // 1651
        caretTimeoutId;                                                                                                // 1652
                                                                                                                       // 1653
    $.mask = {                                                                                                         // 1654
        //Predefined character definitions                                                                             // 1655
        definitions: {                                                                                                 // 1656
            '9': "[0-9]",                                                                                              // 1657
            'a': "[A-Za-z]",                                                                                           // 1658
            '*': "[A-Za-z0-9]"                                                                                         // 1659
        },                                                                                                             // 1660
        dataName: "rawMaskFn",                                                                                         // 1661
        placeholder: '_'                                                                                               // 1662
    };                                                                                                                 // 1663
                                                                                                                       // 1664
    $.fn.extend({                                                                                                      // 1665
        //Helper Function for Caret positioning                                                                        // 1666
        caret: function(begin, end) {                                                                                  // 1667
            var range;                                                                                                 // 1668
                                                                                                                       // 1669
            if (this.length === 0 || this.is(":hidden")) {                                                             // 1670
                return;                                                                                                // 1671
            }                                                                                                          // 1672
                                                                                                                       // 1673
            if (typeof begin == 'number') {                                                                            // 1674
                end = (typeof end === 'number') ? end : begin;                                                         // 1675
                return this.each(function() {                                                                          // 1676
                    if (this.setSelectionRange) {                                                                      // 1677
                        this.setSelectionRange(begin, end);                                                            // 1678
                    } else if (this.createTextRange) {                                                                 // 1679
                        range = this.createTextRange();                                                                // 1680
                        range.collapse(true);                                                                          // 1681
                        range.moveEnd('character', end);                                                               // 1682
                        range.moveStart('character', begin);                                                           // 1683
                        range.select();                                                                                // 1684
                    }                                                                                                  // 1685
                });                                                                                                    // 1686
            } else {                                                                                                   // 1687
                if (this[0].setSelectionRange) {                                                                       // 1688
                    begin = this[0].selectionStart;                                                                    // 1689
                    end = this[0].selectionEnd;                                                                        // 1690
                } else if (document.selection && document.selection.createRange) {                                     // 1691
                    range = document.selection.createRange();                                                          // 1692
                    begin = 0 - range.duplicate().moveStart('character', -100000);                                     // 1693
                    end = begin + range.text.length;                                                                   // 1694
                }                                                                                                      // 1695
                return { begin: begin, end: end };                                                                     // 1696
            }                                                                                                          // 1697
        },                                                                                                             // 1698
        unmask: function() {                                                                                           // 1699
            return this.trigger("unmask");                                                                             // 1700
        },                                                                                                             // 1701
        mask: function(mask, settings) {                                                                               // 1702
            var input,                                                                                                 // 1703
                defs,                                                                                                  // 1704
                tests,                                                                                                 // 1705
                partialPosition,                                                                                       // 1706
                firstNonMaskPos,                                                                                       // 1707
                len;                                                                                                   // 1708
                                                                                                                       // 1709
            if (!mask && this.length > 0) {                                                                            // 1710
                input = $(this[0]);                                                                                    // 1711
                return input.data($.mask.dataName)();                                                                  // 1712
            }                                                                                                          // 1713
            settings = $.extend({                                                                                      // 1714
                placeholder: $.mask.placeholder, // Load default placeholder                                           // 1715
                completed: null                                                                                        // 1716
            }, settings);                                                                                              // 1717
                                                                                                                       // 1718
                                                                                                                       // 1719
            defs = $.mask.definitions;                                                                                 // 1720
            tests = [];                                                                                                // 1721
            partialPosition = len = mask.length;                                                                       // 1722
            firstNonMaskPos = null;                                                                                    // 1723
                                                                                                                       // 1724
            $.each(mask.split(""), function(i, c) {                                                                    // 1725
                if (c == '?') {                                                                                        // 1726
                    len--;                                                                                             // 1727
                    partialPosition = i;                                                                               // 1728
                } else if (defs[c]) {                                                                                  // 1729
                    tests.push(new RegExp(defs[c]));                                                                   // 1730
                    if (firstNonMaskPos === null) {                                                                    // 1731
                        firstNonMaskPos = tests.length - 1;                                                            // 1732
                    }                                                                                                  // 1733
                } else {                                                                                               // 1734
                    tests.push(null);                                                                                  // 1735
                }                                                                                                      // 1736
            });                                                                                                        // 1737
                                                                                                                       // 1738
            return this.trigger("unmask").each(function() {                                                            // 1739
                var input = $(this),                                                                                   // 1740
                    buffer = $.map(                                                                                    // 1741
                        mask.split(""),                                                                                // 1742
                        function(c, i) {                                                                               // 1743
                            if (c != '?') {                                                                            // 1744
                                return defs[c] ? settings.placeholder : c;                                             // 1745
                            }                                                                                          // 1746
                        }),                                                                                            // 1747
                    focusText = input.val();                                                                           // 1748
                                                                                                                       // 1749
                function seekNext(pos) {                                                                               // 1750
                    while (++pos < len && !tests[pos]);                                                                // 1751
                    return pos;                                                                                        // 1752
                }                                                                                                      // 1753
                                                                                                                       // 1754
                function seekPrev(pos) {                                                                               // 1755
                    while (--pos >= 0 && !tests[pos]);                                                                 // 1756
                    return pos;                                                                                        // 1757
                }                                                                                                      // 1758
                                                                                                                       // 1759
                function shiftL(begin,end) {                                                                           // 1760
                    var i,                                                                                             // 1761
                        j;                                                                                             // 1762
                                                                                                                       // 1763
                    if (begin<0) {                                                                                     // 1764
                        return;                                                                                        // 1765
                    }                                                                                                  // 1766
                                                                                                                       // 1767
                    for (i = begin, j = seekNext(end); i < len; i++) {                                                 // 1768
                        if (tests[i]) {                                                                                // 1769
                            if (j < len && tests[i].test(buffer[j])) {                                                 // 1770
                                buffer[i] = buffer[j];                                                                 // 1771
                                buffer[j] = settings.placeholder;                                                      // 1772
                            } else {                                                                                   // 1773
                                break;                                                                                 // 1774
                            }                                                                                          // 1775
                                                                                                                       // 1776
                            j = seekNext(j);                                                                           // 1777
                        }                                                                                              // 1778
                    }                                                                                                  // 1779
                    writeBuffer();                                                                                     // 1780
                    input.caret(Math.max(firstNonMaskPos, begin));                                                     // 1781
                }                                                                                                      // 1782
                                                                                                                       // 1783
                function shiftR(pos) {                                                                                 // 1784
                    var i,                                                                                             // 1785
                        c,                                                                                             // 1786
                        j,                                                                                             // 1787
                        t;                                                                                             // 1788
                                                                                                                       // 1789
                    for (i = pos, c = settings.placeholder; i < len; i++) {                                            // 1790
                        if (tests[i]) {                                                                                // 1791
                            j = seekNext(i);                                                                           // 1792
                            t = buffer[i];                                                                             // 1793
                            buffer[i] = c;                                                                             // 1794
                            if (j < len && tests[j].test(t)) {                                                         // 1795
                                c = t;                                                                                 // 1796
                            } else {                                                                                   // 1797
                                break;                                                                                 // 1798
                            }                                                                                          // 1799
                        }                                                                                              // 1800
                    }                                                                                                  // 1801
                }                                                                                                      // 1802
                                                                                                                       // 1803
                function keydownEvent(e) {                                                                             // 1804
                    var k = e.which,                                                                                   // 1805
                        pos,                                                                                           // 1806
                        begin,                                                                                         // 1807
                        end;                                                                                           // 1808
                                                                                                                       // 1809
                    //backspace, delete, and escape get special treatment                                              // 1810
                    if (k === 8 || k === 46 || (iPhone && k === 127)) {                                                // 1811
                        pos = input.caret();                                                                           // 1812
                        begin = pos.begin;                                                                             // 1813
                        end = pos.end;                                                                                 // 1814
                                                                                                                       // 1815
                        if (end - begin === 0) {                                                                       // 1816
                            begin=k!==46?seekPrev(begin):(end=seekNext(begin-1));                                      // 1817
                            end=k===46?seekNext(end):end;                                                              // 1818
                        }                                                                                              // 1819
                        clearBuffer(begin, end);                                                                       // 1820
                        shiftL(begin, end - 1);                                                                        // 1821
                                                                                                                       // 1822
                        e.preventDefault();                                                                            // 1823
                    } else if (k == 27) {//escape                                                                      // 1824
                        input.val(focusText);                                                                          // 1825
                        input.caret(0, checkVal());                                                                    // 1826
                        e.preventDefault();                                                                            // 1827
                    }                                                                                                  // 1828
                }                                                                                                      // 1829
                                                                                                                       // 1830
                function keypressEvent(e) {                                                                            // 1831
                    var k = e.which,                                                                                   // 1832
                        pos = input.caret(),                                                                           // 1833
                        p,                                                                                             // 1834
                        c,                                                                                             // 1835
                        next;                                                                                          // 1836
                                                                                                                       // 1837
                    if (e.ctrlKey || e.altKey || e.metaKey || k < 32) {//Ignore                                        // 1838
                        return;                                                                                        // 1839
                    } else if (k) {                                                                                    // 1840
                        if (pos.end - pos.begin !== 0){                                                                // 1841
                            clearBuffer(pos.begin, pos.end);                                                           // 1842
                            shiftL(pos.begin, pos.end-1);                                                              // 1843
                        }                                                                                              // 1844
                                                                                                                       // 1845
                        p = seekNext(pos.begin - 1);                                                                   // 1846
                        if (p < len) {                                                                                 // 1847
                            c = String.fromCharCode(k);                                                                // 1848
                            if (tests[p].test(c)) {                                                                    // 1849
                                shiftR(p);                                                                             // 1850
                                                                                                                       // 1851
                                buffer[p] = c;                                                                         // 1852
                                writeBuffer();                                                                         // 1853
                                next = seekNext(p);                                                                    // 1854
                                                                                                                       // 1855
                                if(android){                                                                           // 1856
                                    setTimeout($.proxy($.fn.caret,input,next),0);                                      // 1857
                                }else{                                                                                 // 1858
                                    input.caret(next);                                                                 // 1859
                                }                                                                                      // 1860
                                                                                                                       // 1861
                                if (settings.completed && next >= len) {                                               // 1862
                                    settings.completed.call(input);                                                    // 1863
                                }                                                                                      // 1864
                            }                                                                                          // 1865
                        }                                                                                              // 1866
                        e.preventDefault();                                                                            // 1867
                    }                                                                                                  // 1868
                }                                                                                                      // 1869
                                                                                                                       // 1870
                function clearBuffer(start, end) {                                                                     // 1871
                    var i;                                                                                             // 1872
                    for (i = start; i < end && i < len; i++) {                                                         // 1873
                        if (tests[i]) {                                                                                // 1874
                            buffer[i] = settings.placeholder;                                                          // 1875
                        }                                                                                              // 1876
                    }                                                                                                  // 1877
                }                                                                                                      // 1878
                                                                                                                       // 1879
                function writeBuffer() {                                                                               // 1880
                    input.val(buffer.join(''));                                                                        // 1881
                }                                                                                                      // 1882
                                                                                                                       // 1883
                function checkVal(allow) {                                                                             // 1884
                    //try to place characters where they belong                                                        // 1885
                    var test = input.val(),                                                                            // 1886
                        lastMatch = -1,                                                                                // 1887
                        i,                                                                                             // 1888
                        c;                                                                                             // 1889
                                                                                                                       // 1890
                    for (i = 0, pos = 0; i < len; i++) {                                                               // 1891
                        if (tests[i]) {                                                                                // 1892
                            buffer[i] = settings.placeholder;                                                          // 1893
                            while (pos++ < test.length) {                                                              // 1894
                                c = test.charAt(pos - 1);                                                              // 1895
                                if (tests[i].test(c)) {                                                                // 1896
                                    buffer[i] = c;                                                                     // 1897
                                    lastMatch = i;                                                                     // 1898
                                    break;                                                                             // 1899
                                }                                                                                      // 1900
                            }                                                                                          // 1901
                            if (pos > test.length) {                                                                   // 1902
                                break;                                                                                 // 1903
                            }                                                                                          // 1904
                        } else if (buffer[i] === test.charAt(pos) && i !== partialPosition) {                          // 1905
                            pos++;                                                                                     // 1906
                            lastMatch = i;                                                                             // 1907
                        }                                                                                              // 1908
                    }                                                                                                  // 1909
                    if (allow) {                                                                                       // 1910
                        writeBuffer();                                                                                 // 1911
                    } else if (lastMatch + 1 < partialPosition) {                                                      // 1912
                        input.val("");                                                                                 // 1913
                        clearBuffer(0, len);                                                                           // 1914
                    } else {                                                                                           // 1915
                        writeBuffer();                                                                                 // 1916
                        input.val(input.val().substring(0, lastMatch + 1));                                            // 1917
                    }                                                                                                  // 1918
                    return (partialPosition ? i : firstNonMaskPos);                                                    // 1919
                }                                                                                                      // 1920
                                                                                                                       // 1921
                input.data($.mask.dataName,function(){                                                                 // 1922
                    return $.map(buffer, function(c, i) {                                                              // 1923
                        return tests[i]&&c!=settings.placeholder ? c : null;                                           // 1924
                    }).join('');                                                                                       // 1925
                });                                                                                                    // 1926
                                                                                                                       // 1927
                if (!input.attr("readonly"))                                                                           // 1928
                    input                                                                                              // 1929
                        .one("unmask", function() {                                                                    // 1930
                            input                                                                                      // 1931
                                .unbind(".mask")                                                                       // 1932
                                .removeData($.mask.dataName);                                                          // 1933
                        })                                                                                             // 1934
                        .bind("focus.mask", function() {                                                               // 1935
                            clearTimeout(caretTimeoutId);                                                              // 1936
                            var pos,                                                                                   // 1937
                                moveCaret;                                                                             // 1938
                                                                                                                       // 1939
                            focusText = input.val();                                                                   // 1940
                                                                                                                       // 1941
                            // UZI: added this to allow for val('')                                                    // 1942
                            // see: https://github.com/digitalBush/jquery.maskedinput/issues/29                        // 1943
                            if (focusText === "") {                                                                    // 1944
                                clearBuffer(0, len);                                                                   // 1945
                                writeBuffer();                                                                         // 1946
                                pos = 0;                                                                               // 1947
                            }                                                                                          // 1948
                            else                                                                                       // 1949
                            {                                                                                          // 1950
                                pos = checkVal();                                                                      // 1951
                            }                                                                                          // 1952
                            // END UZI                                                                                 // 1953
                                                                                                                       // 1954
                            //pos = checkVal();                                                                        // 1955
                                                                                                                       // 1956
                            caretTimeoutId = setTimeout(function(){                                                    // 1957
                                writeBuffer();                                                                         // 1958
                                if (pos == mask.length) {                                                              // 1959
                                    input.caret(0, pos);                                                               // 1960
                                } else {                                                                               // 1961
                                    input.caret(pos);                                                                  // 1962
                                }                                                                                      // 1963
                            }, 10);                                                                                    // 1964
                        })                                                                                             // 1965
                        .bind("blur.mask", function() {                                                                // 1966
                            checkVal();                                                                                // 1967
                            if (input.val() != focusText)                                                              // 1968
                                input.change();                                                                        // 1969
                        })                                                                                             // 1970
                        .bind("keydown.mask", keydownEvent)                                                            // 1971
                        .bind("keypress.mask", keypressEvent)                                                          // 1972
                        .bind(pasteEventName, function() {                                                             // 1973
                            setTimeout(function() {                                                                    // 1974
                                var pos=checkVal(true);                                                                // 1975
                                input.caret(pos);                                                                      // 1976
                                if (settings.completed && pos == input.val().length)                                   // 1977
                                    settings.completed.call(input);                                                    // 1978
                            }, 0);                                                                                     // 1979
                        });                                                                                            // 1980
                checkVal(); //Perform initial check for existing values                                                // 1981
            });                                                                                                        // 1982
        }                                                                                                              // 1983
    });                                                                                                                // 1984
                                                                                                                       // 1985
                                                                                                                       // 1986
})(jQuery);/*jshint -W004 */ // duplicate variables                                                                    // 1987
/*jshint -W083 */ // inline functions are used safely                                                                  // 1988
/**                                                                                                                    // 1989
 * Alpaca forms engine for jQuery                                                                                      // 1990
 */                                                                                                                    // 1991
(function($) {                                                                                                         // 1992
                                                                                                                       // 1993
    var Alpaca;                                                                                                        // 1994
                                                                                                                       // 1995
    /**                                                                                                                // 1996
     * @namespace Static method to build an Alpaca field instance bound to a DOM element.                              // 1997
     * @description <p>Usage:</p>                                                                                      // 1998
     * <p>                                                                                                             // 1999
     * 1: Binds a control using the contents of $(el) or hands back a previously bound control<br/>                    // 2000
     * <code>                                                                                                          // 2001
     *     <pre>                                                                                                       // 2002
     *      Alpaca(el)                                                                                                 // 2003
     *     </pre>                                                                                                      // 2004
     * </code>                                                                                                         // 2005
     * </p>                                                                                                            // 2006
     * <p>                                                                                                             // 2007
     * 2: Binds a control to $(el) using the given data (only for non-object types).<br/>                              // 2008
     * <code>                                                                                                          // 2009
     *     <pre>                                                                                                       // 2010
     *      Alpaca(el, data)                                                                                           // 2011
     *     </pre>                                                                                                      // 2012
     * </code>                                                                                                         // 2013
     * </p>                                                                                                            // 2014
     * <p>                                                                                                             // 2015
     * 3: Binds a control to $(el) using the given configuration object.<br/>                                          // 2016
     * </p>                                                                                                            // 2017
     * <code>                                                                                                          // 2018
     *     <pre>                                                                                                       // 2019
     * Alpaca(el,{                                                                                                     // 2020
     *   "data" : {Any} field data (optional),                                                                         // 2021
     *   "schema": {Object} field schema (optional),                                                                   // 2022
     *   "options" : {Object} field options (optional),                                                                // 2023
     *   "view": {Object|String} field view (object or id reference) (optional),                                       // 2024
     *   "render": {Function} callback function for replacing default rendering method (optional),                     // 2025
     *   "postRender": {Function} callback function for post-rendering  (optional),                                    // 2026
     *   "error": {Function} callback function for error handling  (optional),                                         // 2027
     *   "connector": {Alpaca.Connector} connector for retrieving or storing data, schema, options,                    // 2028
     *                view and templates. (optional),                                                                  // 2029
     * });                                                                                                             // 2030
     *    </pre>                                                                                                       // 2031
     *</code>                                                                                                          // 2032
     * @returns {Object} alpaca field instance                                                                         // 2033
     */                                                                                                                // 2034
    Alpaca = function() {                                                                                              // 2035
        var args = Alpaca.makeArray(arguments);                                                                        // 2036
        if (args.length === 0) {                                                                                       // 2037
            // illegal                                                                                                 // 2038
            return Alpaca.throwDefaultError("You must supply at least one argument which is the element against which to apply the Alpaca generated form");
        }                                                                                                              // 2040
                                                                                                                       // 2041
        // element is the first argument                                                                               // 2042
        var el = args[0];                                                                                              // 2043
                                                                                                                       // 2044
        // other arguments we may want to figure out                                                                   // 2045
        var data = null;                                                                                               // 2046
        var schema = null;                                                                                             // 2047
        var options = null;                                                                                            // 2048
        var view = null;                                                                                               // 2049
        var callback = null;                                                                                           // 2050
        var renderedCallback = null;                                                                                   // 2051
        var errorCallback = null;                                                                                      // 2052
        var connector = null;                                                                                          // 2053
        var notTopLevel = false;                                                                                       // 2054
        var isDynamicCreation = false;                                                                                 // 2055
        var initialSettings = {};                                                                                      // 2056
                                                                                                                       // 2057
        // if these options are provided, then data, schema, options and source are loaded via connector               // 2058
        var dataSource = null;                                                                                         // 2059
        var schemaSource = null;                                                                                       // 2060
        var optionsSource = null;                                                                                      // 2061
        var viewSource = null;                                                                                         // 2062
                                                                                                                       // 2063
        if (args.length == 1) {                                                                                        // 2064
            // hands back the field instance that is bound directly under the specified element                        // 2065
            // var field = Alpaca(el);                                                                                 // 2066
            var domElements = $(el).find(":first");                                                                    // 2067
                                                                                                                       // 2068
            var field = null;                                                                                          // 2069
            for (var i = 0; i < domElements.length; i++) {                                                             // 2070
                var domElement = domElements[i];                                                                       // 2071
                var fieldId = $(domElement).attr("alpaca-field-id");                                                   // 2072
                if (fieldId) {                                                                                         // 2073
                    var _field = Alpaca.fieldInstances[fieldId];                                                       // 2074
                    if (_field) {                                                                                      // 2075
                        field = _field;                                                                                // 2076
                    }                                                                                                  // 2077
                }                                                                                                      // 2078
            }                                                                                                          // 2079
                                                                                                                       // 2080
            if (field !== null) {                                                                                      // 2081
                return field;                                                                                          // 2082
            } else {                                                                                                   // 2083
                // otherwise, grab the data inside the element and use that for the control                            // 2084
                var domData = $(el).html();                                                                            // 2085
                $(el).html("");                                                                                        // 2086
                data = domData;                                                                                        // 2087
            }                                                                                                          // 2088
        }                                                                                                              // 2089
                                                                                                                       // 2090
        if (args.length >= 2) {                                                                                        // 2091
            if (Alpaca.isObject(args[1])) {                                                                            // 2092
                data = args[1].data;                                                                                   // 2093
                schema = args[1].schema;                                                                               // 2094
                options = args[1].options;                                                                             // 2095
                view = args[1].view;                                                                                   // 2096
                callback = args[1].render;                                                                             // 2097
                renderedCallback = args[1].postRender;                                                                 // 2098
                errorCallback = args[1].error;                                                                         // 2099
                connector = args[1].connector;                                                                         // 2100
                                                                                                                       // 2101
                // sources                                                                                             // 2102
                dataSource = args[1].dataSource;                                                                       // 2103
                schemaSource = args[1].schemaSource;                                                                   // 2104
                optionsSource = args[1].optionsSource;                                                                 // 2105
                viewSource = args[1].viewSource;                                                                       // 2106
                                                                                                                       // 2107
                // other                                                                                               // 2108
                if (args[1].ui) {                                                                                      // 2109
                    initialSettings["ui"] = args[1].ui;                                                                // 2110
                }                                                                                                      // 2111
                if (args[1].type) {                                                                                    // 2112
                    initialSettings["type"] = args[1].type;                                                            // 2113
                }                                                                                                      // 2114
                if (!Alpaca.isEmpty(args[1].notTopLevel)) {                                                            // 2115
                    notTopLevel = args[1].notTopLevel;                                                                 // 2116
                }                                                                                                      // 2117
                if (!Alpaca.isEmpty(args[1].isDynamicCreation)) {                                                      // 2118
                    isDynamicCreation = args[1].isDynamicCreation;                                                     // 2119
                }                                                                                                      // 2120
            } else {                                                                                                   // 2121
                // "data" is the second argument                                                                       // 2122
                data = args[1];                                                                                        // 2123
                if (Alpaca.isFunction(data)) {                                                                         // 2124
                    data = data();                                                                                     // 2125
                }                                                                                                      // 2126
            }                                                                                                          // 2127
        }                                                                                                              // 2128
                                                                                                                       // 2129
        // if no error callback is provided, we fall back to a browser alert                                           // 2130
        if (Alpaca.isEmpty(errorCallback)) {                                                                           // 2131
            errorCallback = Alpaca.defaultErrorCallback;                                                               // 2132
        }                                                                                                              // 2133
                                                                                                                       // 2134
        if (Alpaca.isEmpty(connector)) {                                                                               // 2135
            var connectorClass = Alpaca.getConnectorClass("default");                                                  // 2136
            connector = new connectorClass("default");                                                                 // 2137
        }                                                                                                              // 2138
                                                                                                                       // 2139
        // container can either be a dom id or a dom element                                                           // 2140
        if (el) {                                                                                                      // 2141
            if (Alpaca.isString(el)) {                                                                                 // 2142
                el = $("#" + el);                                                                                      // 2143
            }                                                                                                          // 2144
        }                                                                                                              // 2145
                                                                                                                       // 2146
        // For second or deeper level of fields, default loader should be the one to do loadAll                        // 2147
        // since schema, data, options and view should have already been loaded.                                       // 2148
        // Unless we want to load individual fields (other than the templates) using the provided                      // 2149
        // loader, this should be good enough. The benefit is saving time on loader format checking.                   // 2150
                                                                                                                       // 2151
        var loadAllConnector = connector;                                                                              // 2152
                                                                                                                       // 2153
        if (notTopLevel) {                                                                                             // 2154
            var loadAllConnectorClass = Alpaca.getConnectorClass("default");                                           // 2155
            loadAllConnector = new loadAllConnectorClass("default");                                                   // 2156
        }                                                                                                              // 2157
                                                                                                                       // 2158
        // wrap rendered callback to allow for UI treatment (dom focus, etc)                                           // 2159
        if (!options) {                                                                                                // 2160
            options = {};                                                                                              // 2161
        }                                                                                                              // 2162
        if (Alpaca.isUndefined(options.focus)) {                                                                       // 2163
            options.focus = false;                                                                                     // 2164
        }                                                                                                              // 2165
        var _renderedCallback = function(control)                                                                      // 2166
        {                                                                                                              // 2167
            // auto-set the focus?                                                                                     // 2168
            if (options && options.focus)                                                                              // 2169
            {                                                                                                          // 2170
                if (options.focus === true)                                                                            // 2171
                {                                                                                                      // 2172
                    // pick first element in form                                                                      // 2173
                    if (control.children && control.children.length > 0) {                                             // 2174
                        if (control.children[0].field && control.children[0].field[0]) {                               // 2175
                            //$(control.children[0].field[0]).focus();                                                 // 2176
                            $(control.children[0]).focus();                                                            // 2177
                        }                                                                                              // 2178
                    }                                                                                                  // 2179
                }                                                                                                      // 2180
                else                                                                                                   // 2181
                {                                                                                                      // 2182
                    // pick a named control                                                                            // 2183
                    var child = control.getControlByPath(options.focus);                                               // 2184
                    if (child && child.field) {                                                                        // 2185
                        //$(child.field[0]).focus();                                                                   // 2186
                        $(child).focus();                                                                              // 2187
                    }                                                                                                  // 2188
                }                                                                                                      // 2189
            }                                                                                                          // 2190
                                                                                                                       // 2191
            if (renderedCallback)                                                                                      // 2192
            {                                                                                                          // 2193
                renderedCallback(control);                                                                             // 2194
            }                                                                                                          // 2195
        };                                                                                                             // 2196
                                                                                                                       // 2197
        loadAllConnector.loadAll({                                                                                     // 2198
            "data": data,                                                                                              // 2199
            "schema": schema,                                                                                          // 2200
            "options": options,                                                                                        // 2201
            "view": view,                                                                                              // 2202
            "dataSource": dataSource,                                                                                  // 2203
            "schemaSource": schemaSource,                                                                              // 2204
            "optionsSource": optionsSource,                                                                            // 2205
            "viewSource": viewSource                                                                                   // 2206
        }, function(loadedData, loadedOptions, loadedSchema, loadedView) {                                             // 2207
                                                                                                                       // 2208
            // for cases where things could not be loaded via source loaders, fall back to what may have been passed   // 2209
            // in directly as values                                                                                   // 2210
                                                                                                                       // 2211
            loadedData = loadedData ? loadedData : data;                                                               // 2212
            loadedSchema = loadedSchema ? loadedSchema: schema;                                                        // 2213
            loadedOptions = loadedOptions ? loadedOptions : options;                                                   // 2214
            loadedView = loadedView ? loadedView : view;                                                               // 2215
                                                                                                                       // 2216
            // some defaults for the case where data is null                                                           // 2217
            // if schema + options are not provided, we assume a text field                                            // 2218
                                                                                                                       // 2219
            if (Alpaca.isEmpty(loadedData))                                                                            // 2220
            {                                                                                                          // 2221
                if (Alpaca.isEmpty(loadedSchema) && (Alpaca.isEmpty(loadedOptions) || Alpaca.isEmpty(loadedOptions.type)))
                {                                                                                                      // 2223
                    loadedData = "";                                                                                   // 2224
                                                                                                                       // 2225
                    if (Alpaca.isEmpty(loadedOptions))                                                                 // 2226
                    {                                                                                                  // 2227
                        loadedOptions = "text";                                                                        // 2228
                    }                                                                                                  // 2229
                    else if (options && Alpaca.isObject(options))                                                      // 2230
                    {                                                                                                  // 2231
                        loadedOptions.type = "text";                                                                   // 2232
                    }                                                                                                  // 2233
                }                                                                                                      // 2234
            }                                                                                                          // 2235
                                                                                                                       // 2236
            // init alpaca                                                                                             // 2237
            return Alpaca.init(el, loadedData, loadedOptions, loadedSchema, loadedView, initialSettings, callback, _renderedCallback, connector, errorCallback, isDynamicCreation);
                                                                                                                       // 2239
        }, function (loadError) {                                                                                      // 2240
            errorCallback(loadError);                                                                                  // 2241
            return null;                                                                                               // 2242
        });                                                                                                            // 2243
                                                                                                                       // 2244
        // hand back the field                                                                                         // 2245
        return $(el);                                                                                                  // 2246
    };                                                                                                                 // 2247
                                                                                                                       // 2248
    /**                                                                                                                // 2249
     * @namespace Namespace for all Alpaca Field Class Implementations.                                                // 2250
     */                                                                                                                // 2251
    Alpaca.Fields = { };                                                                                               // 2252
                                                                                                                       // 2253
    /**                                                                                                                // 2254
     * @namespace Namespace for all Alpaca Connector Class Implementations.                                            // 2255
     */                                                                                                                // 2256
    Alpaca.Connectors = { };                                                                                           // 2257
                                                                                                                       // 2258
    // static methods and properties                                                                                   // 2259
    $.extend(Alpaca,                                                                                                   // 2260
    /** @lends Alpaca */                                                                                               // 2261
    {                                                                                                                  // 2262
        /**                                                                                                            // 2263
         * Version number.                                                                                             // 2264
         */                                                                                                            // 2265
        VERSION: "0.1.0",                                                                                              // 2266
                                                                                                                       // 2267
        /**                                                                                                            // 2268
         * Makes an array.                                                                                             // 2269
         *                                                                                                             // 2270
         * @param {Any} nonArray A non-array variable.                                                                 // 2271
         * @returns {Array} Array out of the non-array variable.                                                       // 2272
         */                                                                                                            // 2273
        makeArray : function(nonArray) {                                                                               // 2274
            return Array.prototype.slice.call(nonArray);                                                               // 2275
        },                                                                                                             // 2276
                                                                                                                       // 2277
        /**                                                                                                            // 2278
         * Finds whether the type of a variable is function.                                                           // 2279
         * @param {Any} obj The variable being evaluated.                                                              // 2280
         * @returns {Boolean} True if the variable is a function, false otherwise.                                     // 2281
         */                                                                                                            // 2282
        isFunction: function(obj) {                                                                                    // 2283
            return Object.prototype.toString.call(obj) === "[object Function]";                                        // 2284
        },                                                                                                             // 2285
                                                                                                                       // 2286
        /**                                                                                                            // 2287
         * Finds whether the type of a variable is string.                                                             // 2288
         * @param {Any} obj The variable being evaluated.                                                              // 2289
         * @returns {Boolean} True if the variable is a string, false otherwise.                                       // 2290
         */                                                                                                            // 2291
        isString: function(obj) {                                                                                      // 2292
            return (typeof obj == "string");                                                                           // 2293
        },                                                                                                             // 2294
                                                                                                                       // 2295
        /**                                                                                                            // 2296
         * Finds whether the type of a variable is object.                                                             // 2297
         * @param {Any} obj The variable being evaluated.                                                              // 2298
         * @returns {Boolean} True if the variable is an object, false otherwise.                                      // 2299
         */                                                                                                            // 2300
        isObject: function(obj) {                                                                                      // 2301
            if (obj === true || obj === false || Alpaca.isUndefined(obj) || obj === null) {                            // 2302
                return false;                                                                                          // 2303
            }                                                                                                          // 2304
                                                                                                                       // 2305
            return (typeof(obj) === "object") && (typeof(obj.length) === "undefined");                                 // 2306
        },                                                                                                             // 2307
                                                                                                                       // 2308
        /**                                                                                                            // 2309
         * Finds whether the type of a variable is a plain, non-prototyped object.                                     // 2310
         * @param {Any} obj The variable being evaluated.                                                              // 2311
         * @returns {Boolean} True if the variable is a plain object, false otherwise.                                 // 2312
         */                                                                                                            // 2313
        isPlainObject: function(obj) {                                                                                 // 2314
            return $.isPlainObject(obj);                                                                               // 2315
        },                                                                                                             // 2316
                                                                                                                       // 2317
        /**                                                                                                            // 2318
         * Finds whether the type of a variable is number.                                                             // 2319
         * @param {Any} obj The variable being evaluated.                                                              // 2320
         * @returns {Boolean} True if the variable is a number, false otherwise.                                       // 2321
         */                                                                                                            // 2322
        isNumber: function(obj) {                                                                                      // 2323
            return (typeof obj == "number");                                                                           // 2324
        },                                                                                                             // 2325
                                                                                                                       // 2326
        /**                                                                                                            // 2327
         * Finds whether the type of a variable is array.                                                              // 2328
         * @param {Any} obj The variable being evaluated.                                                              // 2329
         * @returns {Boolean} True if the variable is an array, false otherwise.                                       // 2330
         */                                                                                                            // 2331
        isArray: function(obj) {                                                                                       // 2332
            if (obj === true || obj === false || Alpaca.isUndefined(obj) || obj === null) {                            // 2333
                return false;                                                                                          // 2334
            }                                                                                                          // 2335
                                                                                                                       // 2336
            return obj.push && obj.slice;                                                                              // 2337
        },                                                                                                             // 2338
                                                                                                                       // 2339
        /**                                                                                                            // 2340
         * Finds whether the type of a variable is boolean.                                                            // 2341
         * @param {Any} obj The variable being evaluated.                                                              // 2342
         * @returns {Boolean} True if the variable is a boolean, false otherwise.                                      // 2343
         */                                                                                                            // 2344
        isBoolean: function(obj) {                                                                                     // 2345
            return (typeof obj == "boolean");                                                                          // 2346
        },                                                                                                             // 2347
                                                                                                                       // 2348
        /**                                                                                                            // 2349
         * Finds whether the type of a variable is undefined.                                                          // 2350
         * @param {Any} obj The variable being evaluated.                                                              // 2351
         * @returns {Boolean} True if the variable is a undefined, false otherwise.                                    // 2352
         */                                                                                                            // 2353
        isUndefined: function(obj) {                                                                                   // 2354
            return (typeof obj == "undefined");                                                                        // 2355
        },                                                                                                             // 2356
                                                                                                                       // 2357
        /**                                                                                                            // 2358
         * Strips any excess whitespace characters from the given text.                                                // 2359
         * Returns the trimmed string.                                                                                 // 2360
         *                                                                                                             // 2361
         * @param str                                                                                                  // 2362
         *                                                                                                             // 2363
         * @return trimmed string                                                                                      // 2364
         */                                                                                                            // 2365
        trim: function(text)                                                                                           // 2366
        {                                                                                                              // 2367
            var trimmed = text;                                                                                        // 2368
                                                                                                                       // 2369
            if (trimmed && Alpaca.isString(trimmed))                                                                   // 2370
            {                                                                                                          // 2371
                trimmed = trimmed.replace(/^\s+|\s+$/g, '');                                                           // 2372
            }                                                                                                          // 2373
                                                                                                                       // 2374
            return trimmed;                                                                                            // 2375
        },                                                                                                             // 2376
                                                                                                                       // 2377
        /**                                                                                                            // 2378
         * Provides a safe conversion of an HTML textual string into a DOM object.                                     // 2379
         *                                                                                                             // 2380
         * @param x                                                                                                    // 2381
         * @return {*}                                                                                                 // 2382
         */                                                                                                            // 2383
        safeDomParse: function(x)                                                                                      // 2384
        {                                                                                                              // 2385
            if (x && Alpaca.isString(x))                                                                               // 2386
            {                                                                                                          // 2387
                // Correct for the fact that jQuery 9 is a bit sensitive with respect to string characters             // 2388
                // http://stackoverflow.com/questions/14347611/jquery-1-9-client-side-template-syntax-error-unrecognized-expression
                //                                                                                                     // 2390
                // ensure that html doesn't start with spaces, carriage returns or anything evil                       // 2391
                                                                                                                       // 2392
                x = Alpaca.trim(x);                                                                                    // 2393
                                                                                                                       // 2394
                // convert to dom                                                                                      // 2395
                x = $(x);                                                                                              // 2396
            }                                                                                                          // 2397
                                                                                                                       // 2398
            return x;                                                                                                  // 2399
        },                                                                                                             // 2400
                                                                                                                       // 2401
        /**                                                                                                            // 2402
         * Finds whether a variable is empty.                                                                          // 2403
         * @param {Any} obj The variable being evaluated.                                                              // 2404
         * @returns {Boolean} True if the variable is empty, false otherwise.                                          // 2405
         */                                                                                                            // 2406
        isEmpty: function(obj) {                                                                                       // 2407
            return Alpaca.isUndefined(obj) || obj === null;                                                            // 2408
        },                                                                                                             // 2409
                                                                                                                       // 2410
        /**                                                                                                            // 2411
         * Produces a copy of the given JS value.                                                                      // 2412
         *                                                                                                             // 2413
         * If the value is a simple array or a simple object, then a pure copy is produced.                            // 2414
         *                                                                                                             // 2415
         * If it's a complex object or a function, then the reference is copied (i.e. not truly a copy).               // 2416
         *                                                                                                             // 2417
         * @param thing                                                                                                // 2418
         * @return {*}                                                                                                 // 2419
         */                                                                                                            // 2420
        copyOf: function(thing)                                                                                        // 2421
        {                                                                                                              // 2422
            var copy = thing;                                                                                          // 2423
                                                                                                                       // 2424
            if (Alpaca.isArray(thing))                                                                                 // 2425
            {                                                                                                          // 2426
                copy = [];                                                                                             // 2427
                                                                                                                       // 2428
                for (var i = 0; i < thing.length; i++)                                                                 // 2429
                {                                                                                                      // 2430
                    copy.push(Alpaca.copyOf(thing[i]));                                                                // 2431
                }                                                                                                      // 2432
            }                                                                                                          // 2433
            else if (Alpaca.isObject(thing))                                                                           // 2434
            {                                                                                                          // 2435
                if (thing instanceof Date)                                                                             // 2436
                {                                                                                                      // 2437
                    // date                                                                                            // 2438
                    return new Date(thing.getTime());                                                                  // 2439
                }                                                                                                      // 2440
                else if (thing instanceof RegExp)                                                                      // 2441
                {                                                                                                      // 2442
                    // regular expression                                                                              // 2443
                    return new RegExp(thing);                                                                          // 2444
                }                                                                                                      // 2445
                else if (thing.nodeType && "cloneNode" in thing)                                                       // 2446
                {                                                                                                      // 2447
                    // DOM node                                                                                        // 2448
                    copy = thing.cloneNode(true);                                                                      // 2449
                }                                                                                                      // 2450
                else if ($.isPlainObject(thing))                                                                       // 2451
                {                                                                                                      // 2452
                    copy = {};                                                                                         // 2453
                                                                                                                       // 2454
                    for (var k in thing)                                                                               // 2455
                    {                                                                                                  // 2456
                        if (thing.hasOwnProperty(k))                                                                   // 2457
                        {                                                                                              // 2458
                            copy[k] = Alpaca.copyOf(thing[k]);                                                         // 2459
                        }                                                                                              // 2460
                    }                                                                                                  // 2461
                }                                                                                                      // 2462
                else                                                                                                   // 2463
                {                                                                                                      // 2464
                    // otherwise, it's some other kind of object so we just do a referential copy                      // 2465
                    // in other words, not a copy                                                                      // 2466
                }                                                                                                      // 2467
            }                                                                                                          // 2468
                                                                                                                       // 2469
            return copy;                                                                                               // 2470
        },                                                                                                             // 2471
                                                                                                                       // 2472
        /**                                                                                                            // 2473
         * Retained for legacy purposes.  Alias for copyOf().                                                          // 2474
         *                                                                                                             // 2475
         * @param object                                                                                               // 2476
         * @returns {*}                                                                                                // 2477
         */                                                                                                            // 2478
        cloneObject: function(object)                                                                                  // 2479
        {                                                                                                              // 2480
            return Alpaca.copyOf(object);                                                                              // 2481
        },                                                                                                             // 2482
                                                                                                                       // 2483
        /**                                                                                                            // 2484
         * Splices a string.                                                                                           // 2485
         *                                                                                                             // 2486
         * @param {String} source Source string to be spliced.                                                         // 2487
         * @param {Integer} splicePoint Splice location.                                                               // 2488
         * @param {String} splice String to be spliced in.                                                             // 2489
         * @returns {String} Spliced string                                                                            // 2490
         */                                                                                                            // 2491
        spliceIn: function(source, splicePoint, splice) {                                                              // 2492
            return source.substring(0, splicePoint) + splice + source.substring(splicePoint, source.length);           // 2493
        },                                                                                                             // 2494
                                                                                                                       // 2495
        /**                                                                                                            // 2496
         * Compacts an array.                                                                                          // 2497
         *                                                                                                             // 2498
         * @param {Array} arr Source array to be compacted.                                                            // 2499
         * @returns {Array} Compacted array.                                                                           // 2500
         */                                                                                                            // 2501
        compactArray: function(arr) {                                                                                  // 2502
            var n = [], l = arr.length,i;                                                                              // 2503
            for (i = 0; i < l; i++) {                                                                                  // 2504
                if (!lang.isNull(arr[i]) && !lang.isUndefined(arr[i])) {                                               // 2505
                    n.push(arr[i]);                                                                                    // 2506
                }                                                                                                      // 2507
            }                                                                                                          // 2508
            return n;                                                                                                  // 2509
        },                                                                                                             // 2510
                                                                                                                       // 2511
        /**                                                                                                            // 2512
         * Removes accents from a string.                                                                              // 2513
         *                                                                                                             // 2514
         * @param {String} str Source string.                                                                          // 2515
         * @returns {String} Cleaned string without accents.                                                           // 2516
         */                                                                                                            // 2517
        removeAccents: function(str) {                                                                                 // 2518
            return str.replace(/[àáâãäå]/g, "a").replace(/[èéêë]/g, "e").replace(/[ìíîï]/g, "i").replace(/[òóôõö]/g, "o").replace(/[ùúûü]/g, "u").replace(/[ýÿ]/g, "y").replace(/[ñ]/g, "n").replace(/[ç]/g, "c").replace(/[œ]/g, "oe").replace(/[æ]/g, "ae");
        },                                                                                                             // 2520
                                                                                                                       // 2521
        /**                                                                                                            // 2522
         * @private                                                                                                    // 2523
         * @param el                                                                                                   // 2524
         * @param arr                                                                                                  // 2525
         * @param fn                                                                                                   // 2526
         */                                                                                                            // 2527
        indexOf: function(el, arr, fn) {                                                                               // 2528
            var l = arr.length,i;                                                                                      // 2529
                                                                                                                       // 2530
            if (!Alpaca.isFunction(fn)) {                                                                              // 2531
                /**                                                                                                    // 2532
                 * @ignore                                                                                             // 2533
                 * @param elt                                                                                          // 2534
                 * @param arrElt                                                                                       // 2535
                 */                                                                                                    // 2536
                fn = function(elt, arrElt) {                                                                           // 2537
                    return elt === arrElt;                                                                             // 2538
                };                                                                                                     // 2539
            }                                                                                                          // 2540
                                                                                                                       // 2541
            for (i = 0; i < l; i++) {                                                                                  // 2542
                if (fn.call({}, el, arr[i])) {                                                                         // 2543
                    return i;                                                                                          // 2544
                }                                                                                                      // 2545
            }                                                                                                          // 2546
                                                                                                                       // 2547
            return -1;                                                                                                 // 2548
        },                                                                                                             // 2549
                                                                                                                       // 2550
        /**                                                                                                            // 2551
         * @private                                                                                                    // 2552
         * Static counter for generating a unique ID.                                                                  // 2553
         */                                                                                                            // 2554
        uniqueIdCounter: 0,                                                                                            // 2555
                                                                                                                       // 2556
        /**                                                                                                            // 2557
         * Default Locale.                                                                                             // 2558
         */                                                                                                            // 2559
        defaultLocale: "en_US",                                                                                        // 2560
                                                                                                                       // 2561
        /**                                                                                                            // 2562
         * Sets the default Locale.                                                                                    // 2563
         *                                                                                                             // 2564
         * @param {String} locale New default locale.                                                                  // 2565
         */                                                                                                            // 2566
        setDefaultLocale: function(locale) {                                                                           // 2567
            this.defaultLocale = locale;                                                                               // 2568
        },                                                                                                             // 2569
                                                                                                                       // 2570
        /**                                                                                                            // 2571
         * Field Type to Schema Type Mappings.                                                                         // 2572
         */                                                                                                            // 2573
        defaultSchemaFieldMapping: {},                                                                                 // 2574
                                                                                                                       // 2575
        /**                                                                                                            // 2576
         * Registers a field type to schema data type mapping.                                                         // 2577
         *                                                                                                             // 2578
         * @param {String} schemaType Schema data type.                                                                // 2579
         * @param {String} fieldType Field type.                                                                       // 2580
         */                                                                                                            // 2581
        registerDefaultSchemaFieldMapping: function(schemaType, fieldType) {                                           // 2582
            if (schemaType && fieldType) {                                                                             // 2583
                this.defaultSchemaFieldMapping[schemaType] = fieldType;                                                // 2584
            }                                                                                                          // 2585
        },                                                                                                             // 2586
                                                                                                                       // 2587
        /**                                                                                                            // 2588
         * Field Type to Schema Format Mappings.                                                                       // 2589
         */                                                                                                            // 2590
        defaultFormatFieldMapping: {},                                                                                 // 2591
                                                                                                                       // 2592
        /**                                                                                                            // 2593
         * Registers a field type to schema format mapping.                                                            // 2594
         *                                                                                                             // 2595
         * @param {String} format Schema format.                                                                       // 2596
         * @param {String} fieldType Field type.                                                                       // 2597
         */                                                                                                            // 2598
        registerDefaultFormatFieldMapping: function(format, fieldType) {                                               // 2599
            if (format && fieldType) {                                                                                 // 2600
                this.defaultFormatFieldMapping[format] = fieldType;                                                    // 2601
            }                                                                                                          // 2602
        },                                                                                                             // 2603
                                                                                                                       // 2604
        /**                                                                                                            // 2605
         * Gets schema type of a variable.                                                                             // 2606
         *                                                                                                             // 2607
         * @param {Any} data The variable.                                                                             // 2608
         * @returns {String} Schema type of the variable.                                                              // 2609
         */                                                                                                            // 2610
        getSchemaType: function (data) {                                                                               // 2611
            // map data types to default field types                                                                   // 2612
            if (Alpaca.isEmpty(data)) {                                                                                // 2613
                return "string";                                                                                       // 2614
            }                                                                                                          // 2615
            if (Alpaca.isObject(data)) {                                                                               // 2616
                return "object";                                                                                       // 2617
            }                                                                                                          // 2618
            if (Alpaca.isString(data)) {                                                                               // 2619
                return "string";                                                                                       // 2620
            }                                                                                                          // 2621
            if (Alpaca.isNumber(data)) {                                                                               // 2622
                return "number";                                                                                       // 2623
            }                                                                                                          // 2624
            if (Alpaca.isArray(data)) {                                                                                // 2625
                return "array";                                                                                        // 2626
            }                                                                                                          // 2627
            if (Alpaca.isBoolean(data)) {                                                                              // 2628
                return "boolean";                                                                                      // 2629
            }                                                                                                          // 2630
            // Last check for data that carries functions -- GitanaConnector case.                                     // 2631
            if (typeof data == 'object') {                                                                             // 2632
                return "object";                                                                                       // 2633
            }                                                                                                          // 2634
        },                                                                                                             // 2635
                                                                                                                       // 2636
        /**                                                                                                            // 2637
         * @private                                                                                                    // 2638
         *                                                                                                             // 2639
         * Alpaca Views.                                                                                               // 2640
         */                                                                                                            // 2641
        views: {},                                                                                                     // 2642
                                                                                                                       // 2643
        /**                                                                                                            // 2644
         * @private                                                                                                    // 2645
         *                                                                                                             // 2646
         * View ID Prefix.                                                                                             // 2647
         */                                                                                                            // 2648
        viewIdPrefix: "VIEW_",                                                                                         // 2649
                                                                                                                       // 2650
        /**                                                                                                            // 2651
         * Validates a view id.                                                                                        // 2652
         *                                                                                                             // 2653
         * @param {String} id View id being validated.                                                                 // 2654
         *                                                                                                             // 2655
         * @returns {Boolean} True if the view id is valid, false otherwise.                                           // 2656
         */                                                                                                            // 2657
        isValidViewId : function (id) {                                                                                // 2658
            return Alpaca.startsWith(id, this.viewIdPrefix);                                                           // 2659
        },                                                                                                             // 2660
                                                                                                                       // 2661
        /**                                                                                                            // 2662
         * Generates a valid view id.                                                                                  // 2663
         *                                                                                                             // 2664
         * @returns {String} A valid unique view id.                                                                   // 2665
         */                                                                                                            // 2666
        generateViewId : function () {                                                                                 // 2667
            return this.viewIdPrefix + this.generateId();                                                              // 2668
        },                                                                                                             // 2669
                                                                                                                       // 2670
        /**                                                                                                            // 2671
         * Registers a view with the framework.                                                                        // 2672
         *                                                                                                             // 2673
         * @param viewObject                                                                                           // 2674
         */                                                                                                            // 2675
        registerView: function(viewObject)                                                                             // 2676
        {                                                                                                              // 2677
            var id = viewObject.id;                                                                                    // 2678
                                                                                                                       // 2679
            if (!id)                                                                                                   // 2680
            {                                                                                                          // 2681
                return Alpaca.throwDefaultError("Cannot register view with missing view id: " + id);                   // 2682
            }                                                                                                          // 2683
                                                                                                                       // 2684
            var existingView = this.views[id];                                                                         // 2685
            if (existingView)                                                                                          // 2686
            {                                                                                                          // 2687
                Alpaca.mergeObject(existingView, viewObject);                                                          // 2688
            }                                                                                                          // 2689
            else                                                                                                       // 2690
            {                                                                                                          // 2691
                this.views[id] = viewObject;                                                                           // 2692
            }                                                                                                          // 2693
                                                                                                                       // 2694
        },                                                                                                             // 2695
                                                                                                                       // 2696
        /**                                                                                                            // 2697
         * Default view.                                                                                               // 2698
         */                                                                                                            // 2699
        defaultView : "VIEW_WEB_EDIT",                                                                                 // 2700
                                                                                                                       // 2701
        /**                                                                                                            // 2702
         * Sets default view as the view with a given id.                                                              // 2703
         *                                                                                                             // 2704
         * @param {String} Id of the view being set as default.                                                        // 2705
         */                                                                                                            // 2706
        setDefaultView: function(viewId) {                                                                             // 2707
            if (viewId && this.views.hasOwnProperty(viewId)) {                                                         // 2708
                this.defaultView = viewId;                                                                             // 2709
            }                                                                                                          // 2710
        },                                                                                                             // 2711
                                                                                                                       // 2712
        /**                                                                                                            // 2713
         * Retrieves a normalized view by view id.                                                                     // 2714
         *                                                                                                             // 2715
         * @param viewId                                                                                               // 2716
         * @return {*}                                                                                                 // 2717
         */                                                                                                            // 2718
        getNormalizedView: function(viewId)                                                                            // 2719
        {                                                                                                              // 2720
            return this.normalizedViews[viewId];                                                                       // 2721
        },                                                                                                             // 2722
                                                                                                                       // 2723
        /**                                                                                                            // 2724
         * Resolves which view handles a given theme and type of operation.                                            // 2725
         *                                                                                                             // 2726
         * @param {String} ui                                                                                          // 2727
         * @param {String} type                                                                                        // 2728
         *                                                                                                             // 2729
         * @returns {String} the view id                                                                               // 2730
         */                                                                                                            // 2731
        lookupNormalizedView: function(ui, type)                                                                       // 2732
        {                                                                                                              // 2733
            var theViewId = null;                                                                                      // 2734
                                                                                                                       // 2735
            for (var viewId in this.normalizedViews)                                                                   // 2736
            {                                                                                                          // 2737
                var view = this.normalizedViews[viewId];                                                               // 2738
                                                                                                                       // 2739
                if (view.ui == ui && view.type == type)                                                                // 2740
                {                                                                                                      // 2741
                    theViewId = viewId;                                                                                // 2742
                    break;                                                                                             // 2743
                }                                                                                                      // 2744
            }                                                                                                          // 2745
                                                                                                                       // 2746
            return theViewId;                                                                                          // 2747
        },                                                                                                             // 2748
                                                                                                                       // 2749
        /**                                                                                                            // 2750
         * Registers a template to a view.                                                                             // 2751
         *                                                                                                             // 2752
         * @param {String} templateId Template id.                                                                     // 2753
         * @param {String|Object} template Either the text of the template or an object containing { "type": "<templateEngineIdentifier>", "template": "<markup>" }
         * @param [String] viewId the optional view id.  If none is provided, then all registrations are to the default view.
         */                                                                                                            // 2756
        registerTemplate: function(templateId, template, viewId)                                                       // 2757
        {                                                                                                              // 2758
            // if no view specified, fall back to the base view which is "VIEW_BASE"                                   // 2759
            if (!viewId)                                                                                               // 2760
            {                                                                                                          // 2761
                viewId = "VIEW_BASE";                                                                                  // 2762
            }                                                                                                          // 2763
                                                                                                                       // 2764
            if (!this.views[viewId])                                                                                   // 2765
            {                                                                                                          // 2766
                this.views[viewId] = {};                                                                               // 2767
                this.views[viewId].id = viewId;                                                                        // 2768
            }                                                                                                          // 2769
                                                                                                                       // 2770
            if (!this.views[viewId].templates)                                                                         // 2771
            {                                                                                                          // 2772
                this.views[viewId].templates = {};                                                                     // 2773
            }                                                                                                          // 2774
                                                                                                                       // 2775
            this.views[viewId].templates[templateId] = template;                                                       // 2776
                                                                                                                       // 2777
        },                                                                                                             // 2778
                                                                                                                       // 2779
        /**                                                                                                            // 2780
         * Registers list of templates to a view.                                                                      // 2781
         *                                                                                                             // 2782
         * @param {Array} templates Templates being registered                                                         // 2783
         * @param {String} viewId Id of the view that the templates being registered to.                               // 2784
         */                                                                                                            // 2785
        registerTemplates: function(templates, viewId) {                                                               // 2786
            for (var templateId in templates) {                                                                        // 2787
                this.registerTemplate(templateId, templates[templateId], viewId);                                      // 2788
            }                                                                                                          // 2789
        },                                                                                                             // 2790
                                                                                                                       // 2791
        /**                                                                                                            // 2792
         * Registers a message to a view.                                                                              // 2793
         *                                                                                                             // 2794
         * @param {String} messageId Id of the message being registered.                                               // 2795
         * @param {String} message Message to be registered                                                            // 2796
         * @param {String} viewId Id of the view that the message being registered to.                                 // 2797
         */                                                                                                            // 2798
        registerMessage: function(messageId, message, viewId)                                                          // 2799
        {                                                                                                              // 2800
            // if no view specified, fall back to the base view which is "VIEW_BASE"                                   // 2801
            if (!viewId)                                                                                               // 2802
            {                                                                                                          // 2803
                viewId = "VIEW_BASE";                                                                                  // 2804
            }                                                                                                          // 2805
                                                                                                                       // 2806
            if (!this.views[viewId])                                                                                   // 2807
            {                                                                                                          // 2808
                this.views[viewId] = {};                                                                               // 2809
                this.views[viewId].id = viewId;                                                                        // 2810
            }                                                                                                          // 2811
                                                                                                                       // 2812
            if (!this.views[viewId].messages)                                                                          // 2813
            {                                                                                                          // 2814
                this.views[viewId].messages = {};                                                                      // 2815
            }                                                                                                          // 2816
                                                                                                                       // 2817
            this.views[viewId].messages[messageId] = message;                                                          // 2818
        },                                                                                                             // 2819
                                                                                                                       // 2820
        /**                                                                                                            // 2821
         * Registers messages with a view.                                                                             // 2822
         *                                                                                                             // 2823
         * @param {Array} messages Messages to be registered.                                                          // 2824
         * @param {String} viewId Id of the view that the messages being registered to.                                // 2825
         */                                                                                                            // 2826
        registerMessages: function(messages, viewId) {                                                                 // 2827
            for (var messageId in messages) {                                                                          // 2828
                if (messages.hasOwnProperty(messageId)) {                                                              // 2829
                    this.registerMessage(messageId, messages[messageId], viewId);                                      // 2830
                }                                                                                                      // 2831
            }                                                                                                          // 2832
        },                                                                                                             // 2833
                                                                                                                       // 2834
                                                                                                                       // 2835
                                                                                                                       // 2836
                                                                                                                       // 2837
                                                                                                                       // 2838
                                                                                                                       // 2839
        /////////////////////////////////////////////////////////////////////////////////////////////////////////      // 2840
        //                                                                                                             // 2841
        // STATIC HELPER METHODS (CALLED FROM WITHIN TEMPLATES)                                                        // 2842
        //                                                                                                             // 2843
        /////////////////////////////////////////////////////////////////////////////////////////////////////////      // 2844
                                                                                                                       // 2845
        /**                                                                                                            // 2846
         * @private                                                                                                    // 2847
         * Default Mappings for Field Level Templates.                                                                 // 2848
         */                                                                                                            // 2849
        fieldTemplatePostfix: {                                                                                        // 2850
            "controlFieldMessageContainer" : "-controlfield-message-container",                                        // 2851
            "controlFieldLabel" : "-controlfield-label",                                                               // 2852
            "controlFieldContainer":"-controlfield-container",                                                         // 2853
            "controlFieldHelper":"-controlfield-helper",                                                               // 2854
            /*                                                                                                         // 2855
             "controlFieldOuterEl":"-controlfield",                                                                    // 2856
             */                                                                                                        // 2857
            "fieldSetLegend" : "-fieldset-legend",                                                                     // 2858
            "fieldSetItemsContainer":"-fieldset-items-container",                                                      // 2859
            "fieldSetHelper":"-fieldset-helper",                                                                       // 2860
            "fieldSetOuterEl":"-fieldset",                                                                             // 2861
            "formButtonsContainer":"-form-buttons-container",                                                          // 2862
            "formFieldsContainer":"-form-fields-container"                                                             // 2863
        },                                                                                                             // 2864
                                                                                                                       // 2865
        /**                                                                                                            // 2866
         * @private                                                                                                    // 2867
         * Processes field level template.                                                                             // 2868
         *                                                                                                             // 2869
         * @param {String} object Object that the template is applied to.                                              // 2870
         * @param {String} name Template id.                                                                           // 2871
         * @param {Boolean} wrap True if we want the template as a wrapper, false otherwise.                           // 2872
         *                                                                                                             // 2873
         * @returns {Object} Object rendered by field level template.                                                  // 2874
         */                                                                                                            // 2875
        fieldTemplate: function(object, name, wrap) {                                                                  // 2876
                                                                                                                       // 2877
            var _this = this;                                                                                          // 2878
                                                                                                                       // 2879
            var field = object.data;                                                                                   // 2880
            var view = object.data.view;                                                                               // 2881
                                                                                                                       // 2882
            var html = "";                                                                                             // 2883
                                                                                                                       // 2884
            if (!name)                                                                                                 // 2885
                name = "controlFieldLabel";                                                                            // 2886
                                                                                                                       // 2887
            // determine which compiled template to use for this template name                                         // 2888
            var templateDescriptor = this.getTemplateDescriptor(view, name, field);                                    // 2889
            if (wrap) {                                                                                                // 2890
                                                                                                                       // 2891
                // for wrapping, we get the html source and hand it back                                               // 2892
                // first we apply any attr and classes we need                                                         // 2893
                                                                                                                       // 2894
                // get the html source                                                                                 // 2895
                var template = templateDescriptor.template.value;                                                      // 2896
                if ($('.alpaca' + this.fieldTemplatePostfix[name], Alpaca.safeDomParse(template)).length === 0) {      // 2897
                    if (this.fieldTemplatePostfix[name]) {                                                             // 2898
                        template = Alpaca.safeDomParse(template).addClass("alpaca" + this.fieldTemplatePostfix[name]); // 2899
                    }                                                                                                  // 2900
                }                                                                                                      // 2901
                html = Alpaca.safeDomParse(template).outerHTML(true);                                                  // 2902
            }                                                                                                          // 2903
            else                                                                                                       // 2904
            {                                                                                                          // 2905
                // for non-wrapped, we execute the template straight away                                              // 2906
                                                                                                                       // 2907
                var label = view.tmpl(templateDescriptor, object.data);                                                // 2908
                if (label) {                                                                                           // 2909
                    if (this.fieldTemplatePostfix[name]) {                                                             // 2910
                        if ($('.alpaca' + this.fieldTemplatePostfix[name], label).length === 0) {                      // 2911
                            label.addClass("alpaca" + this.fieldTemplatePostfix[name]);                                // 2912
                        }                                                                                              // 2913
                        if (!label.attr("id")) {                                                                       // 2914
                            label.attr("id", object.data.id + this.fieldTemplatePostfix[name]);                        // 2915
                        }                                                                                              // 2916
                    }                                                                                                  // 2917
                    html = label.outerHTML(true);                                                                      // 2918
                } else {                                                                                               // 2919
                    html = "";                                                                                         // 2920
                }                                                                                                      // 2921
            }                                                                                                          // 2922
                                                                                                                       // 2923
            return html;                                                                                               // 2924
        },                                                                                                             // 2925
                                                                                                                       // 2926
                                                                                                                       // 2927
        /////////////////////////////////////////////////////////////////////////////////////////////////////////      // 2928
        //                                                                                                             // 2929
        // END OF STATIC HELPER METHODS                                                                                // 2930
        //                                                                                                             // 2931
        /////////////////////////////////////////////////////////////////////////////////////////////////////////      // 2932
                                                                                                                       // 2933
                                                                                                                       // 2934
                                                                                                                       // 2935
        /**                                                                                                            // 2936
         * Default date format.                                                                                        // 2937
         */                                                                                                            // 2938
        defaultDateFormat: "mm/dd/yy",                                                                                 // 2939
                                                                                                                       // 2940
        /**                                                                                                            // 2941
         * Regular expressions for fields.                                                                             // 2942
         */                                                                                                            // 2943
        regexps:                                                                                                       // 2944
        {                                                                                                              // 2945
            "email": /^[a-z0-9!\#\$%&'\*\-\/=\?\+\-\^_`\{\|\}~]+(?:\.[a-z0-9!\#\$%&'\*\-\/=\?\+\-\^_`\{\|\}~]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z]{2,6}$/i,
            "url": /^(http|https):\/\/[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(\:[0-9]{1,5})?(([0-9]{1,5})?\/.*)?$/i,
            "password": /^[0-9a-zA-Z\x20-\x7E]*$/,                                                                     // 2948
            "date": /^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.]\d\d$/,                                       // 2949
            "integer": /^([\+\-]?([1-9]\d*)|0)$/,                                                                      // 2950
            "number":/^([\+\-]?((([0-9]+(\.)?)|([0-9]*\.[0-9]+))([eE][+-]?[0-9]+)?))$/,                                // 2951
            "phone":/^(\D?(\d{3})\D?\D?(\d{3})\D?(\d{4}))?$/,                                                          // 2952
            "ipv4":/^(?:1\d?\d?|2(?:[0-4]\d?|[6789]|5[0-5]?)?|[3-9]\d?|0)(?:\.(?:1\d?\d?|2(?:[0-4]\d?|[6789]|5[0-5]?)?|[3-9]\d?|0)){3}$/,
            "zipcode-five": /^(\d{5})?$/,                                                                              // 2954
            "zipcode-nine": /^(\d{5}(-\d{4})?)?$/                                                                      // 2955
        },                                                                                                             // 2956
                                                                                                                       // 2957
        /**                                                                                                            // 2958
         * Map of instantiated fields.                                                                                 // 2959
         */                                                                                                            // 2960
        fieldInstances: {},                                                                                            // 2961
                                                                                                                       // 2962
        /**                                                                                                            // 2963
         * Maps of field types to field class implementations.                                                         // 2964
         */                                                                                                            // 2965
        fieldClassRegistry: {},                                                                                        // 2966
                                                                                                                       // 2967
        /**                                                                                                            // 2968
         * Registers an implementation class for a type of field.                                                      // 2969
         *                                                                                                             // 2970
         * @param {String} type Field type.                                                                            // 2971
         * @param {Alpaca.Field} fieldClass Field class.                                                               // 2972
         */                                                                                                            // 2973
        registerFieldClass: function(type, fieldClass) {                                                               // 2974
            this.fieldClassRegistry[type] = fieldClass;                                                                // 2975
        },                                                                                                             // 2976
                                                                                                                       // 2977
        /**                                                                                                            // 2978
         * Returns the implementation class for a type of field.                                                       // 2979
         *                                                                                                             // 2980
         * @param {String} type Field type.                                                                            // 2981
         *                                                                                                             // 2982
         * @returns {Alpaca.Field} Field class mapped to field type.                                                   // 2983
         */                                                                                                            // 2984
        getFieldClass: function(type) {                                                                                // 2985
            return this.fieldClassRegistry[type];                                                                      // 2986
        },                                                                                                             // 2987
                                                                                                                       // 2988
        /**                                                                                                            // 2989
         * Gets the field type id for a given field implementation class.                                              // 2990
         *                                                                                                             // 2991
         * @param {Alpaca.Field} fieldClass Field class.                                                               // 2992
         *                                                                                                             // 2993
         * @returns {String} Field type of the field class.                                                            // 2994
         */                                                                                                            // 2995
        getFieldClassType: function(fieldClass) {                                                                      // 2996
            for (var type in this.fieldClassRegistry) {                                                                // 2997
                if (this.fieldClassRegistry.hasOwnProperty(type)) {                                                    // 2998
                    if (this.fieldClassRegistry[type] == fieldClass) {                                                 // 2999
                        return type;                                                                                   // 3000
                    }                                                                                                  // 3001
                }                                                                                                      // 3002
            }                                                                                                          // 3003
            return null;                                                                                               // 3004
        },                                                                                                             // 3005
                                                                                                                       // 3006
        /**                                                                                                            // 3007
         * Maps of connector types to connector class implementations.                                                 // 3008
         */                                                                                                            // 3009
        connectorClassRegistry: {},                                                                                    // 3010
                                                                                                                       // 3011
        /**                                                                                                            // 3012
         * Registers an implementation class for a connector type.                                                     // 3013
         *                                                                                                             // 3014
         * @param {String} type cConnect type                                                                          // 3015
         * @param {Alpaca.Connector} connectorClass Connector class.                                                   // 3016
         */                                                                                                            // 3017
        registerConnectorClass: function(type, connectorClass) {                                                       // 3018
            this.connectorClassRegistry[type] = connectorClass;                                                        // 3019
        },                                                                                                             // 3020
                                                                                                                       // 3021
        /**                                                                                                            // 3022
         * Returns the implementation class for a connector type.                                                      // 3023
         *                                                                                                             // 3024
         * @param {String} type Connect type.                                                                          // 3025
         * @returns {Alpaca.Connector} Connector class mapped to connect type.                                         // 3026
         */                                                                                                            // 3027
        getConnectorClass: function(type) {                                                                            // 3028
            return this.connectorClassRegistry[type];                                                                  // 3029
        },                                                                                                             // 3030
                                                                                                                       // 3031
        /**                                                                                                            // 3032
         * Replaces each substring of this string that matches the given regular expression with the given replacement.
         *                                                                                                             // 3034
         * @param {String} text Source string being replaced.                                                          // 3035
         * @param {String} replace Regular expression for replacing.                                                   // 3036
         * @param {String} with_this Replacement.                                                                      // 3037
         *                                                                                                             // 3038
         * @returns {String} Replaced string.                                                                          // 3039
         */                                                                                                            // 3040
        replaceAll: function(text, replace, with_this) {                                                               // 3041
            return text.replace(new RegExp(replace, 'g'), with_this);                                                  // 3042
        },                                                                                                             // 3043
                                                                                                                       // 3044
        /**                                                                                                            // 3045
         * Creates an element with a given tag name, dom/style attributes and class names.                             // 3046
         *                                                                                                             // 3047
         * @param {String} tag Tag name.                                                                               // 3048
         * @param {Array} domAttributes DOM attributes.                                                                // 3049
         * @param {Array} styleAttributes Style attributes.                                                            // 3050
         * @param {Array} classNames Class names.                                                                      // 3051
         *                                                                                                             // 3052
         * @returns {Object} New element with the tag name and all other provided attributes.                          // 3053
         */                                                                                                            // 3054
        element: function(tag, domAttributes, styleAttributes, classNames) {                                           // 3055
            var el = $("<" + tag + "/>");                                                                              // 3056
                                                                                                                       // 3057
            if (domAttributes) {                                                                                       // 3058
                el.attr(domAttributes);                                                                                // 3059
            }                                                                                                          // 3060
            if (styleAttributes) {                                                                                     // 3061
                el.css(styleAttributes);                                                                               // 3062
            }                                                                                                          // 3063
            if (classNames) {                                                                                          // 3064
                for (var className in classNames) {                                                                    // 3065
                    el.addClass(className);                                                                            // 3066
                }                                                                                                      // 3067
            }                                                                                                          // 3068
        },                                                                                                             // 3069
                                                                                                                       // 3070
        /**                                                                                                            // 3071
         * Replaces a template with list of replacements.                                                              // 3072
         *                                                                                                             // 3073
         * @param {String} template Template being processed.                                                          // 3074
         * @param {String} substitutions List of substitutions.                                                        // 3075
         *                                                                                                             // 3076
         * @returns {String} Replaced template.                                                                        // 3077
         */                                                                                                            // 3078
        elementFromTemplate: function(template, substitutions) {                                                       // 3079
            var html = template;                                                                                       // 3080
            if (substitutions) {                                                                                       // 3081
                for (var x in substitutions) {                                                                         // 3082
                    html = Alpaca.replaceAll(html, "${" + x + "}", substitutions[x]);                                  // 3083
                }                                                                                                      // 3084
            }                                                                                                          // 3085
            return $(html);                                                                                            // 3086
        },                                                                                                             // 3087
                                                                                                                       // 3088
        /**                                                                                                            // 3089
         * Generates a unique alpaca id.                                                                               // 3090
         *                                                                                                             // 3091
         * @returns {String} The unique alpaca id.                                                                     // 3092
         */                                                                                                            // 3093
        generateId: function() {                                                                                       // 3094
            Alpaca.uniqueIdCounter++;                                                                                  // 3095
            return "alpaca" + Alpaca.uniqueIdCounter;                                                                  // 3096
        },                                                                                                             // 3097
                                                                                                                       // 3098
        /**                                                                                                            // 3099
         * @private                                                                                                    // 3100
         * Helper function to provide YAHOO later like capabilities.                                                   // 3101
         */                                                                                                            // 3102
        later: function(when, o, fn, data, periodic) {                                                                 // 3103
            when = when || 0;                                                                                          // 3104
            o = o || {};                                                                                               // 3105
            var m = fn, d = $.makeArray(data), f, r;                                                                   // 3106
                                                                                                                       // 3107
            if (typeof fn === "string") {                                                                              // 3108
                m = o[fn];                                                                                             // 3109
            }                                                                                                          // 3110
                                                                                                                       // 3111
            if (!m) {                                                                                                  // 3112
                // Throw an error about the method                                                                     // 3113
                throw {                                                                                                // 3114
                    name: 'TypeError',                                                                                 // 3115
                    message: "The function is undefined."                                                              // 3116
                };                                                                                                     // 3117
            }                                                                                                          // 3118
                                                                                                                       // 3119
            /**                                                                                                        // 3120
             * @ignore                                                                                                 // 3121
             */                                                                                                        // 3122
            f = function() {                                                                                           // 3123
                m.apply(o, d);                                                                                         // 3124
            };                                                                                                         // 3125
                                                                                                                       // 3126
            r = (periodic) ? setInterval(f, when) : setTimeout(f, when);                                               // 3127
                                                                                                                       // 3128
            return {                                                                                                   // 3129
                id: r,                                                                                                 // 3130
                interval: periodic,                                                                                    // 3131
                cancel: function() {                                                                                   // 3132
                    if (this.interval) {                                                                               // 3133
                        clearInterval(r);                                                                              // 3134
                    } else {                                                                                           // 3135
                        clearTimeout(r);                                                                               // 3136
                    }                                                                                                  // 3137
                }                                                                                                      // 3138
            };                                                                                                         // 3139
        },                                                                                                             // 3140
                                                                                                                       // 3141
        /**                                                                                                            // 3142
         * Finds if an string ends with a given suffix.                                                                // 3143
         *                                                                                                             // 3144
         * @param {String} text The string being evaluated.                                                            // 3145
         * @param {String} suffix Suffix.                                                                              // 3146
         * @returns {Boolean} True if the string ends with the given suffix, false otherwise.                          // 3147
         */                                                                                                            // 3148
        endsWith : function(text, suffix) {                                                                            // 3149
            return text.indexOf(suffix, text.length - suffix.length) !== -1;                                           // 3150
        },                                                                                                             // 3151
                                                                                                                       // 3152
        /**                                                                                                            // 3153
         * Finds if an string starts with a given prefix.                                                              // 3154
         *                                                                                                             // 3155
         * @param {String} text The string being evaluated.                                                            // 3156
         * @param {String} prefix Prefix                                                                               // 3157
         * @returns {Boolean} True if the string starts with the given prefix, false otherwise.                        // 3158
         */                                                                                                            // 3159
        startsWith : function(text, prefix) {                                                                          // 3160
            //return (text.match("^" + prefix) == prefix);                                                             // 3161
            return text.substr(0, prefix.length) === prefix;                                                           // 3162
        },                                                                                                             // 3163
                                                                                                                       // 3164
        /**                                                                                                            // 3165
         * Finds if a variable is a URI.                                                                               // 3166
         *                                                                                                             // 3167
         * @param {Object} obj The variable being evaluated.                                                           // 3168
         * @returns {Boolean} True if the variable is a URI, false otherwise.                                          // 3169
         */                                                                                                            // 3170
        isUri : function(obj) {                                                                                        // 3171
            return Alpaca.isString(obj) && (Alpaca.startsWith(obj, "http://") ||                                       // 3172
                    Alpaca.startsWith(obj, "https://") ||                                                              // 3173
                    Alpaca.startsWith(obj, "/") ||                                                                     // 3174
                    Alpaca.startsWith(obj, "./") ||                                                                    // 3175
                    Alpaca.startsWith(obj, "../"));                                                                    // 3176
        },                                                                                                             // 3177
                                                                                                                       // 3178
        /**                                                                                                            // 3179
         * Picks a sub-element from an object using a keys array.                                                      // 3180
         *                                                                                                             // 3181
         * @param {Object} object Object to be traversed                                                               // 3182
         * @param {String|Array} keys Either an array of tokens or a dot-delimited string (i.e. "data.user.firstname") // 3183
         * @param {String} subprop Optional subproperty to traverse (i.e.. "data.properties.user.properties.firstname")
         *                                                                                                             // 3185
         * @returns {Object} Sub element mapped to the given key path                                                  // 3186
         */                                                                                                            // 3187
        traverseObject : function(object, keys, subprop) {                                                             // 3188
            if (Alpaca.isString(keys)) {                                                                               // 3189
                keys = keys.split(".");                                                                                // 3190
            }                                                                                                          // 3191
                                                                                                                       // 3192
            var element = null;                                                                                        // 3193
            var current = object;                                                                                      // 3194
                                                                                                                       // 3195
            var key = null;                                                                                            // 3196
            do {                                                                                                       // 3197
                key = keys.shift();                                                                                    // 3198
                if (subprop && key == subprop) {                                                                       // 3199
                    key = keys.shift();                                                                                // 3200
                }                                                                                                      // 3201
                if (!Alpaca.isEmpty(current[key])) {                                                                   // 3202
                    current = current[key];                                                                            // 3203
                    if (keys.length === 0) {                                                                           // 3204
                        element = current;                                                                             // 3205
                    }                                                                                                  // 3206
                } else {                                                                                               // 3207
                    keys = [];                                                                                         // 3208
                }                                                                                                      // 3209
            } while (keys.length > 0);                                                                                 // 3210
                                                                                                                       // 3211
            return element;                                                                                            // 3212
        },                                                                                                             // 3213
                                                                                                                       // 3214
        /**                                                                                                            // 3215
         * Helper function that executes the given function upon each element in the array                             // 3216
         * The element of the array becomes the "this" variable in the function                                        // 3217
         *                                                                                                             // 3218
         * @param {Array|Object} data Either an array or an object                                                     // 3219
         * @param {Function} func Function to be executed.                                                             // 3220
         */                                                                                                            // 3221
        each : function(data, func) {                                                                                  // 3222
            if (Alpaca.isArray(data)) {                                                                                // 3223
                for (var i = 0; i < data.length; i++) {                                                                // 3224
                    func.apply(data[i]);                                                                               // 3225
                }                                                                                                      // 3226
            } else if (Alpaca.isObject(data)) {                                                                        // 3227
                for (var key in data) {                                                                                // 3228
                    func.apply(data[key]);                                                                             // 3229
                }                                                                                                      // 3230
            }                                                                                                          // 3231
        },                                                                                                             // 3232
                                                                                                                       // 3233
        /**                                                                                                            // 3234
         * Merges json obj2 into obj1 using a recursive approach.                                                      // 3235
         *                                                                                                             // 3236
         * @param {Object} obj1 Destination object.                                                                    // 3237
         * @param {Object} obj2 Source object.                                                                         // 3238
         * @param {Function} validKeyFunction Function used to determine whether to include a given key or not.        // 3239
         *                                                                                                             // 3240
         * @returns {Object} Merged object.                                                                            // 3241
         */                                                                                                            // 3242
        merge : function(obj1, obj2, validKeyFunction) {                                                               // 3243
            if (!obj1) {                                                                                               // 3244
                obj1 = {};                                                                                             // 3245
            }                                                                                                          // 3246
            for (var key in obj2) {                                                                                    // 3247
                var valid = true;                                                                                      // 3248
                                                                                                                       // 3249
                if (validKeyFunction) {                                                                                // 3250
                    valid = validKeyFunction(key);                                                                     // 3251
                }                                                                                                      // 3252
                                                                                                                       // 3253
                if (valid) {                                                                                           // 3254
                    if (Alpaca.isEmpty(obj2[key])) {                                                                   // 3255
                        obj1[key] = obj2[key];                                                                         // 3256
                    } else {                                                                                           // 3257
                        if (Alpaca.isObject(obj2[key])) {                                                              // 3258
                            if (!obj1[key]) {                                                                          // 3259
                                obj1[key] = {};                                                                        // 3260
                            }                                                                                          // 3261
                            obj1[key] = Alpaca.merge(obj1[key], obj2[key]);                                            // 3262
                        } else {                                                                                       // 3263
                            obj1[key] = obj2[key];                                                                     // 3264
                        }                                                                                              // 3265
                    }                                                                                                  // 3266
                }                                                                                                      // 3267
            }                                                                                                          // 3268
                                                                                                                       // 3269
            return obj1;                                                                                               // 3270
        },                                                                                                             // 3271
                                                                                                                       // 3272
        /**                                                                                                            // 3273
         * Merges json "source" into "target" using a recursive approach. The merge will include empty values          // 3274
         * of obj2 properties.                                                                                         // 3275
         *                                                                                                             // 3276
         * @param {Object} target Target object.                                                                       // 3277
         * @param {Object} source Source object.                                                                       // 3278
         *                                                                                                             // 3279
         * @returns {Object} Merged object                                                                             // 3280
         */                                                                                                            // 3281
        mergeObject : function(target, source) {                                                                       // 3282
                                                                                                                       // 3283
            if (!target) {                                                                                             // 3284
                target = {};                                                                                           // 3285
            }                                                                                                          // 3286
                                                                                                                       // 3287
            if (!source) {                                                                                             // 3288
                source = {};                                                                                           // 3289
            }                                                                                                          // 3290
                                                                                                                       // 3291
            this.mergeObject2(source, target);                                                                         // 3292
                                                                                                                       // 3293
            return target;                                                                                             // 3294
        },                                                                                                             // 3295
                                                                                                                       // 3296
        mergeObject2: function(source, target)                                                                         // 3297
        {                                                                                                              // 3298
            var isArray = Alpaca.isArray;                                                                              // 3299
            var isObject = Alpaca.isObject;                                                                            // 3300
            var isUndefined = Alpaca.isUndefined;                                                                      // 3301
            var copyOf = Alpaca.copyOf;                                                                                // 3302
                                                                                                                       // 3303
            var _merge = function(source, target)                                                                      // 3304
            {                                                                                                          // 3305
                if (isArray(source))                                                                                   // 3306
                {                                                                                                      // 3307
                    if (isArray(target))                                                                               // 3308
                    {                                                                                                  // 3309
                        // merge array elements                                                                        // 3310
                        $.each(source, function(index) {                                                               // 3311
                            target.push(copyOf(source[index]));                                                        // 3312
                        });                                                                                            // 3313
                    }                                                                                                  // 3314
                    else                                                                                               // 3315
                    {                                                                                                  // 3316
                        // something is already in the target that isn't an ARRAY                                      // 3317
                        // skip                                                                                        // 3318
                    }                                                                                                  // 3319
                }                                                                                                      // 3320
                else if (isObject(source))                                                                             // 3321
                {                                                                                                      // 3322
                    if (isObject(target))                                                                              // 3323
                    {                                                                                                  // 3324
                        // merge object properties                                                                     // 3325
                        $.each(source, function(key) {                                                                 // 3326
                                                                                                                       // 3327
                            if (isUndefined(target[key])) {                                                            // 3328
                                target[key] = copyOf(source[key]);                                                     // 3329
                            } else {                                                                                   // 3330
                                target[key] = _merge(source[key], target[key]);                                        // 3331
                            }                                                                                          // 3332
                                                                                                                       // 3333
                        });                                                                                            // 3334
                    }                                                                                                  // 3335
                    else                                                                                               // 3336
                    {                                                                                                  // 3337
                        // something is already in the target that isn't an OBJECT                                     // 3338
                        // skip                                                                                        // 3339
                    }                                                                                                  // 3340
                                                                                                                       // 3341
                }                                                                                                      // 3342
                else                                                                                                   // 3343
                {                                                                                                      // 3344
                    // otherwise, it's a scalar, always overwrite                                                      // 3345
                    target = copyOf(source);                                                                           // 3346
                }                                                                                                      // 3347
                                                                                                                       // 3348
                return target;                                                                                         // 3349
            };                                                                                                         // 3350
                                                                                                                       // 3351
            _merge(source, target);                                                                                    // 3352
                                                                                                                       // 3353
            return target;                                                                                             // 3354
        },                                                                                                             // 3355
                                                                                                                       // 3356
        /**                                                                                                            // 3357
         * Substitutes a string with a list of tokens.                                                                 // 3358
         *                                                                                                             // 3359
         * @param text Source string.                                                                                  // 3360
         * @param args List of tokens.                                                                                 // 3361
         *                                                                                                             // 3362
         * @returns Substituted string.                                                                                // 3363
         */                                                                                                            // 3364
        substituteTokens : function(text, args) {                                                                      // 3365
                                                                                                                       // 3366
            if (!Alpaca.isEmpty(text)) {                                                                               // 3367
                for (var i = 0; i < args.length; i++) {                                                                // 3368
                    var token = "{" + i + "}";                                                                         // 3369
                                                                                                                       // 3370
                    var x = text.indexOf(token);                                                                       // 3371
                    if (x > -1) {                                                                                      // 3372
                        var nt = text.substring(0, x) + args[i] + text.substring(x + 3);                               // 3373
                        text = nt;                                                                                     // 3374
                        //text = Alpaca.replaceAll(text, token, args[i]);                                              // 3375
                    }                                                                                                  // 3376
                }                                                                                                      // 3377
            }                                                                                                          // 3378
            return text;                                                                                               // 3379
        },                                                                                                             // 3380
                                                                                                                       // 3381
        /**                                                                                                            // 3382
         * Compares two objects.                                                                                       // 3383
         *                                                                                                             // 3384
         * @param {Object} obj1 First object.                                                                          // 3385
         * @param {Object} obj2 Second object.                                                                         // 3386
         *                                                                                                             // 3387
         * @returns {Boolean} True if two objects are same, false otherwise.                                           // 3388
         */                                                                                                            // 3389
        compareObject : function(obj1, obj2) {                                                                         // 3390
            return equiv(obj1, obj2);                                                                                  // 3391
        },                                                                                                             // 3392
                                                                                                                       // 3393
        /**                                                                                                            // 3394
         * Compares content of two arrays.                                                                             // 3395
         *                                                                                                             // 3396
         * @param {Array} arr_1 First array.                                                                           // 3397
         * @param {Array} arr_2 Second array.                                                                          // 3398
         * @returns {Boolean} True if two arrays have same content, false otherwise.                                   // 3399
         */                                                                                                            // 3400
        compareArrayContent : function(arr_1, arr_2) {                                                                 // 3401
            var equal = arr_1 && arr_2 && (arr_1.length == arr_2.length);                                              // 3402
            if (equal) {                                                                                               // 3403
                $.each(arr_1, function(foo, val) {                                                                     // 3404
                    if (!equal)                                                                                        // 3405
                        return false;                                                                                  // 3406
                    if ($.inArray(val, arr_2) == -1) {                                                                 // 3407
                        equal = false;                                                                                 // 3408
                    } else {                                                                                           // 3409
                        equal = true;                                                                                  // 3410
                    }                                                                                                  // 3411
                });                                                                                                    // 3412
            }                                                                                                          // 3413
            return equal;                                                                                              // 3414
        },                                                                                                             // 3415
                                                                                                                       // 3416
        /**                                                                                                            // 3417
         * Finds whether a variable has empty value or not.                                                            // 3418
         *                                                                                                             // 3419
         * @param {Any} val Variable to be evaluated.                                                                  // 3420
         * @returns {Boolean} True if the variable has empty value, false otherwise.                                   // 3421
         */                                                                                                            // 3422
        isValEmpty : function(val) {                                                                                   // 3423
            var empty = false;                                                                                         // 3424
            if (Alpaca.isEmpty(val)) {                                                                                 // 3425
                empty = true;                                                                                          // 3426
            } else {                                                                                                   // 3427
                if (Alpaca.isString(val) && val === "") {                                                              // 3428
                    empty = true;                                                                                      // 3429
                }                                                                                                      // 3430
                if (Alpaca.isObject(val) && $.isEmptyObject(val)) {                                                    // 3431
                    empty = true;                                                                                      // 3432
                }                                                                                                      // 3433
                if (Alpaca.isArray(val) && val.length === 0) {                                                         // 3434
                    empty = true;                                                                                      // 3435
                }                                                                                                      // 3436
                if (Alpaca.isNumber(val) && isNaN(val)) {                                                              // 3437
                    empty = true;                                                                                      // 3438
                }                                                                                                      // 3439
            }                                                                                                          // 3440
            return empty;                                                                                              // 3441
        },                                                                                                             // 3442
                                                                                                                       // 3443
        /**                                                                                                            // 3444
         * @private                                                                                                    // 3445
         *                                                                                                             // 3446
         * Initial function for setting up field instance and executing callbacks if needed.                           // 3447
         *                                                                                                             // 3448
         * @param {Object} el Container element.                                                                       // 3449
         * @param {Object} data Field data.                                                                            // 3450
         * @param {Object} options Field options.                                                                      // 3451
         * @param {Object} schema Field schema.                                                                        // 3452
         * @param {Object|String} view Field view.                                                                     // 3453
         * @param {Object} initialSettings any additional settings provided to the top-level Alpaca object             // 3454
         * @param {Function} callback Render callback.                                                                 // 3455
         * @param {Function} renderedCallback Post-render callback.                                                    // 3456
         * @param {Alpaca.connector} connector Field connector.                                                        // 3457
         * @param {Function} errorCallback Error callback.                                                             // 3458
         * @param {Boolean} isDynamicCreation whether this alpaca field is being dynamically created (after first render)
         *                                                                                                             // 3460
         * @returns {Alpaca.Field} New field instance.                                                                 // 3461
         */                                                                                                            // 3462
        init: function(el, data, options, schema, view, initialSettings, callback, renderedCallback, connector, errorCallback, isDynamicCreation) {
                                                                                                                       // 3464
            var self = this;                                                                                           // 3465
                                                                                                                       // 3466
            ///////////////////////////////////////////////////////////////////////////////////////////////////        // 3467
            //                                                                                                         // 3468
            // COMPILATION                                                                                             // 3469
            //                                                                                                         // 3470
            ///////////////////////////////////////////////////////////////////////////////////////////////////        // 3471
                                                                                                                       // 3472
            // if they provided an inline view object, we assign an id and store onto views map                        // 3473
            // so that it gets compiled along with the rest                                                            // 3474
            if (Alpaca.isObject(view)) {                                                                               // 3475
                var viewId = view.id;                                                                                  // 3476
                if (!viewId) {                                                                                         // 3477
                    view.id = this.generateViewId();                                                                   // 3478
                }                                                                                                      // 3479
                var parentId = view.parent;                                                                            // 3480
                if (!parentId) {                                                                                       // 3481
                    view.parent = "VIEW_WEB_EDIT"; // assume                                                           // 3482
                }                                                                                                      // 3483
                this.registerView(view);                                                                               // 3484
                view = view.id;                                                                                        // 3485
            }                                                                                                          // 3486
                                                                                                                       // 3487
            // compile all of the views and templates                                                                  // 3488
            this.compile(function(report) {                                                                            // 3489
                                                                                                                       // 3490
                if (report.errors && report.errors.length > 0)                                                         // 3491
                {                                                                                                      // 3492
                    for (var i = 0; i < report.errors.length; i++)                                                     // 3493
                    {                                                                                                  // 3494
                        var viewId = report.errors[i].viewId;                                                          // 3495
                        var templateId = report.errors[i].templateId;                                                  // 3496
                        var err = report.errors[i].err;                                                                // 3497
                                                                                                                       // 3498
                        Alpaca.logError("The template: " + templateId + " for view: " + viewId + " failed to compile");
                        Alpaca.logError(JSON.stringify(err));                                                          // 3500
                    }                                                                                                  // 3501
                                                                                                                       // 3502
                    return Alpaca.throwErrorWithCallback("View compilation failed, cannot initialize Alpaca.  Please check the error logs.", errorCallback);
                }                                                                                                      // 3504
                                                                                                                       // 3505
                self._init(el, data, options, schema, view, initialSettings, callback, renderedCallback, connector, errorCallback, isDynamicCreation);
            }, errorCallback);                                                                                         // 3507
        },                                                                                                             // 3508
                                                                                                                       // 3509
        _init: function(el, data, options, schema, view, initialSettings, callback, renderedCallback, connector, errorCallback, isDynamicCreation)
        {                                                                                                              // 3511
            ///////////////////////////////////////////////////////////////////////////////////////////////////        // 3512
            //                                                                                                         // 3513
            // VIEW RESOLUTION                                                                                         // 3514
            //                                                                                                         // 3515
            ///////////////////////////////////////////////////////////////////////////////////////////////////        // 3516
                                                                                                                       // 3517
                                                                                                                       // 3518
            // make some intelligent guesses about what view id we might default to in case they want to use           // 3519
            // auto-view selection.  We detect jquery-ui, bootstrap and jquerymobile.                                  // 3520
            var fallbackUI = null;                                                                                     // 3521
            var fallbackType = null;                                                                                   // 3522
            var fallbackViewId = null;                                                                                 // 3523
                                                                                                                       // 3524
            // if jQuery Mobile is present, fall back to VIEW_MOBILE_EDIT or VIEW_MOBILE_CREATE                        // 3525
            if ($.mobile) {                                                                                            // 3526
                fallbackUI = "mobile";                                                                                 // 3527
                if (data) {                                                                                            // 3528
                    fallbackType = "edit";                                                                             // 3529
                    fallbackViewId = "VIEW_MOBILE_EDIT";                                                               // 3530
                }                                                                                                      // 3531
                else {                                                                                                 // 3532
                    fallbackType = "create";                                                                           // 3533
                    fallbackViewId = "VIEW_MOBILE_CREATE";                                                             // 3534
                }                                                                                                      // 3535
            }                                                                                                          // 3536
                                                                                                                       // 3537
            // if Twitter Bootstrap is present, fall back to VIEW_BOOTSTRAP_EDIT or VIEW_BOOTSTRAP_CREATE              // 3538
            var bootstrapDetected = (typeof $().modal == 'function');                                                  // 3539
            if (bootstrapDetected) {                                                                                   // 3540
                fallbackUI = "bootstrap";                                                                              // 3541
                if (data) {                                                                                            // 3542
                    fallbackType = "edit";                                                                             // 3543
                    fallbackViewId = "VIEW_BOOTSTRAP_EDIT";                                                            // 3544
                } else {                                                                                               // 3545
                    fallbackType = "create";                                                                           // 3546
                    fallbackViewId = "VIEW_BOOTSTRAP_CREATE";                                                          // 3547
                }                                                                                                      // 3548
            }                                                                                                          // 3549
                                                                                                                       // 3550
            // if no view provided, but they provided "ui" and optionally "type", then we try to auto-select the view  // 3551
            if (!view)                                                                                                 // 3552
            {                                                                                                          // 3553
                var ui = initialSettings.ui;                                                                           // 3554
                var type = initialSettings.type;                                                                       // 3555
                                                                                                                       // 3556
                if (!ui)                                                                                               // 3557
                {                                                                                                      // 3558
                    if (!fallbackUI) {                                                                                 // 3559
                        fallbackUI = Alpaca.defaultUI;                                                                 // 3560
                    }                                                                                                  // 3561
                    if (fallbackUI) {                                                                                  // 3562
                        ui = fallbackUI;                                                                               // 3563
                    }                                                                                                  // 3564
                }                                                                                                      // 3565
                                                                                                                       // 3566
                if (ui) {                                                                                              // 3567
                    if (!type) {                                                                                       // 3568
                        type = fallbackType ? fallbackType : "edit";                                                   // 3569
                    }                                                                                                  // 3570
                                                                                                                       // 3571
                    Alpaca.logDebug("No view provided but found request for UI: " + ui + " and type: " + type);        // 3572
                                                                                                                       // 3573
                    // see if we can auto-select a view                                                                // 3574
                    view = this.lookupNormalizedView(ui, type);                                                        // 3575
                    if (view) {                                                                                        // 3576
                        Alpaca.logDebug("Found view: " + view);                                                        // 3577
                    } else {                                                                                           // 3578
                        Alpaca.logDebug("No view found for UI: " + ui + " and type: " + type);                         // 3579
                    }                                                                                                  // 3580
                }                                                                                                      // 3581
            }                                                                                                          // 3582
                                                                                                                       // 3583
            // if still no view, then default fallback to our detected view or the default                             // 3584
            if (!view)                                                                                                 // 3585
            {                                                                                                          // 3586
                Alpaca.logDebug("A view was not specified.");                                                          // 3587
                if (fallbackViewId)                                                                                    // 3588
                {                                                                                                      // 3589
                    Alpaca.logDebug("Falling back to detected view: " + fallbackViewId);                               // 3590
                    view = fallbackViewId;                                                                             // 3591
                }                                                                                                      // 3592
                else                                                                                                   // 3593
                {                                                                                                      // 3594
                    Alpaca.logDebug("Falling back to default view: " + this.defaultView);                              // 3595
                    view = this.defaultView;                                                                           // 3596
                }                                                                                                      // 3597
            }                                                                                                          // 3598
                                                                                                                       // 3599
            // debugging: if the view isn't available, we want to report it right away                                 // 3600
            if (Alpaca.isString(view))                                                                                 // 3601
            {                                                                                                          // 3602
                if (!this.normalizedViews[view])                                                                       // 3603
                {                                                                                                      // 3604
                    return Alpaca.throwErrorWithCallback("The desired view: " + view + " could not be loaded.  Please make sure it is loaded and not misspelled.", errorCallback);
                }                                                                                                      // 3606
            }                                                                                                          // 3607
                                                                                                                       // 3608
                                                                                                                       // 3609
            ///////////////////////////////////////////////////////////////////////////////////////////////////        // 3610
            //                                                                                                         // 3611
            // FIELD INSTANTIATION                                                                                     // 3612
            //                                                                                                         // 3613
            ///////////////////////////////////////////////////////////////////////////////////////////////////        // 3614
                                                                                                                       // 3615
                                                                                                                       // 3616
            var field = Alpaca.createFieldInstance(el, data, options, schema, view, connector, errorCallback);         // 3617
            if (field)                                                                                                 // 3618
            {                                                                                                          // 3619
                field.isDynamicCreation = isDynamicCreation;                                                           // 3620
                Alpaca.fieldInstances[field.getId()] = field;                                                          // 3621
                                                                                                                       // 3622
                // mechanism for looking up field instances by id                                                      // 3623
                field.allFieldInstances = function()                                                                   // 3624
                {                                                                                                      // 3625
                    return Alpaca.fieldInstances;                                                                      // 3626
                };                                                                                                     // 3627
                                                                                                                       // 3628
                // allow callbacks defined through view                                                                // 3629
                if (Alpaca.isEmpty(callback)) {                                                                        // 3630
                    callback = field.view.render;                                                                      // 3631
                }                                                                                                      // 3632
                if (Alpaca.isEmpty(renderedCallback)) {                                                                // 3633
                    renderedCallback = field.view.postRender;                                                          // 3634
                }                                                                                                      // 3635
                                                                                                                       // 3636
                if (Alpaca.collectTiming)                                                                              // 3637
                {                                                                                                      // 3638
                    var counters = Alpaca.Counters("render");                                                          // 3639
                    var t1 = new Date().getTime();                                                                     // 3640
                }                                                                                                      // 3641
                                                                                                                       // 3642
                var fin = function()                                                                                   // 3643
                {                                                                                                      // 3644
                    if (Alpaca.collectTiming)                                                                          // 3645
                    {                                                                                                  // 3646
                        var t2 = new Date().getTime();                                                                 // 3647
                        counters.increment(field.getFieldType(), (t2-t1));                                             // 3648
                    }                                                                                                  // 3649
                                                                                                                       // 3650
                    renderedCallback(field);                                                                           // 3651
                };                                                                                                     // 3652
                                                                                                                       // 3653
                if (!Alpaca.isEmpty(callback)) {                                                                       // 3654
                    callback(field, function() {                                                                       // 3655
                        fin();                                                                                         // 3656
                    });                                                                                                // 3657
                } else {                                                                                               // 3658
                    field.render(function() {                                                                          // 3659
                        fin();                                                                                         // 3660
                    });                                                                                                // 3661
                }                                                                                                      // 3662
                                                                                                                       // 3663
                field.callback = callback;                                                                             // 3664
                field.renderedCallback = renderedCallback;                                                             // 3665
            }                                                                                                          // 3666
                                                                                                                       // 3667
            // NOTE: this can be null if an error was thrown                                                           // 3668
            return field;                                                                                              // 3669
        },                                                                                                             // 3670
                                                                                                                       // 3671
        /**                                                                                                            // 3672
         * @private                                                                                                    // 3673
         *                                                                                                             // 3674
         * Internal method for constructing a field instance.                                                          // 3675
         *                                                                                                             // 3676
         * @param {Object} el The dom element to act as the container of the constructed field.                        // 3677
         * @param {Object} data The data to be bound into the field.                                                   // 3678
         * @param {Object} options The configuration for the field.                                                    // 3679
         * @param {Object} schema The schema for the field.                                                            // 3680
         * @param {Object|String} view The view for the field.                                                         // 3681
         * @param {Alpaca.connector} connector The field connector to be bound into the field.                         // 3682
         * @param {Function} errorCallback Error callback.                                                             // 3683
         *                                                                                                             // 3684
         * @returns {Alpaca.Field} New field instance.                                                                 // 3685
         */                                                                                                            // 3686
        createFieldInstance : function(el, data, options, schema, view, connector, errorCallback) {                    // 3687
            // make sure options and schema are not empty                                                              // 3688
            if (Alpaca.isValEmpty(options)) options = {};                                                              // 3689
            if (Alpaca.isValEmpty(schema)) schema = {};                                                                // 3690
            // options can be a string that identifies the kind of field to construct (i.e. "text")                    // 3691
            if (options && Alpaca.isString(options)) {                                                                 // 3692
                var fieldType = options;                                                                               // 3693
                options = {};                                                                                          // 3694
                options.type = fieldType;                                                                              // 3695
            }                                                                                                          // 3696
            if (!options.type) {                                                                                       // 3697
                // if nothing passed in, we can try to make a guess based on the type of data                          // 3698
                if (!schema.type) {                                                                                    // 3699
                    schema.type = Alpaca.getSchemaType(data);                                                          // 3700
                }                                                                                                      // 3701
                if (schema && schema["enum"]) {                                                                        // 3702
                    if (schema["enum"].length > 3) {                                                                   // 3703
                        options.type = "select";                                                                       // 3704
                    } else {                                                                                           // 3705
                        options.type = "radio";                                                                        // 3706
                    }                                                                                                  // 3707
                } else {                                                                                               // 3708
                    options.type = Alpaca.defaultSchemaFieldMapping[schema.type];                                      // 3709
                }                                                                                                      // 3710
                // check if it has format defined                                                                      // 3711
                if (schema.format && Alpaca.defaultFormatFieldMapping[schema.format]) {                                // 3712
                    options.type = Alpaca.defaultFormatFieldMapping[schema.format];                                    // 3713
                }                                                                                                      // 3714
            }                                                                                                          // 3715
            // find the field class registered for this field type                                                     // 3716
            var fieldClass = Alpaca.getFieldClass(options.type);                                                       // 3717
            if (!fieldClass) {                                                                                         // 3718
                errorCallback({                                                                                        // 3719
                    "message":"Unable to find field class for type: " + options.type,                                  // 3720
                    "reason": "FIELD_INSTANTIATION_ERROR"                                                              // 3721
                });                                                                                                    // 3722
                return null;                                                                                           // 3723
            }                                                                                                          // 3724
            // if we have data, bind it in                                                                             // 3725
            return new fieldClass(el, data, options, schema, view, connector, errorCallback);                          // 3726
        },                                                                                                             // 3727
                                                                                                                       // 3728
        /**                                                                                                            // 3729
         * Provides a backwards-compatible version of the former jQuery 1.8.3 parseJSON function (this was changed     // 3730
         * for jQuery 1.9.0 and introduces all kinds of issues).                                                       // 3731
         *                                                                                                             // 3732
         * @param text                                                                                                 // 3733
         */                                                                                                            // 3734
        parseJSON: function(text)                                                                                      // 3735
        {                                                                                                              // 3736
            if (!text) {                                                                                               // 3737
                return null;                                                                                           // 3738
            }                                                                                                          // 3739
                                                                                                                       // 3740
            return $.parseJSON(text);                                                                                  // 3741
        },                                                                                                             // 3742
                                                                                                                       // 3743
        /**                                                                                                            // 3744
         * Compiles all of the views, normalizing them for use by Alpaca.                                              // 3745
         * Also compiles any templates that the views may reference.                                                   // 3746
         *                                                                                                             // 3747
         * @param cb the callback that gets fired once compilation has ended                                           // 3748
         */                                                                                                            // 3749
        compile: function(cb, errorCallback)                                                                           // 3750
        {                                                                                                              // 3751
            var self = this;                                                                                           // 3752
                                                                                                                       // 3753
            // var t1 = new Date().getTime();                                                                          // 3754
                                                                                                                       // 3755
            var report = {                                                                                             // 3756
                "errors": [],                                                                                          // 3757
                "count": 0,                                                                                            // 3758
                "successCount": 0                                                                                      // 3759
            };                                                                                                         // 3760
                                                                                                                       // 3761
            var finalCallback = function(normalizedViews)                                                              // 3762
            {                                                                                                          // 3763
                // var t2 = new Date().getTime();                                                                      // 3764
                // console.log("Compilation Exited with " + report.errors.length + " errors in: " + (t2-t1)+ " ms");   // 3765
                                                                                                                       // 3766
                if (report.errors.length === 0)                                                                        // 3767
                {                                                                                                      // 3768
                    // success!                                                                                        // 3769
                                                                                                                       // 3770
                    // copy our views into the normalized set                                                          // 3771
                    for (var k in normalizedViews)                                                                     // 3772
                    {                                                                                                  // 3773
                        self.normalizedViews[k] = normalizedViews[k];                                                  // 3774
                    }                                                                                                  // 3775
                }                                                                                                      // 3776
                                                                                                                       // 3777
                cb(report);                                                                                            // 3778
            };                                                                                                         // 3779
                                                                                                                       // 3780
                                                                                                                       // 3781
                                                                                                                       // 3782
            ////////////////////////////////////////////////////////////////////////////////////////////////           // 3783
            //                                                                                                         // 3784
            // VIEW TEMPLATE COMPILATION                                                                               // 3785
            //                                                                                                         // 3786
            ////////////////////////////////////////////////////////////////////////////////////////////////           // 3787
                                                                                                                       // 3788
            // for all of the views (the original ones, not the compiled ones), walk through them and find any         // 3789
            // and all templates that need to be compiled                                                              // 3790
            // compile each and store in a "compiledTemplates" object                                                  // 3791
                                                                                                                       // 3792
            var viewCompileCallback = function(normalizedViews, err, view, compiledTemplateId, cacheKey, totalCalls)   // 3793
            {                                                                                                          // 3794
                var viewId = view.id;                                                                                  // 3795
                                                                                                                       // 3796
                report.count++;                                                                                        // 3797
                if (err)                                                                                               // 3798
                {                                                                                                      // 3799
                    report.errors.push({                                                                               // 3800
                        "view": viewId,                                                                                // 3801
                        "template": compiledTemplateId,                                                                // 3802
                        "err": err                                                                                     // 3803
                    });                                                                                                // 3804
                }                                                                                                      // 3805
                else                                                                                                   // 3806
                {                                                                                                      // 3807
                    report.successCount++;                                                                             // 3808
                                                                                                                       // 3809
                    // mark onto the view that the template was compiled for this view                                 // 3810
                    // this maps [compiledTemplateId] -> [cacheKey]                                                    // 3811
                    view.compiledTemplates[compiledTemplateId] = cacheKey;                                             // 3812
                }                                                                                                      // 3813
                                                                                                                       // 3814
                if (report.count == totalCalls)                                                                        // 3815
                {                                                                                                      // 3816
                    //var t2 = new Date().getTime();                                                                   // 3817
                    //console.log("Compilation took: " + (t2-t1) + " ms");                                             // 3818
                    finalCallback(normalizedViews);                                                                    // 3819
                }                                                                                                      // 3820
            };                                                                                                         // 3821
                                                                                                                       // 3822
            var compileViewTemplate = function(normalizedViews, view, compiledTemplateId, template, totalCalls)        // 3823
            {                                                                                                          // 3824
                var viewId = view.id;                                                                                  // 3825
                                                                                                                       // 3826
                var mightBeUrl = (template && template.indexOf("/") > -1);                                             // 3827
                if (mightBeUrl)                                                                                        // 3828
                {                                                                                                      // 3829
                                                                                                                       // 3830
                }                                                                                                      // 3831
                else                                                                                                   // 3832
                {                                                                                                      // 3833
                    // support for jQuery selectors                                                                    // 3834
                    if (template && ((template.indexOf("#") === 0) || (template.indexOf(".") === 0)))                  // 3835
                    {                                                                                                  // 3836
                        var x = $(template);                                                                           // 3837
                                                                                                                       // 3838
                        type = $(x).attr("type");                                                                      // 3839
                        template = $(x).html();                                                                        // 3840
                    }                                                                                                  // 3841
                }                                                                                                      // 3842
                                                                                                                       // 3843
                var type = null;                                                                                       // 3844
                if (Alpaca.isObject(template)) {                                                                       // 3845
                    type = template.type;                                                                              // 3846
                    template = template.template;                                                                      // 3847
                }                                                                                                      // 3848
                                                                                                                       // 3849
                // if type isn't resolved, assume jquery tmpl()                                                        // 3850
                if (!type)                                                                                             // 3851
                {                                                                                                      // 3852
                    type = "text/x-jquery-tmpl";                                                                       // 3853
                }                                                                                                      // 3854
                                                                                                                       // 3855
                // look up the template processor                                                                      // 3856
                var engine = Alpaca.TemplateEngineRegistry.find(type);                                                 // 3857
                if (!engine)                                                                                           // 3858
                {                                                                                                      // 3859
                    Alpaca.logError("Cannot find template engine for type: " + type);                                  // 3860
                    var err = new Error("Cannot find template engine for type: " + type);                              // 3861
                    viewCompileCallback(normalizedViews, err, view, compiledTemplateId, cacheKey, totalCalls);         // 3862
                }                                                                                                      // 3863
                                                                                                                       // 3864
                // the desired new cache key                                                                           // 3865
                var cacheKey = viewId + "_" + compiledTemplateId;                                                      // 3866
                if (engine.isCached(cacheKey))                                                                         // 3867
                {                                                                                                      // 3868
                    // already compiled, so skip                                                                       // 3869
                    viewCompileCallback(normalizedViews, null, view, compiledTemplateId, cacheKey, totalCalls);        // 3870
                }                                                                                                      // 3871
                else                                                                                                   // 3872
                {                                                                                                      // 3873
                    // check if "template" is actually a reference to another template                                 // 3874
                    // if so, we can reuse the previously compiled fellow                                              // 3875
                                                                                                                       // 3876
                    var previouslyCompiledTemplateCacheKey = view.compiledTemplates["view-" + template];               // 3877
                    if (previouslyCompiledTemplateCacheKey)                                                            // 3878
                    {                                                                                                  // 3879
                        // this entry is pointing to a previously compiled template                                    // 3880
                        // fetch html and compile again                                                                // 3881
                        template = Alpaca.TemplateCache[previouslyCompiledTemplateCacheKey];                           // 3882
                    }                                                                                                  // 3883
                                                                                                                       // 3884
                    // compile the template                                                                            // 3885
                    engine.compile(cacheKey, template, function(err, data) {                                           // 3886
                        viewCompileCallback(normalizedViews, err, view, compiledTemplateId, cacheKey, totalCalls);     // 3887
                    });                                                                                                // 3888
                                                                                                                       // 3889
                }                                                                                                      // 3890
            };                                                                                                         // 3891
                                                                                                                       // 3892
            var compileTemplates = function(normalizedViews)                                                           // 3893
            {                                                                                                          // 3894
                // walk through all normalized views that we're interested in and compile the templates within         // 3895
                var functionArray = [];                                                                                // 3896
                for (var viewId in normalizedViews)                                                                    // 3897
                {                                                                                                      // 3898
                    var view = normalizedViews[viewId];                                                                // 3899
                    view.compiledTemplates = {};                                                                       // 3900
                                                                                                                       // 3901
                    // view templates                                                                                  // 3902
                    if (view.templates)                                                                                // 3903
                    {                                                                                                  // 3904
                        for (var templateId in view.templates)                                                         // 3905
                        {                                                                                              // 3906
                            var template = view.templates[templateId];                                                 // 3907
                                                                                                                       // 3908
                            functionArray.push(function(normalizedViews, view, compiledTemplateId, template) {         // 3909
                                return function(totalCalls) {                                                          // 3910
                                    compileViewTemplate(normalizedViews, view, compiledTemplateId, template, totalCalls);
                                };                                                                                     // 3912
                            }(normalizedViews, view, "view-" + templateId, template));                                 // 3913
                        }                                                                                              // 3914
                    }                                                                                                  // 3915
                                                                                                                       // 3916
                    // field level templates                                                                           // 3917
                    if (view.fields)                                                                                   // 3918
                    {                                                                                                  // 3919
                        for (var path in view.fields)                                                                  // 3920
                        {                                                                                              // 3921
                            if (view.fields[path].templates)                                                           // 3922
                            {                                                                                          // 3923
                                for (var templateId in view.fields[path].templates)                                    // 3924
                                {                                                                                      // 3925
                                    var template = view.fields[path].templates[templateId];                            // 3926
                                                                                                                       // 3927
                                    functionArray.push(function(normalizedViews, view, compiledTemplateId, template) { // 3928
                                        return function(totalCalls) {                                                  // 3929
                                            compileViewTemplate(normalizedViews, view, compiledTemplateId, template, totalCalls);
                                        };                                                                             // 3931
                                    }(normalizedViews, view, "field-" + path + "-" + templateId, template));           // 3932
                                }                                                                                      // 3933
                            }                                                                                          // 3934
                        }                                                                                              // 3935
                    }                                                                                                  // 3936
                                                                                                                       // 3937
                    // layout template                                                                                 // 3938
                    if (view.layout && view.layout.template)                                                           // 3939
                    {                                                                                                  // 3940
                        var template = view.layout.template;                                                           // 3941
                                                                                                                       // 3942
                        functionArray.push(function(normalizedViews, view, compiledTemplateId, template) {             // 3943
                            return function(totalCalls) {                                                              // 3944
                                compileViewTemplate(normalizedViews, view, compiledTemplateId, template, totalCalls);  // 3945
                            };                                                                                         // 3946
                        }(normalizedViews, view, "layoutTemplate", template));                                         // 3947
                    }                                                                                                  // 3948
                                                                                                                       // 3949
                    // global template                                                                                 // 3950
                    if (view.globalTemplate)                                                                           // 3951
                    {                                                                                                  // 3952
                        var template = view.globalTemplate;                                                            // 3953
                                                                                                                       // 3954
                        functionArray.push(function(normalizedViews, view, compiledTemplateId, template) {             // 3955
                            return function(totalCalls) {                                                              // 3956
                                compileViewTemplate(normalizedViews, view, compiledTemplateId, template, totalCalls);  // 3957
                            };                                                                                         // 3958
                        }(normalizedViews, view, "globalTemplate", template));                                         // 3959
                    }                                                                                                  // 3960
                }                                                                                                      // 3961
                                                                                                                       // 3962
                // now invoke all of the functions                                                                     // 3963
                // this tells each template to compile                                                                 // 3964
                var totalCalls = functionArray.length;                                                                 // 3965
                for (var i = 0; i < functionArray.length; i++)                                                         // 3966
                {                                                                                                      // 3967
                    functionArray[i](totalCalls);                                                                      // 3968
                }                                                                                                      // 3969
            };                                                                                                         // 3970
                                                                                                                       // 3971
            var normalizeViews = function()                                                                            // 3972
            {                                                                                                          // 3973
                // the views that we're going to normalized                                                            // 3974
                var normalizedViews = {};                                                                              // 3975
                var normalizedViewCount = 0;                                                                           // 3976
                                                                                                                       // 3977
                // some initial self-assurance to make sure we have the normalizedViews map set up                     // 3978
                if (!Alpaca.normalizedViews) {                                                                         // 3979
                    Alpaca.normalizedViews = {};                                                                       // 3980
                }                                                                                                      // 3981
                self.normalizedViews = Alpaca.normalizedViews;                                                         // 3982
                                                                                                                       // 3983
                // walk through all of our views                                                                       // 3984
                for (var viewId in self.views)                                                                         // 3985
                {                                                                                                      // 3986
                    // if the view is already normalized on the Alpaca global, we do not bother                        // 3987
                    if (!Alpaca.normalizedViews[viewId])                                                               // 3988
                    {                                                                                                  // 3989
                        var normalizedView = new Alpaca.NormalizedView(viewId);                                        // 3990
                        if (normalizedView.normalize())                                                                // 3991
                        {                                                                                              // 3992
                            normalizedViews[viewId] = normalizedView;                                                  // 3993
                            normalizedViewCount++;                                                                     // 3994
                        }                                                                                              // 3995
                        else                                                                                           // 3996
                        {                                                                                              // 3997
                            return Alpaca.throwErrorWithCallback("View normalization failed, cannot initialize Alpaca.  Please check the error logs.", errorCallback);
                        }                                                                                              // 3999
                    }                                                                                                  // 4000
                }                                                                                                      // 4001
                                                                                                                       // 4002
                if (normalizedViewCount > 0)                                                                           // 4003
                {                                                                                                      // 4004
                    compileTemplates(normalizedViews);                                                                 // 4005
                }                                                                                                      // 4006
                else                                                                                                   // 4007
                {                                                                                                      // 4008
                    finalCallback(normalizedViews);                                                                    // 4009
                }                                                                                                      // 4010
            };                                                                                                         // 4011
                                                                                                                       // 4012
            normalizeViews();                                                                                          // 4013
        },                                                                                                             // 4014
                                                                                                                       // 4015
        /**                                                                                                            // 4016
         * Looks up the proper template to be used to handle a requested template id for a view and a field.           // 4017
         * Performs an override lookup to find the proper template.                                                    // 4018
         *                                                                                                             // 4019
         * Hands back a descriptor of everything that is known about the resolved template.                            // 4020
         *                                                                                                             // 4021
         * @param view                                                                                                 // 4022
         * @param templateId                                                                                           // 4023
         * @param field                                                                                                // 4024
         * @return {Object}                                                                                            // 4025
         */                                                                                                            // 4026
        getTemplateDescriptor: function(view, templateId, field)                                                       // 4027
        {                                                                                                              // 4028
            var descriptor = {};                                                                                       // 4029
                                                                                                                       // 4030
            //////////////////////////////////////////////////////////////////////////////////////////////////         // 4031
            //                                                                                                         // 4032
            // FIGURE OUT WHERE THE TEMPLATE IS IN THE VIEW CONFIGURATION (RESPECTING FIELD OVERRIDES)                 // 4033
            //                                                                                                         // 4034
            //////////////////////////////////////////////////////////////////////////////////////////////////         // 4035
                                                                                                                       // 4036
            var _template;                                                                                             // 4037
            var _templateType;                                                                                         // 4038
                                                                                                                       // 4039
            // first consider template level                                                                           // 4040
            if (view.templates && view.templates[templateId])                                                          // 4041
            {                                                                                                          // 4042
                _template = view.templates[templateId];                                                                // 4043
                _templateType = "view";                                                                                // 4044
            }                                                                                                          // 4045
                                                                                                                       // 4046
            // now allow for field overrides                                                                           // 4047
            if (field && field.path)                                                                                   // 4048
            {                                                                                                          // 4049
                var path = field.path;                                                                                 // 4050
                                                                                                                       // 4051
                if (view && view.fields && view.fields[path] && view.fields[path].templates && view.fields[path].templates[templateId])
                {                                                                                                      // 4053
                    _template = view.fields[path].templates[templateId];                                               // 4054
                    _templateType = "field";                                                                           // 4055
                }                                                                                                      // 4056
            }                                                                                                          // 4057
                                                                                                                       // 4058
            // finally there are some hardcoded values                                                                 // 4059
            if (templateId == "globalTemplate") {                                                                      // 4060
                _template = "globalTemplate";                                                                          // 4061
                _templateType = "global";                                                                              // 4062
            }                                                                                                          // 4063
                                                                                                                       // 4064
            if (templateId == "layoutTemplate") {                                                                      // 4065
                _template = "layoutTemplate";                                                                          // 4066
                _templateType = "layout";                                                                              // 4067
            }                                                                                                          // 4068
                                                                                                                       // 4069
            descriptor.template = {};                                                                                  // 4070
            descriptor.template.id = templateId;                                                                       // 4071
            descriptor.template.type = _templateType;                                                                  // 4072
            descriptor.template.value = _template;                                                                     // 4073
                                                                                                                       // 4074
                                                                                                                       // 4075
            //////////////////////////////////////////////////////////////////////////////////////////////////         // 4076
            //                                                                                                         // 4077
            // ENGINE PROPERTIES                                                                                       // 4078
            //                                                                                                         // 4079
            //////////////////////////////////////////////////////////////////////////////////////////////////         // 4080
                                                                                                                       // 4081
            var type = null;                                                                                           // 4082
            var template = _template;                                                                                  // 4083
            if (Alpaca.isObject(template)) {                                                                           // 4084
                type = template.type;                                                                                  // 4085
                template = template.template;                                                                          // 4086
            }                                                                                                          // 4087
                                                                                                                       // 4088
            // if type isn't resolved, assume jquery tmpl()                                                            // 4089
            if (!type)                                                                                                 // 4090
            {                                                                                                          // 4091
                type = "text/x-jquery-tmpl";                                                                           // 4092
            }                                                                                                          // 4093
                                                                                                                       // 4094
            var engine = Alpaca.TemplateEngineRegistry.find(type);                                                     // 4095
            if (!engine)                                                                                               // 4096
            {                                                                                                          // 4097
                return Alpaca.throwDefaultError("Cannot find template engine for type: " + type);                      // 4098
            }                                                                                                          // 4099
                                                                                                                       // 4100
            descriptor.engine = {};                                                                                    // 4101
            descriptor.engine.type = type;                                                                             // 4102
            descriptor.engine.id = engine.id;                                                                          // 4103
                                                                                                                       // 4104
                                                                                                                       // 4105
                                                                                                                       // 4106
            //////////////////////////////////////////////////////////////////////////////////////////////////         // 4107
            //                                                                                                         // 4108
            // NOW DETERMINE THE COMPILED TEMPLATE ID FOR THIS TEMPLATE                                                // 4109
            //                                                                                                         // 4110
            //////////////////////////////////////////////////////////////////////////////////////////////////         // 4111
                                                                                                                       // 4112
            var compiledTemplateId = null;                                                                             // 4113
            if (_templateType == "view")                                                                               // 4114
            {                                                                                                          // 4115
                compiledTemplateId = "view-" + templateId;                                                             // 4116
            }                                                                                                          // 4117
            else if (_templateType == "field")                                                                         // 4118
            {                                                                                                          // 4119
                compiledTemplateId = "field-" + field.path + "-" + templateId;                                         // 4120
            }                                                                                                          // 4121
            else if (_templateType == "layout")                                                                        // 4122
            {                                                                                                          // 4123
                compiledTemplateId = "layoutTemplate";                                                                 // 4124
            }                                                                                                          // 4125
            else if (_templateType == "global")                                                                        // 4126
            {                                                                                                          // 4127
                compiledTemplateId = "globalTemplate";                                                                 // 4128
            }                                                                                                          // 4129
                                                                                                                       // 4130
            descriptor.compiledTemplateId = compiledTemplateId;                                                        // 4131
                                                                                                                       // 4132
                                                                                                                       // 4133
            // look up the cacheKey for this compiled template id                                                      // 4134
            // verify it is in cache                                                                                   // 4135
            var cacheKey = view.compiledTemplates[compiledTemplateId];                                                 // 4136
            if (!cacheKey || !engine.isCached(cacheKey))                                                               // 4137
            {                                                                                                          // 4138
                // well, it isn't actually a compiled template                                                         // 4139
                // thus, we cannot in the end produce a descriptor for it                                              // 4140
                return null;                                                                                           // 4141
            }                                                                                                          // 4142
                                                                                                                       // 4143
            descriptor.cache = {};                                                                                     // 4144
            descriptor.cache.key = cacheKey;                                                                           // 4145
                                                                                                                       // 4146
            return descriptor;                                                                                         // 4147
        },                                                                                                             // 4148
                                                                                                                       // 4149
        /**                                                                                                            // 4150
         * Executes a template.                                                                                        // 4151
         *                                                                                                             // 4152
         * @param view                                                                                                 // 4153
         * @param templateDescriptor                                                                                   // 4154
         * @param model                                                                                                // 4155
         */                                                                                                            // 4156
        tmpl: function(view, templateDescriptor, model)                                                                // 4157
        {                                                                                                              // 4158
            if (Alpaca.isString(view)) {                                                                               // 4159
                view = this.normalizedViews[view];                                                                     // 4160
            }                                                                                                          // 4161
                                                                                                                       // 4162
            var engineType = templateDescriptor.engine.type;                                                           // 4163
            var compiledTemplateId = templateDescriptor.compiledTemplateId;                                            // 4164
                                                                                                                       // 4165
            var engine = Alpaca.TemplateEngineRegistry.find(engineType);                                               // 4166
            if (!engine)                                                                                               // 4167
            {                                                                                                          // 4168
                return Alpaca.throwDefaultError("Cannot find template engine for type: " + engineType);                // 4169
            }                                                                                                          // 4170
                                                                                                                       // 4171
            // execute the template                                                                                    // 4172
            var cacheKey = templateDescriptor.cache.key;                                                               // 4173
            var html = engine.execute(cacheKey, model, function(err) {                                                 // 4174
                return Alpaca.throwDefaultError("The compiled template: " + compiledTemplateId + " for view: " + view.id + " failed to execute: " + JSON.stringify(err));
            });                                                                                                        // 4176
                                                                                                                       // 4177
            return Alpaca.safeDomParse(html);                                                                          // 4178
        }                                                                                                              // 4179
    });                                                                                                                // 4180
                                                                                                                       // 4181
                                                                                                                       // 4182
    ///////////////////////////////////////////////////////////////////////////////////////////                        // 4183
    //                                                                                                                 // 4184
    // LOGGER                                                                                                          // 4185
    //                                                                                                                 // 4186
    ///////////////////////////////////////////////////////////////////////////////////////////                        // 4187
                                                                                                                       // 4188
    Alpaca.DEBUG = 0;                                                                                                  // 4189
    Alpaca.INFO = 1;                                                                                                   // 4190
    Alpaca.WARN = 2;                                                                                                   // 4191
    Alpaca.ERROR = 3;                                                                                                  // 4192
                                                                                                                       // 4193
    // by default, logging only shows warnings and above                                                               // 4194
    // to debug, set Alpaca.logLevel = Alpaca.DEBUG                                                                    // 4195
    Alpaca.logLevel = Alpaca.WARN;                                                                                     // 4196
                                                                                                                       // 4197
    Alpaca.logDebug = function(obj) {                                                                                  // 4198
        Alpaca.log(Alpaca.DEBUG, obj);                                                                                 // 4199
    };                                                                                                                 // 4200
    Alpaca.logInfo = function(obj) {                                                                                   // 4201
        Alpaca.log(Alpaca.INFO, obj);                                                                                  // 4202
    };                                                                                                                 // 4203
    Alpaca.logWarn = function(obj) {                                                                                   // 4204
        Alpaca.log(Alpaca.WARN, obj);                                                                                  // 4205
    };                                                                                                                 // 4206
    Alpaca.logError = function(obj) {                                                                                  // 4207
        Alpaca.log(Alpaca.ERROR, obj);                                                                                 // 4208
    };                                                                                                                 // 4209
                                                                                                                       // 4210
    Alpaca.LOG_METHOD_MAP = {                                                                                          // 4211
        0: 'debug',                                                                                                    // 4212
        1: 'info',                                                                                                     // 4213
        2: 'warn',                                                                                                     // 4214
        3: 'error'                                                                                                     // 4215
    };                                                                                                                 // 4216
                                                                                                                       // 4217
    Alpaca.log = function(level, obj) {                                                                                // 4218
                                                                                                                       // 4219
        if (Alpaca.logLevel <= level)                                                                                  // 4220
        {                                                                                                              // 4221
            var method = Alpaca.LOG_METHOD_MAP[level];                                                                 // 4222
                                                                                                                       // 4223
            if (typeof console !== 'undefined' && console[method])                                                     // 4224
            {                                                                                                          // 4225
                if ("debug" == method) {                                                                               // 4226
                    console.debug(obj);                                                                                // 4227
                }                                                                                                      // 4228
                else if ("info" == method) {                                                                           // 4229
                    console.info(obj);                                                                                 // 4230
                }                                                                                                      // 4231
                else if ("warn" == method) {                                                                           // 4232
                    console.warn(obj);                                                                                 // 4233
                }                                                                                                      // 4234
                else if ("error" == method) {                                                                          // 4235
                    console.error(obj);                                                                                // 4236
                }                                                                                                      // 4237
                else {                                                                                                 // 4238
                    console.log(obj);                                                                                  // 4239
                }                                                                                                      // 4240
            }                                                                                                          // 4241
        }                                                                                                              // 4242
    };                                                                                                                 // 4243
                                                                                                                       // 4244
    Alpaca.checked = function(el, value)                                                                               // 4245
    {                                                                                                                  // 4246
        return Alpaca.attrProp(el, "checked", value);                                                                  // 4247
    };                                                                                                                 // 4248
                                                                                                                       // 4249
    Alpaca.attrProp = function(el, name, value)                                                                        // 4250
    {                                                                                                                  // 4251
        if (!(typeof(value) === "undefined"))                                                                          // 4252
        {                                                                                                              // 4253
            // jQuery 1.6+                                                                                             // 4254
            if ($(el).prop)                                                                                            // 4255
            {                                                                                                          // 4256
                $(el).prop(name, value);                                                                               // 4257
            }                                                                                                          // 4258
            else                                                                                                       // 4259
            {                                                                                                          // 4260
                if (value) {                                                                                           // 4261
                    $(el).attr(name, value);                                                                           // 4262
                } else {                                                                                               // 4263
                    $(el).removeAttr(name);                                                                            // 4264
                }                                                                                                      // 4265
            }                                                                                                          // 4266
        }                                                                                                              // 4267
                                                                                                                       // 4268
        // now return the correct value                                                                                // 4269
                                                                                                                       // 4270
        // jQuery 1.6+                                                                                                 // 4271
        if ($(el).prop) {                                                                                              // 4272
            return $(el).prop(name);                                                                                   // 4273
        }                                                                                                              // 4274
                                                                                                                       // 4275
        return $(el).attr(name);                                                                                       // 4276
    };                                                                                                                 // 4277
                                                                                                                       // 4278
    Alpaca.loadRefSchemaOptions = function(topField, referenceId, callback)                                            // 4279
    {                                                                                                                  // 4280
        if (referenceId.indexOf("#/definitions/") > -1)                                                                // 4281
        {                                                                                                              // 4282
            var defId = referenceId.substring(14);                                                                     // 4283
                                                                                                                       // 4284
            var defSchema = null;                                                                                      // 4285
            if (topField.schema.definitions)                                                                           // 4286
            {                                                                                                          // 4287
                defSchema = topField.schema.definitions[defId];                                                        // 4288
            }                                                                                                          // 4289
                                                                                                                       // 4290
            var defOptions = null;                                                                                     // 4291
            if (topField.options.definitions)                                                                          // 4292
            {                                                                                                          // 4293
                defOptions = topField.options.definitions[defId];                                                      // 4294
            }                                                                                                          // 4295
                                                                                                                       // 4296
            callback(defSchema, defOptions);                                                                           // 4297
        }                                                                                                              // 4298
        else                                                                                                           // 4299
        {                                                                                                              // 4300
            // THE PROBLEM IS THAT THE FLOW FIELD HASN'T YET BEEN ADDED TO CHILDREN!                                   // 4301
            // IT IS IN THE PROCESS OF RENDERING!                                                                      // 4302
            var resolution = Alpaca.resolveReference(topField.schema, topField.options, referenceId);                  // 4303
            if (resolution)                                                                                            // 4304
            {                                                                                                          // 4305
                callback(resolution.schema, resolution.options);                                                       // 4306
            }                                                                                                          // 4307
            else                                                                                                       // 4308
            {                                                                                                          // 4309
                // nothing                                                                                             // 4310
                callback();                                                                                            // 4311
            }                                                                                                          // 4312
        }                                                                                                              // 4313
    };                                                                                                                 // 4314
                                                                                                                       // 4315
    Alpaca.DEFAULT_ERROR_CALLBACK = function(error)                                                                    // 4316
    {                                                                                                                  // 4317
        if (error && error.message)                                                                                    // 4318
        {                                                                                                              // 4319
            // log to debug                                                                                            // 4320
            Alpaca.logError(error.message);                                                                            // 4321
                                                                                                                       // 4322
            // error out                                                                                               // 4323
            throw new Error("Alpaca caught an error with the default error handler: " + error.message);                // 4324
                                                                                                                       // 4325
        }                                                                                                              // 4326
    };                                                                                                                 // 4327
                                                                                                                       // 4328
    /**                                                                                                                // 4329
     * Default error callback handler for Alpaca.                                                                      // 4330
     *                                                                                                                 // 4331
     * This error handler will be used if an "error" argument isn't passed in to the constructor for an Alpaca field.  // 4332
     *                                                                                                                 // 4333
     * @param error                                                                                                    // 4334
     */                                                                                                                // 4335
    Alpaca.defaultErrorCallback = Alpaca.DEFAULT_ERROR_CALLBACK;                                                       // 4336
                                                                                                                       // 4337
    /**                                                                                                                // 4338
     * Utility method that throws a general error and dispatches to the default error handler.                         // 4339
     *                                                                                                                 // 4340
     * @param message                                                                                                  // 4341
     */                                                                                                                // 4342
    Alpaca.throwDefaultError = function(message)                                                                       // 4343
    {                                                                                                                  // 4344
        if (message && Alpaca.isObject(message))                                                                       // 4345
        {                                                                                                              // 4346
            message = JSON.stringify(message);                                                                         // 4347
        }                                                                                                              // 4348
                                                                                                                       // 4349
        var err = {                                                                                                    // 4350
            "message": message                                                                                         // 4351
        };                                                                                                             // 4352
                                                                                                                       // 4353
        Alpaca.defaultErrorCallback(err);                                                                              // 4354
    };                                                                                                                 // 4355
                                                                                                                       // 4356
    /**                                                                                                                // 4357
     * Utility method that throws an error back to the given callback handler.                                         // 4358
     *                                                                                                                 // 4359
     * @param message                                                                                                  // 4360
     * @param errorCallback                                                                                            // 4361
     */                                                                                                                // 4362
    Alpaca.throwErrorWithCallback = function(message, errorCallback)                                                   // 4363
    {                                                                                                                  // 4364
        if (message && Alpaca.isObject(message))                                                                       // 4365
        {                                                                                                              // 4366
            message = JSON.stringify(message);                                                                         // 4367
        }                                                                                                              // 4368
                                                                                                                       // 4369
        var err = {                                                                                                    // 4370
            "message": message                                                                                         // 4371
        };                                                                                                             // 4372
                                                                                                                       // 4373
        if (errorCallback)                                                                                             // 4374
        {                                                                                                              // 4375
            errorCallback(err);                                                                                        // 4376
        }                                                                                                              // 4377
        else                                                                                                           // 4378
        {                                                                                                              // 4379
            Alpaca.defaultErrorCallback(err);                                                                          // 4380
        }                                                                                                              // 4381
    };                                                                                                                 // 4382
                                                                                                                       // 4383
                                                                                                                       // 4384
    /**                                                                                                                // 4385
     * Given a base field, walks the schema, options and data forward until it                                         // 4386
     * discovers the given reference.                                                                                  // 4387
     *                                                                                                                 // 4388
     * @param schema                                                                                                   // 4389
     * @param options                                                                                                  // 4390
     * @param referenceId                                                                                              // 4391
     */                                                                                                                // 4392
    Alpaca.resolveReference = function(schema, options, referenceId)                                                   // 4393
    {                                                                                                                  // 4394
        if (schema.id == referenceId)                                                                                  // 4395
        {                                                                                                              // 4396
            var result = {};                                                                                           // 4397
            if (schema) {                                                                                              // 4398
                result.schema = schema;                                                                                // 4399
            }                                                                                                          // 4400
            if (options) {                                                                                             // 4401
                result.options = options;                                                                              // 4402
            }                                                                                                          // 4403
                                                                                                                       // 4404
            return result;                                                                                             // 4405
        }                                                                                                              // 4406
        else                                                                                                           // 4407
        {                                                                                                              // 4408
            if (schema && schema.properties)                                                                           // 4409
            {                                                                                                          // 4410
                for (var propertyId in schema.properties)                                                              // 4411
                {                                                                                                      // 4412
                    var subSchema = schema.properties[propertyId];                                                     // 4413
                    var subOptions = null;                                                                             // 4414
                    if (options && options.fields && options.fields[propertyId])                                       // 4415
                    {                                                                                                  // 4416
                        subOptions = options.fields[propertyId];                                                       // 4417
                    }                                                                                                  // 4418
                                                                                                                       // 4419
                    var x = Alpaca.resolveReference(subSchema, subOptions, referenceId);                               // 4420
                    if (x)                                                                                             // 4421
                    {                                                                                                  // 4422
                        return x;                                                                                      // 4423
                    }                                                                                                  // 4424
                }                                                                                                      // 4425
            }                                                                                                          // 4426
        }                                                                                                              // 4427
                                                                                                                       // 4428
        return null;                                                                                                   // 4429
    };                                                                                                                 // 4430
                                                                                                                       // 4431
    $.alpaca = window.Alpaca = Alpaca;                                                                                 // 4432
                                                                                                                       // 4433
    /**                                                                                                                // 4434
     * jQuery friendly method for binding a field to a DOM element.                                                    // 4435
     * @ignore                                                                                                         // 4436
     */                                                                                                                // 4437
    $.fn.alpaca = function() {                                                                                         // 4438
        var args = Alpaca.makeArray(arguments);                                                                        // 4439
                                                                                                                       // 4440
        // append this into the front of args                                                                          // 4441
        var newArgs = [].concat(this, args);                                                                           // 4442
                                                                                                                       // 4443
        // hand back the field instance                                                                                // 4444
        return Alpaca.apply(this, newArgs);                                                                            // 4445
    };                                                                                                                 // 4446
                                                                                                                       // 4447
    /**                                                                                                                // 4448
     * @ignore                                                                                                         // 4449
     * @param nocloning                                                                                                // 4450
     */                                                                                                                // 4451
    $.fn.outerHTML = function(nocloning) {                                                                             // 4452
        if (nocloning) {                                                                                               // 4453
            return $("<div></div>").append(this).html();                                                               // 4454
        } else {                                                                                                       // 4455
            return $("<div></div>").append(this.clone()).html();                                                       // 4456
        }                                                                                                              // 4457
    };                                                                                                                 // 4458
                                                                                                                       // 4459
    /**                                                                                                                // 4460
     * @ignore                                                                                                         // 4461
     * @param to                                                                                                       // 4462
     */                                                                                                                // 4463
    $.fn.swapWith = function(to) {                                                                                     // 4464
        return this.each(function() {                                                                                  // 4465
            var copy_to = $(to).clone();                                                                               // 4466
            var copy_from = $(this).clone();                                                                           // 4467
            $(to).replaceWith(copy_from);                                                                              // 4468
            $(this).replaceWith(copy_to);                                                                              // 4469
        });                                                                                                            // 4470
    };                                                                                                                 // 4471
                                                                                                                       // 4472
    $.fn.attrProp = function(name, value) {                                                                            // 4473
        return Alpaca.attrProp($(this), name, value);                                                                  // 4474
    };                                                                                                                 // 4475
                                                                                                                       // 4476
    /**                                                                                                                // 4477
     * When dom elements are removed, we fire the special "destroyed" event to allow for late cleanup of any Alpaca code
     * that might be in-memory and linked to the dom element.                                                          // 4479
     *                                                                                                                 // 4480
     * @type {Object}                                                                                                  // 4481
     */                                                                                                                // 4482
    $.event.special.destroyed = {                                                                                      // 4483
        remove: function(o) {                                                                                          // 4484
            if (o.handler) {                                                                                           // 4485
                o.handler();                                                                                           // 4486
            }                                                                                                          // 4487
        }                                                                                                              // 4488
    };                                                                                                                 // 4489
                                                                                                                       // 4490
                                                                                                                       // 4491
    Alpaca.CountersMap = {};                                                                                           // 4492
    Alpaca.Counters = function(name)                                                                                   // 4493
    {                                                                                                                  // 4494
        if (Alpaca.Counters[name])                                                                                     // 4495
        {                                                                                                              // 4496
            return Alpaca.Counters[name];                                                                              // 4497
        }                                                                                                              // 4498
                                                                                                                       // 4499
        // create new counters                                                                                         // 4500
                                                                                                                       // 4501
        var types = {};                                                                                                // 4502
        var all = {                                                                                                    // 4503
            count: 0,                                                                                                  // 4504
            total: 0,                                                                                                  // 4505
            avg: 0,                                                                                                    // 4506
            touches: 0                                                                                                 // 4507
        };                                                                                                             // 4508
                                                                                                                       // 4509
        var counters = {                                                                                               // 4510
                                                                                                                       // 4511
            increment: function(type, amount)                                                                          // 4512
            {                                                                                                          // 4513
                if (!types[type]) {                                                                                    // 4514
                    types[type] = {                                                                                    // 4515
                        count: 0,                                                                                      // 4516
                        total: 0,                                                                                      // 4517
                        avg: 0,                                                                                        // 4518
                        touches: 0                                                                                     // 4519
                    };                                                                                                 // 4520
                }                                                                                                      // 4521
                                                                                                                       // 4522
                types[type].count++;                                                                                   // 4523
                types[type].total += amount;                                                                           // 4524
                types[type].avg = types[type].total / types[type].count;                                               // 4525
                types[type].touches++;                                                                                 // 4526
                                                                                                                       // 4527
                all.count++;                                                                                           // 4528
                all.total += amount;                                                                                   // 4529
                all.avg = all.total / all.count;                                                                       // 4530
                all.touches++;                                                                                         // 4531
            },                                                                                                         // 4532
                                                                                                                       // 4533
            read: function(type) {                                                                                     // 4534
                return types[type];                                                                                    // 4535
            },                                                                                                         // 4536
                                                                                                                       // 4537
            each: function(f) {                                                                                        // 4538
                for (var type in types)                                                                                // 4539
                {                                                                                                      // 4540
                    f(type, types[type]);                                                                              // 4541
                }                                                                                                      // 4542
            },                                                                                                         // 4543
                                                                                                                       // 4544
            all: function() {                                                                                          // 4545
                return all;                                                                                            // 4546
            }                                                                                                          // 4547
        };                                                                                                             // 4548
                                                                                                                       // 4549
        Alpaca.Counters[name] = counters;                                                                              // 4550
                                                                                                                       // 4551
        return counters;                                                                                               // 4552
    };                                                                                                                 // 4553
                                                                                                                       // 4554
    Alpaca.collectTiming = false;                                                                                      // 4555
                                                                                                                       // 4556
})(jQuery);                                                                                                            // 4557
(function()                                                                                                            // 4558
{                                                                                                                      // 4559
    Alpaca.TemplateEngineRegistry = function() {                                                                       // 4560
                                                                                                                       // 4561
        var registry = {};                                                                                             // 4562
                                                                                                                       // 4563
        return {                                                                                                       // 4564
                                                                                                                       // 4565
            register: function(id, engine)                                                                             // 4566
            {                                                                                                          // 4567
                registry[id] = engine;                                                                                 // 4568
            },                                                                                                         // 4569
                                                                                                                       // 4570
            find: function(idOrType)                                                                                   // 4571
            {                                                                                                          // 4572
                var engine = null;                                                                                     // 4573
                                                                                                                       // 4574
                if (registry[idOrType])                                                                                // 4575
                {                                                                                                      // 4576
                    engine = registry[idOrType];                                                                       // 4577
                }                                                                                                      // 4578
                else                                                                                                   // 4579
                {                                                                                                      // 4580
                    // inspect by type                                                                                 // 4581
                    for (var id in registry)                                                                           // 4582
                    {                                                                                                  // 4583
                        var supportedMimetypes = registry[id].supportedMimetypes();                                    // 4584
                        for (var i = 0; i < supportedMimetypes.length; i++)                                            // 4585
                        {                                                                                              // 4586
                            if (idOrType.toLowerCase() == supportedMimetypes[i].toLowerCase())                         // 4587
                            {                                                                                          // 4588
                                engine = registry[id];                                                                 // 4589
                                break;                                                                                 // 4590
                            }                                                                                          // 4591
                        }                                                                                              // 4592
                    }                                                                                                  // 4593
                }                                                                                                      // 4594
                                                                                                                       // 4595
                return engine;                                                                                         // 4596
            },                                                                                                         // 4597
                                                                                                                       // 4598
            ids: function()                                                                                            // 4599
            {                                                                                                          // 4600
                var ids = [];                                                                                          // 4601
                                                                                                                       // 4602
                for (var id in registry)                                                                               // 4603
                {                                                                                                      // 4604
                    ids.push(id);                                                                                      // 4605
                }                                                                                                      // 4606
                                                                                                                       // 4607
                return ids;                                                                                            // 4608
            }                                                                                                          // 4609
        };                                                                                                             // 4610
    }();                                                                                                               // 4611
                                                                                                                       // 4612
})();                                                                                                                  // 4613
(function($)                                                                                                           // 4614
{                                                                                                                      // 4615
    // template cache                                                                                                  // 4616
    if (typeof(Alpaca.TemplateCache) == "undefined") {                                                                 // 4617
        Alpaca.TemplateCache = {};                                                                                     // 4618
    }                                                                                                                  // 4619
                                                                                                                       // 4620
    Alpaca.AbstractTemplateEngine = Base.extend(                                                                       // 4621
    {                                                                                                                  // 4622
        constructor: function(id)                                                                                      // 4623
        {                                                                                                              // 4624
            this.base();                                                                                               // 4625
                                                                                                                       // 4626
            this.id = id;                                                                                              // 4627
                                                                                                                       // 4628
            this.cleanMarkup = function(html)                                                                          // 4629
            {                                                                                                          // 4630
                // convert to a dom briefly                                                                            // 4631
                var dom = Alpaca.safeDomParse(html);                                                                   // 4632
                                                                                                                       // 4633
                // if if starts with a script tag, then we strip that out                                              // 4634
                if ($(dom).length == 1)                                                                                // 4635
                {                                                                                                      // 4636
                    if ($(dom)[0].nodeName.toLowerCase() == "script")                                                  // 4637
                    {                                                                                                  // 4638
                        html = $(dom).html();                                                                          // 4639
                    }                                                                                                  // 4640
                }                                                                                                      // 4641
                                                                                                                       // 4642
                return html;                                                                                           // 4643
            };                                                                                                         // 4644
        },                                                                                                             // 4645
                                                                                                                       // 4646
        /**                                                                                                            // 4647
         * Compiles the given template (or URI or dom selector)                                                        // 4648
         *                                                                                                             // 4649
         * @param cacheKey                                                                                             // 4650
         * @param template                                                                                             // 4651
         * @param callback                                                                                             // 4652
         */                                                                                                            // 4653
        compile: function(cacheKey, template, callback)                                                                // 4654
        {                                                                                                              // 4655
            var self = this;                                                                                           // 4656
                                                                                                                       // 4657
            // the value being compiled can be                                                                         // 4658
            //   HTML                                                                                                  // 4659
            //   URL (http, ./ or /)                                                                                   // 4660
            //   dom selector (#abc, .classname)                                                                       // 4661
            //   dom element                                                                                           // 4662
                                                                                                                       // 4663
            // here we try to determine what type of value it is                                                       // 4664
            var type = "html";                                                                                         // 4665
            if (Alpaca.isString(template))                                                                             // 4666
            {                                                                                                          // 4667
                if (template.indexOf("./") === 0 || template.indexOf("/") === 0 || template.indexOf("../") === 0)      // 4668
                {                                                                                                      // 4669
                    type = "uri";                                                                                      // 4670
                }                                                                                                      // 4671
                else if (template.indexOf("#") === 0 || template.indexOf(".") === 0 || template.indexOf("[") === 0)    // 4672
                {                                                                                                      // 4673
                    type = "selector";                                                                                 // 4674
                }                                                                                                      // 4675
            }                                                                                                          // 4676
            else                                                                                                       // 4677
            {                                                                                                          // 4678
                // it's a dom element, we flow through                                                                 // 4679
            }                                                                                                          // 4680
                                                                                                                       // 4681
            // now extract html and compile                                                                            // 4682
            if (type == "selector")                                                                                    // 4683
            {                                                                                                          // 4684
                self._compile(cacheKey, template, callback);                                                           // 4685
            }                                                                                                          // 4686
            else if (type == "uri")                                                                                    // 4687
            {                                                                                                          // 4688
                var fileExtension = self.fileExtension();                                                              // 4689
                                                                                                                       // 4690
                var url = template;                                                                                    // 4691
                if (url.indexOf("." + fileExtension) === -1) {                                                         // 4692
                    url += "." + fileExtension;                                                                        // 4693
                }                                                                                                      // 4694
                                                                                                                       // 4695
                // load the template via ajax                                                                          // 4696
                $.ajax({                                                                                               // 4697
                    "url": url,                                                                                        // 4698
                    "dataType": "html",                                                                                // 4699
                    "success": function(html)                                                                          // 4700
                    {                                                                                                  // 4701
                        // cleanup html                                                                                // 4702
                        html = self.cleanMarkup(html);                                                                 // 4703
                                                                                                                       // 4704
                        self._compile(cacheKey, html, callback);                                                       // 4705
                    },                                                                                                 // 4706
                    "failure": function(http)                                                                          // 4707
                    {                                                                                                  // 4708
                        callback(http, null);                                                                          // 4709
                    }                                                                                                  // 4710
                });                                                                                                    // 4711
            }                                                                                                          // 4712
            else if (type == "html")                                                                                   // 4713
            {                                                                                                          // 4714
                var html = template;                                                                                   // 4715
                if (html instanceof jQuery) {                                                                          // 4716
                    html = Alpaca.safeDomParse(template).outerHTML();                                                  // 4717
                }                                                                                                      // 4718
                                                                                                                       // 4719
                self._compile(cacheKey, html, callback);                                                               // 4720
            }                                                                                                          // 4721
            else                                                                                                       // 4722
            {                                                                                                          // 4723
                callback(new Error("Template engine cannot determine how to handle type: " + type));                   // 4724
            }                                                                                                          // 4725
        },                                                                                                             // 4726
                                                                                                                       // 4727
        _compile: function(cacheKey, html, callback)                                                                   // 4728
        {                                                                                                              // 4729
            // for null templates, set to empty string                                                                 // 4730
            if (Alpaca.isEmpty(html)) {                                                                                // 4731
                html = "";                                                                                             // 4732
            }                                                                                                          // 4733
                                                                                                                       // 4734
            // trim the html                                                                                           // 4735
            html = Alpaca.trim(html);                                                                                  // 4736
                                                                                                                       // 4737
            if (html.toLowerCase().indexOf("<script") === 0)                                                           // 4738
            {                                                                                                          // 4739
                // already has script tag                                                                              // 4740
            }                                                                                                          // 4741
            else                                                                                                       // 4742
            {                                                                                                          // 4743
                // apply script tag                                                                                    // 4744
                html = "<script type='" + this.supportedMimetypes()[0] + "'>" + html + "</script>";                    // 4745
            }                                                                                                          // 4746
                                                                                                                       // 4747
            Alpaca.logDebug("Compiling template: " + this.id + ", cacheKey: " + cacheKey + ", template: " + html);     // 4748
                                                                                                                       // 4749
            this.doCompile(cacheKey, html, callback);                                                                  // 4750
        },                                                                                                             // 4751
                                                                                                                       // 4752
        /**                                                                                                            // 4753
         * @extension_point                                                                                            // 4754
         *                                                                                                             // 4755
         * @param cacheKey                                                                                             // 4756
         * @param html                                                                                                 // 4757
         * @param callback                                                                                             // 4758
         */                                                                                                            // 4759
        doCompile: function(cacheKey, html, callback)                                                                  // 4760
        {                                                                                                              // 4761
                                                                                                                       // 4762
        },                                                                                                             // 4763
                                                                                                                       // 4764
        /**                                                                                                            // 4765
         * @extension_point                                                                                            // 4766
         *                                                                                                             // 4767
         * @param cacheKey                                                                                             // 4768
         * @param model                                                                                                // 4769
         * @param callback                                                                                             // 4770
         */                                                                                                            // 4771
        execute: function(cacheKey, model, callback)                                                                   // 4772
        {                                                                                                              // 4773
            Alpaca.logDebug("Executing template for cache key: " + cacheKey);                                          // 4774
                                                                                                                       // 4775
            var html = this.doExecute(cacheKey, model, callback);                                                      // 4776
                                                                                                                       // 4777
            // if wrapped in script tag, strip away                                                                    // 4778
            var strip_script = function(html)                                                                          // 4779
            {                                                                                                          // 4780
                // if if starts with a script tag, then we strip that out                                              // 4781
                var dom = Alpaca.safeDomParse(html);                                                                   // 4782
                if ($(dom).length == 1)                                                                                // 4783
                {                                                                                                      // 4784
                    if ($(dom)[0].nodeName.toLowerCase() == "script")                                                  // 4785
                    {                                                                                                  // 4786
                        return $(dom).html();                                                                          // 4787
                                                                                                                       // 4788
                    }                                                                                                  // 4789
                }                                                                                                      // 4790
                                                                                                                       // 4791
                return html;                                                                                           // 4792
            };                                                                                                         // 4793
                                                                                                                       // 4794
            html = strip_script(html);                                                                                 // 4795
                                                                                                                       // 4796
            return html;                                                                                               // 4797
        },                                                                                                             // 4798
                                                                                                                       // 4799
        /**                                                                                                            // 4800
         * @extension_point                                                                                            // 4801
         *                                                                                                             // 4802
         * @param cacheKey                                                                                             // 4803
         * @param model                                                                                                // 4804
         * @param callback                                                                                             // 4805
         */                                                                                                            // 4806
        doExecute: function(cacheKey, model, callback)                                                                 // 4807
        {                                                                                                              // 4808
                                                                                                                       // 4809
        },                                                                                                             // 4810
                                                                                                                       // 4811
        /**                                                                                                            // 4812
         * Hands back the expected file extension for templates loaded via URI.                                        // 4813
         *                                                                                                             // 4814
         * @return {String}                                                                                            // 4815
         */                                                                                                            // 4816
        fileExtension: function() {                                                                                    // 4817
            return "html";                                                                                             // 4818
        },                                                                                                             // 4819
                                                                                                                       // 4820
        /**                                                                                                            // 4821
         * Hands back the list of associated script tag types for templates loaded from the DOM.                       // 4822
         *                                                                                                             // 4823
         * @return {Array}                                                                                             // 4824
         */                                                                                                            // 4825
        supportedMimetypes: function()                                                                                 // 4826
        {                                                                                                              // 4827
            return [];                                                                                                 // 4828
        },                                                                                                             // 4829
                                                                                                                       // 4830
        /**                                                                                                            // 4831
         * Determines whether an existing template is already in cache.                                                // 4832
         *                                                                                                             // 4833
         * @param cacheKey                                                                                             // 4834
         */                                                                                                            // 4835
        isCached: function(cacheKey)                                                                                   // 4836
        {                                                                                                              // 4837
                                                                                                                       // 4838
        }                                                                                                              // 4839
                                                                                                                       // 4840
    });                                                                                                                // 4841
                                                                                                                       // 4842
})(jQuery);(function($)                                                                                                // 4843
{                                                                                                                      // 4844
    Alpaca.JQueryTemplateEngine = Alpaca.AbstractTemplateEngine.extend(                                                // 4845
    {                                                                                                                  // 4846
        fileExtension: function() {                                                                                    // 4847
            return "html";                                                                                             // 4848
        },                                                                                                             // 4849
                                                                                                                       // 4850
        supportedMimetypes: function()                                                                                 // 4851
        {                                                                                                              // 4852
            return [                                                                                                   // 4853
                "text/x-jquery-template",                                                                              // 4854
                "text/x-jquery-tmpl"                                                                                   // 4855
            ];                                                                                                         // 4856
        },                                                                                                             // 4857
                                                                                                                       // 4858
        doCompile: function(cacheKey, html, callback)                                                                  // 4859
        {                                                                                                              // 4860
            try                                                                                                        // 4861
            {                                                                                                          // 4862
                $.template(cacheKey, html);                                                                            // 4863
            }                                                                                                          // 4864
            catch (e)                                                                                                  // 4865
            {                                                                                                          // 4866
                callback(e);                                                                                           // 4867
                return;                                                                                                // 4868
            }                                                                                                          // 4869
                                                                                                                       // 4870
            Alpaca.TemplateCache[cacheKey] = html;                                                                     // 4871
                                                                                                                       // 4872
            callback();                                                                                                // 4873
        },                                                                                                             // 4874
                                                                                                                       // 4875
        doExecute: function(cacheKey, model, callback)                                                                 // 4876
        {                                                                                                              // 4877
            var self = this;                                                                                           // 4878
                                                                                                                       // 4879
            // render template                                                                                         // 4880
            var html = null;                                                                                           // 4881
            try                                                                                                        // 4882
            {                                                                                                          // 4883
                var _html = $.tmpl(cacheKey, model);                                                                   // 4884
                _html = _html.outerHTML();                                                                             // 4885
                                                                                                                       // 4886
                // strip out the _tmplitem attribute if it is sticking around anywhere                                 // 4887
                var i = -1;                                                                                            // 4888
                do                                                                                                     // 4889
                {                                                                                                      // 4890
                    i = _html.indexOf("_tmplitem=");                                                                   // 4891
                    if (i > -1)                                                                                        // 4892
                    {                                                                                                  // 4893
                        var j = _html.indexOf(" ", i);                                                                 // 4894
                        if (j == -1)                                                                                   // 4895
                        {                                                                                              // 4896
                            j = _html.indexOf(">", i);                                                                 // 4897
                        }                                                                                              // 4898
                        if (j == -1)                                                                                   // 4899
                        {                                                                                              // 4900
                            // make sure we don't wander off into an infinite loop                                     // 4901
                            callback({                                                                                 // 4902
                                "message": "Should have found closing whitespace or '>' for _tmplitem attribute"       // 4903
                            });                                                                                        // 4904
                            return;                                                                                    // 4905
                        }                                                                                              // 4906
                                                                                                                       // 4907
                        _html = _html.substring(0, i) + _html.substring(j);                                            // 4908
                    }                                                                                                  // 4909
                }                                                                                                      // 4910
                while (i > -1);                                                                                        // 4911
                                                                                                                       // 4912
                // convert back to dom safely (IE bug resistant)                                                       // 4913
                html = Alpaca.safeDomParse(_html);                                                                     // 4914
            }                                                                                                          // 4915
            catch (e)                                                                                                  // 4916
            {                                                                                                          // 4917
                callback({                                                                                             // 4918
                    "message": e.message                                                                               // 4919
                });                                                                                                    // 4920
                                                                                                                       // 4921
                return null;                                                                                           // 4922
            }                                                                                                          // 4923
                                                                                                                       // 4924
            return html;                                                                                               // 4925
        },                                                                                                             // 4926
                                                                                                                       // 4927
        isCached: function(cacheKey)                                                                                   // 4928
        {                                                                                                              // 4929
            return (Alpaca.TemplateCache[cacheKey] ? true : false);                                                    // 4930
        }                                                                                                              // 4931
                                                                                                                       // 4932
    });                                                                                                                // 4933
                                                                                                                       // 4934
    // auto register                                                                                                   // 4935
    Alpaca.TemplateEngineRegistry.register("tmpl", new Alpaca.JQueryTemplateEngine("tmpl"));                           // 4936
                                                                                                                       // 4937
})(jQuery);(function($)                                                                                                // 4938
{                                                                                                                      // 4939
    Alpaca.EJSTemplateEngine = Alpaca.AbstractTemplateEngine.extend(                                                   // 4940
    {                                                                                                                  // 4941
        fileExtension: function() {                                                                                    // 4942
            return "ejs";                                                                                              // 4943
        },                                                                                                             // 4944
                                                                                                                       // 4945
        supportedMimetypes: function()                                                                                 // 4946
        {                                                                                                              // 4947
            return [                                                                                                   // 4948
                "text/x-ejs-template",                                                                                 // 4949
                "text/x-ejs-tmpl"                                                                                      // 4950
            ];                                                                                                         // 4951
        },                                                                                                             // 4952
                                                                                                                       // 4953
        doCompile: function(cacheKey, html, callback)                                                                  // 4954
        {                                                                                                              // 4955
            var ejs = null;                                                                                            // 4956
            try                                                                                                        // 4957
            {                                                                                                          // 4958
                ejs = new EJS({                                                                                        // 4959
                    name: cacheKey,                                                                                    // 4960
                    text: html                                                                                         // 4961
                });                                                                                                    // 4962
            }                                                                                                          // 4963
            catch (e)                                                                                                  // 4964
            {                                                                                                          // 4965
                callback(e);                                                                                           // 4966
                return;                                                                                                // 4967
            }                                                                                                          // 4968
                                                                                                                       // 4969
            Alpaca.TemplateCache[cacheKey] = ejs;                                                                      // 4970
                                                                                                                       // 4971
            callback();                                                                                                // 4972
        },                                                                                                             // 4973
                                                                                                                       // 4974
        doExecute: function(cacheKey, model, callback)                                                                 // 4975
        {                                                                                                              // 4976
            var ejs = Alpaca.TemplateCache[cacheKey];                                                                  // 4977
                                                                                                                       // 4978
            // render template                                                                                         // 4979
            var html = null;                                                                                           // 4980
            try                                                                                                        // 4981
            {                                                                                                          // 4982
                html = ejs.render(model);                                                                              // 4983
            }                                                                                                          // 4984
            catch (e)                                                                                                  // 4985
            {                                                                                                          // 4986
                callback(e);                                                                                           // 4987
                return null;                                                                                           // 4988
            }                                                                                                          // 4989
                                                                                                                       // 4990
            return html;                                                                                               // 4991
        },                                                                                                             // 4992
                                                                                                                       // 4993
        isCached: function(cacheKey)                                                                                   // 4994
        {                                                                                                              // 4995
            return (Alpaca.TemplateCache[cacheKey] ? true : false);                                                    // 4996
        }                                                                                                              // 4997
                                                                                                                       // 4998
    });                                                                                                                // 4999
                                                                                                                       // 5000
    // auto register                                                                                                   // 5001
    Alpaca.TemplateEngineRegistry.register("ejs", new Alpaca.EJSTemplateEngine("ejs"));                                // 5002
                                                                                                                       // 5003
})(jQuery);(function($)                                                                                                // 5004
{                                                                                                                      // 5005
    Alpaca.HandlebarsTemplateEngine = Alpaca.AbstractTemplateEngine.extend(                                            // 5006
    {                                                                                                                  // 5007
        fileExtension: function() {                                                                                    // 5008
            return "html";                                                                                             // 5009
        },                                                                                                             // 5010
                                                                                                                       // 5011
        supportedMimetypes: function()                                                                                 // 5012
        {                                                                                                              // 5013
            return [                                                                                                   // 5014
                "text/x-handlebars-template",                                                                          // 5015
                "text/x-handlebars-tmpl"                                                                               // 5016
            ];                                                                                                         // 5017
        },                                                                                                             // 5018
                                                                                                                       // 5019
        doCompile: function(cacheKey, html, callback)                                                                  // 5020
        {                                                                                                              // 5021
            var template = null;                                                                                       // 5022
            try                                                                                                        // 5023
            {                                                                                                          // 5024
                template = Handlebars.compile(html);                                                                   // 5025
            }                                                                                                          // 5026
            catch (e)                                                                                                  // 5027
            {                                                                                                          // 5028
                callback(e);                                                                                           // 5029
                return;                                                                                                // 5030
            }                                                                                                          // 5031
                                                                                                                       // 5032
            Alpaca.TemplateCache[cacheKey] = template;                                                                 // 5033
                                                                                                                       // 5034
            callback();                                                                                                // 5035
        },                                                                                                             // 5036
                                                                                                                       // 5037
        doExecute: function(cacheKey, model, callback)                                                                 // 5038
        {                                                                                                              // 5039
            var template = Alpaca.TemplateCache[cacheKey];                                                             // 5040
                                                                                                                       // 5041
            // render template                                                                                         // 5042
            var html = null;                                                                                           // 5043
            try                                                                                                        // 5044
            {                                                                                                          // 5045
                html = template(model);                                                                                // 5046
            }                                                                                                          // 5047
            catch (e)                                                                                                  // 5048
            {                                                                                                          // 5049
                callback(e);                                                                                           // 5050
                return null;                                                                                           // 5051
            }                                                                                                          // 5052
                                                                                                                       // 5053
            return html;                                                                                               // 5054
        },                                                                                                             // 5055
                                                                                                                       // 5056
        isCached: function(cacheKey)                                                                                   // 5057
        {                                                                                                              // 5058
            return (Alpaca.TemplateCache[cacheKey] ? true : false);                                                    // 5059
        }                                                                                                              // 5060
                                                                                                                       // 5061
    });                                                                                                                // 5062
                                                                                                                       // 5063
    // auto register                                                                                                   // 5064
    Alpaca.TemplateEngineRegistry.register("handlebars", new Alpaca.HandlebarsTemplateEngine("handlebars"));           // 5065
                                                                                                                       // 5066
})(jQuery);/**                                                                                                         // 5067
 * Defines the base class implementation for views.  All views in Alpaca ultimately extend this form.                  // 5068
 * This provides the ideal place for any global overrides of view templates, message bundles or other settings.        // 5069
 */                                                                                                                    // 5070
(function($) {                                                                                                         // 5071
                                                                                                                       // 5072
    var Alpaca = $.alpaca;                                                                                             // 5073
                                                                                                                       // 5074
    Alpaca.styleInjections = {};                                                                                       // 5075
                                                                                                                       // 5076
    Alpaca.registerView({                                                                                              // 5077
        "id": "VIEW_BASE",                                                                                             // 5078
        "title": "Abstract base view",                                                                                 // 5079
        "description": "Foundation view which provides an abstract view from which all other views extend.",           // 5080
        "messages": {                                                                                                  // 5081
            "countries": {                                                                                             // 5082
                "afg":"Afghanistan",                                                                                   // 5083
                "ala":"Aland Islands",                                                                                 // 5084
                "alb":"Albania",                                                                                       // 5085
                "dza":"Algeria",                                                                                       // 5086
                "asm":"American Samoa",                                                                                // 5087
                "and":"Andorra",                                                                                       // 5088
                "ago":"Angola",                                                                                        // 5089
                "aia":"Anguilla",                                                                                      // 5090
                "ata":"Antarctica",                                                                                    // 5091
                "atg":"Antigua and Barbuda",                                                                           // 5092
                "arg":"Argentina",                                                                                     // 5093
                "arm":"Armenia",                                                                                       // 5094
                "abw":"Aruba",                                                                                         // 5095
                "aus":"Australia",                                                                                     // 5096
                "aut":"Austria",                                                                                       // 5097
                "aze":"Azerbaijan",                                                                                    // 5098
                "bhs":"Bahamas",                                                                                       // 5099
                "bhr":"Bahrain",                                                                                       // 5100
                "bgd":"Bangladesh",                                                                                    // 5101
                "brb":"Barbados",                                                                                      // 5102
                "blr":"Belarus",                                                                                       // 5103
                "bel":"Belgium",                                                                                       // 5104
                "blz":"Belize",                                                                                        // 5105
                "ben":"Benin",                                                                                         // 5106
                "bmu":"Bermuda",                                                                                       // 5107
                "btn":"Bhutan",                                                                                        // 5108
                "bol":"Bolivia",                                                                                       // 5109
                "bih":"Bosnia and Herzegovina",                                                                        // 5110
                "bwa":"Botswana",                                                                                      // 5111
                "bvt":"Bouvet Island",                                                                                 // 5112
                "bra":"Brazil",                                                                                        // 5113
                "iot":"British Indian Ocean Territory",                                                                // 5114
                "brn":"Brunei Darussalam",                                                                             // 5115
                "bgr":"Bulgaria",                                                                                      // 5116
                "bfa":"Burkina Faso",                                                                                  // 5117
                "bdi":"Burundi",                                                                                       // 5118
                "khm":"Cambodia",                                                                                      // 5119
                "cmr":"Cameroon",                                                                                      // 5120
                "can":"Canada",                                                                                        // 5121
                "cpv":"Cape Verde",                                                                                    // 5122
                "cym":"Cayman Islands",                                                                                // 5123
                "caf":"Central African Republic",                                                                      // 5124
                "tcd":"Chad",                                                                                          // 5125
                "chl":"Chile",                                                                                         // 5126
                "chn":"China",                                                                                         // 5127
                "cxr":"Christmas Island",                                                                              // 5128
                "cck":"Cocos (Keeling), Islands",                                                                      // 5129
                "col":"Colombia",                                                                                      // 5130
                "com":"Comoros",                                                                                       // 5131
                "cog":"Congo",                                                                                         // 5132
                "cod":"Congo, the Democratic Republic of the",                                                         // 5133
                "cok":"Cook Islands",                                                                                  // 5134
                "cri":"Costa Rica",                                                                                    // 5135
                "hrv":"Croatia",                                                                                       // 5136
                "cub":"Cuba",                                                                                          // 5137
                "cyp":"Cyprus",                                                                                        // 5138
                "cze":"Czech Republic",                                                                                // 5139
                "civ":"Cote d'Ivoire",                                                                                 // 5140
                "dnk":"Denmark",                                                                                       // 5141
                "dji":"Djibouti",                                                                                      // 5142
                "dma":"Dominica",                                                                                      // 5143
                "dom":"Dominican Republic",                                                                            // 5144
                "ecu":"Ecuador",                                                                                       // 5145
                "egy":"Egypt",                                                                                         // 5146
                "slv":"El Salvador",                                                                                   // 5147
                "gnq":"Equatorial Guinea",                                                                             // 5148
                "eri":"Eritrea",                                                                                       // 5149
                "est":"Estonia",                                                                                       // 5150
                "eth":"Ethiopia",                                                                                      // 5151
                "flk":"Falkland Islands (Malvinas),",                                                                  // 5152
                "fro":"Faroe Islands",                                                                                 // 5153
                "fji":"Fiji",                                                                                          // 5154
                "fin":"Finland",                                                                                       // 5155
                "fra":"France",                                                                                        // 5156
                "guf":"French Guiana",                                                                                 // 5157
                "pyf":"French Polynesia",                                                                              // 5158
                "atf":"French Southern Territories",                                                                   // 5159
                "gab":"Gabon",                                                                                         // 5160
                "gmb":"Gambia",                                                                                        // 5161
                "geo":"Georgia",                                                                                       // 5162
                "deu":"Germany",                                                                                       // 5163
                "gha":"Ghana",                                                                                         // 5164
                "gib":"Gibraltar",                                                                                     // 5165
                "grc":"Greece",                                                                                        // 5166
                "grl":"Greenland",                                                                                     // 5167
                "grd":"Grenada",                                                                                       // 5168
                "glp":"Guadeloupe",                                                                                    // 5169
                "gum":"Guam",                                                                                          // 5170
                "gtm":"Guatemala",                                                                                     // 5171
                "ggy":"Guernsey",                                                                                      // 5172
                "gin":"Guinea",                                                                                        // 5173
                "gnb":"Guinea-Bissau",                                                                                 // 5174
                "guy":"Guyana",                                                                                        // 5175
                "hti":"Haiti",                                                                                         // 5176
                "hmd":"Heard Island and McDonald Islands",                                                             // 5177
                "vat":"Holy See (Vatican City State),",                                                                // 5178
                "hnd":"Honduras",                                                                                      // 5179
                "hkg":"Hong Kong",                                                                                     // 5180
                "hun":"Hungary",                                                                                       // 5181
                "isl":"Iceland",                                                                                       // 5182
                "ind":"India",                                                                                         // 5183
                "idn":"Indonesia",                                                                                     // 5184
                "irn":"Iran, Islamic Republic of",                                                                     // 5185
                "irq":"Iraq",                                                                                          // 5186
                "irl":"Ireland",                                                                                       // 5187
                "imn":"Isle of Man",                                                                                   // 5188
                "isr":"Israel",                                                                                        // 5189
                "ita":"Italy",                                                                                         // 5190
                "jam":"Jamaica",                                                                                       // 5191
                "jpn":"Japan",                                                                                         // 5192
                "jey":"Jersey",                                                                                        // 5193
                "jor":"Jordan",                                                                                        // 5194
                "kaz":"Kazakhstan",                                                                                    // 5195
                "ken":"Kenya",                                                                                         // 5196
                "kir":"Kiribati",                                                                                      // 5197
                "prk":"Korea, Democratic People's Republic of",                                                        // 5198
                "kor":"Korea, Republic of",                                                                            // 5199
                "kwt":"Kuwait",                                                                                        // 5200
                "kgz":"Kyrgyzstan",                                                                                    // 5201
                "lao":"Lao People's Democratic Republic",                                                              // 5202
                "lva":"Latvia",                                                                                        // 5203
                "lbn":"Lebanon",                                                                                       // 5204
                "lso":"Lesotho",                                                                                       // 5205
                "lbr":"Liberia",                                                                                       // 5206
                "lby":"Libyan Arab Jamahiriya",                                                                        // 5207
                "lie":"Liechtenstein",                                                                                 // 5208
                "ltu":"Lithuania",                                                                                     // 5209
                "lux":"Luxembourg",                                                                                    // 5210
                "mac":"Macao",                                                                                         // 5211
                "mkd":"Macedonia, the former Yugoslav Republic of",                                                    // 5212
                "mdg":"Madagascar",                                                                                    // 5213
                "mwi":"Malawi",                                                                                        // 5214
                "mys":"Malaysia",                                                                                      // 5215
                "mdv":"Maldives",                                                                                      // 5216
                "mli":"Mali",                                                                                          // 5217
                "mlt":"Malta",                                                                                         // 5218
                "mhl":"Marshall Islands",                                                                              // 5219
                "mtq":"Martinique",                                                                                    // 5220
                "mrt":"Mauritania",                                                                                    // 5221
                "mus":"Mauritius",                                                                                     // 5222
                "myt":"Mayotte",                                                                                       // 5223
                "mex":"Mexico",                                                                                        // 5224
                "fsm":"Micronesia, Federated States of",                                                               // 5225
                "mda":"Moldova, Republic of",                                                                          // 5226
                "mco":"Monaco",                                                                                        // 5227
                "mng":"Mongolia",                                                                                      // 5228
                "mne":"Montenegro",                                                                                    // 5229
                "msr":"Montserrat",                                                                                    // 5230
                "mar":"Morocco",                                                                                       // 5231
                "moz":"Mozambique",                                                                                    // 5232
                "mmr":"Myanmar",                                                                                       // 5233
                "nam":"Namibia",                                                                                       // 5234
                "nru":"Nauru",                                                                                         // 5235
                "npl":"Nepal",                                                                                         // 5236
                "nld":"Netherlands",                                                                                   // 5237
                "ant":"Netherlands Antilles",                                                                          // 5238
                "ncl":"New Caledonia",                                                                                 // 5239
                "nzl":"New Zealand",                                                                                   // 5240
                "nic":"Nicaragua",                                                                                     // 5241
                "ner":"Niger",                                                                                         // 5242
                "nga":"Nigeria",                                                                                       // 5243
                "niu":"Niue",                                                                                          // 5244
                "nfk":"Norfolk Island",                                                                                // 5245
                "mnp":"Northern Mariana Islands",                                                                      // 5246
                "nor":"Norway",                                                                                        // 5247
                "omn":"Oman",                                                                                          // 5248
                "pak":"Pakistan",                                                                                      // 5249
                "plw":"Palau",                                                                                         // 5250
                "pse":"Palestinian Territory, Occupied",                                                               // 5251
                "pan":"Panama",                                                                                        // 5252
                "png":"Papua New Guinea",                                                                              // 5253
                "pry":"Paraguay",                                                                                      // 5254
                "per":"Peru",                                                                                          // 5255
                "phl":"Philippines",                                                                                   // 5256
                "pcn":"Pitcairn",                                                                                      // 5257
                "pol":"Poland",                                                                                        // 5258
                "prt":"Portugal",                                                                                      // 5259
                "pri":"Puerto Rico",                                                                                   // 5260
                "qat":"Qatar",                                                                                         // 5261
                "rou":"Romania",                                                                                       // 5262
                "rus":"Russian Federation",                                                                            // 5263
                "rwa":"Rwanda",                                                                                        // 5264
                "reu":"Reunion",                                                                                       // 5265
                "blm":"Saint Barthelemy",                                                                              // 5266
                "shn":"Saint Helena",                                                                                  // 5267
                "kna":"Saint Kitts and Nevis",                                                                         // 5268
                "lca":"Saint Lucia",                                                                                   // 5269
                "maf":"Saint Martin (French part)",                                                                    // 5270
                "spm":"Saint Pierre and Miquelon",                                                                     // 5271
                "vct":"Saint Vincent and the Grenadines",                                                              // 5272
                "wsm":"Samoa",                                                                                         // 5273
                "smr":"San Marino",                                                                                    // 5274
                "stp":"Sao Tome and Principe",                                                                         // 5275
                "sau":"Saudi Arabia",                                                                                  // 5276
                "sen":"Senegal",                                                                                       // 5277
                "srb":"Serbia",                                                                                        // 5278
                "syc":"Seychelles",                                                                                    // 5279
                "sle":"Sierra Leone",                                                                                  // 5280
                "sgp":"Singapore",                                                                                     // 5281
                "svk":"Slovakia",                                                                                      // 5282
                "svn":"Slovenia",                                                                                      // 5283
                "slb":"Solomon Islands",                                                                               // 5284
                "som":"Somalia",                                                                                       // 5285
                "zaf":"South Africa",                                                                                  // 5286
                "sgs":"South Georgia and the South Sandwich Islands",                                                  // 5287
                "esp":"Spain",                                                                                         // 5288
                "lka":"Sri Lanka",                                                                                     // 5289
                "sdn":"Sudan",                                                                                         // 5290
                "sur":"Suriname",                                                                                      // 5291
                "sjm":"Svalbard and Jan Mayen",                                                                        // 5292
                "swz":"Swaziland",                                                                                     // 5293
                "swe":"Sweden",                                                                                        // 5294
                "che":"Switzerland",                                                                                   // 5295
                "syr":"Syrian Arab Republic",                                                                          // 5296
                "twn":"Taiwan, Province of China",                                                                     // 5297
                "tjk":"Tajikistan",                                                                                    // 5298
                "tza":"Tanzania, United Republic of",                                                                  // 5299
                "tha":"Thailand",                                                                                      // 5300
                "tls":"Timor-Leste",                                                                                   // 5301
                "tgo":"Togo",                                                                                          // 5302
                "tkl":"Tokelau",                                                                                       // 5303
                "ton":"Tonga",                                                                                         // 5304
                "tto":"Trinidad and Tobago",                                                                           // 5305
                "tun":"Tunisia",                                                                                       // 5306
                "tur":"Turkey",                                                                                        // 5307
                "tkm":"Turkmenistan",                                                                                  // 5308
                "tca":"Turks and Caicos Islands",                                                                      // 5309
                "tuv":"Tuvalu",                                                                                        // 5310
                "uga":"Uganda",                                                                                        // 5311
                "ukr":"Ukraine",                                                                                       // 5312
                "are":"United Arab Emirates",                                                                          // 5313
                "gbr":"United Kingdom",                                                                                // 5314
                "usa":"United States",                                                                                 // 5315
                "umi":"United States Minor Outlying Islands",                                                          // 5316
                "ury":"Uruguay",                                                                                       // 5317
                "uzb":"Uzbekistan",                                                                                    // 5318
                "vut":"Vanuatu",                                                                                       // 5319
                "ven":"Venezuela",                                                                                     // 5320
                "vnm":"Viet Nam",                                                                                      // 5321
                "vgb":"Virgin Islands, British",                                                                       // 5322
                "vir":"Virgin Islands, U.S.",                                                                          // 5323
                "wlf":"Wallis and Futuna",                                                                             // 5324
                "esh":"Western Sahara",                                                                                // 5325
                "yem":"Yemen",                                                                                         // 5326
                "zmb":"Zambia",                                                                                        // 5327
                "zwe":"Zimbabwe"                                                                                       // 5328
            },                                                                                                         // 5329
            "empty": "",                                                                                               // 5330
            "required": "This field is required",                                                                      // 5331
            "valid": "",                                                                                               // 5332
            "invalid": "This field is invalid",                                                                        // 5333
            "months": ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            "timeUnits": { SECOND: "seconds", MINUTE: "minutes", HOUR: "hours", DAY: "days", MONTH: "months", YEAR: "years" }
        }                                                                                                              // 5336
    });                                                                                                                // 5337
                                                                                                                       // 5338
})(jQuery);(function($) {                                                                                              // 5339
                                                                                                                       // 5340
    var Alpaca = $.alpaca;                                                                                             // 5341
                                                                                                                       // 5342
    Alpaca.styleInjections = {};                                                                                       // 5343
                                                                                                                       // 5344
    Alpaca.registerView({                                                                                              // 5345
        "id": "VIEW_WEB_DISPLAY",                                                                                      // 5346
        "parent": "VIEW_BASE",                                                                                         // 5347
        "title": "Default Web Display View",                                                                           // 5348
        "description":"Default web edit view which goes though field hierarchy.",                                      // 5349
        "type": "view",                                                                                                // 5350
        "platform":"web",                                                                                              // 5351
        "displayReadonly":true,                                                                                        // 5352
        "templates": {                                                                                                 // 5353
            "controlField": '<div class="alpaca-data-container">{{if options.label}}<div class="alpaca-data-label">${options.label}</div>{{/if}}<div class="alpaca-data">&nbsp;${data}</div></div>',
            "fieldSetOuterEl": '<div class="ui-widget ui-widget-content">{{html this.html}}</div>',                    // 5355
            "fieldSetLegend": '{{if options.label}}<div class="{{if options.labelClass}}${options.labelClass}{{/if}}">${options.label}</div>{{/if}}',
            "fieldSetItemsContainer": '<div>{{html this.html}}</div>',                                                 // 5357
            "fieldSet": '{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetOuterEl",true)}}{{html Alpaca.fieldTemplate(this,"fieldSetLegend")}}{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetItemsContainer",true)}}{{/wrap}}{{/wrap}}',
                                                                                                                       // 5359
            "controlFieldContainer": '<div>{{html this.html}}</div>',                                                  // 5360
                                                                                                                       // 5361
            "arrayToolbar": '',                                                                                        // 5362
            "arrayItemToolbar": ''                                                                                     // 5363
}                                                                                                                      // 5364
    });                                                                                                                // 5365
                                                                                                                       // 5366
    Alpaca.registerView({                                                                                              // 5367
        "id":"VIEW_WEB_EDIT",                                                                                          // 5368
        "parent": "VIEW_BASE",                                                                                         // 5369
        "title":"Default Web Edit View",                                                                               // 5370
        "description":"Default web edit view which goes though field hierarchy.",                                      // 5371
        "type":"edit",                                                                                                 // 5372
        "platform": "web",                                                                                             // 5373
        "displayReadonly":true,                                                                                        // 5374
        "templates": {                                                                                                 // 5375
            // Templates for control fields                                                                            // 5376
            "controlFieldOuterEl": '<span>{{html this.html}}</span>',                                                  // 5377
            "controlFieldMessage": '<div><span class="ui-icon ui-icon-alert"></span><span class="alpaca-controlfield-message-text">${message}</span></div>',
            "controlFieldLabel": '{{if options.label}}<div class="{{if options.labelClass}}${options.labelClass}{{/if}}"><div>${options.label}</div></div>{{/if}}',
            "controlFieldHelper": '{{if options.helper}}<div class="{{if options.helperClass}}${options.helperClass}{{/if}}"><span class="ui-icon ui-icon-info"></span><span class="alpaca-controlfield-helper-text">${options.helper}</span></div>{{/if}}',
            "controlFieldContainer": '<div>{{html this.html}}</div>',                                                  // 5381
            "controlField": '{{wrap(null, {}) Alpaca.fieldTemplate(this,"controlFieldOuterEl",true)}}{{html Alpaca.fieldTemplate(this,"controlFieldLabel")}}{{wrap(null, {}) Alpaca.fieldTemplate(this,"controlFieldContainer",true)}}{{html Alpaca.fieldTemplate(this,"controlFieldHelper")}}{{/wrap}}{{/wrap}}',
            // Templates for container fields                                                                          // 5383
            "fieldSetOuterEl": '<fieldset>{{html this.html}}</fieldset>',                                              // 5384
            "fieldSetMessage": '<div><span class="ui-icon ui-icon-alert" style="float: left; margin-right: .3em;"></span><span>${message}</span></div>',
            "fieldSetLegend": '{{if options.label}}<legend class="{{if options.labelClass}}${options.labelClass}{{/if}}">${options.label}</legend>{{/if}}',
            "fieldSetHelper": '{{if options.helper}}<div class="{{if options.helperClass}}${options.helperClass}{{/if}}">${options.helper}</div>{{/if}}',
            "fieldSetItemsContainer": '<div>{{html this.html}}</div>',                                                 // 5388
            "fieldSet": '{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetOuterEl",true)}}{{html Alpaca.fieldTemplate(this,"fieldSetLegend")}}{{html Alpaca.fieldTemplate(this,"fieldSetHelper")}}{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetItemsContainer",true)}}{{/wrap}}{{/wrap}}',
            "fieldSetItemContainer": '<div></div>',                                                                    // 5390
            // Templates for form                                                                                      // 5391
            "formFieldsContainer": '<div>{{html this.html}}</div>',                                                    // 5392
            "formButtonsContainer": '<div>{{if options.buttons}}{{each(k,v) options.buttons}}<button data-key="${k}" class="alpaca-form-button alpaca-form-button-${k}" {{each(k1,v1) v}}${k1}="${v1}"{{/each}}>${v.value}</button>{{/each}}{{/if}}</div>',
            "form": '<form>{{html Alpaca.fieldTemplate(this,"formFieldsContainer")}}{{html Alpaca.fieldTemplate(this,"formButtonsContainer")}}</form>',
            // Templates for wizard                                                                                    // 5395
            "wizardStep" : '<div class="alpaca-clear"></div>',                                                         // 5396
            "wizardNavBar" : '<div></div>',                                                                            // 5397
            "wizardPreButton" : '<button>Back</button>',                                                               // 5398
            "wizardNextButton" : '<button>Next</button>',                                                              // 5399
            "wizardDoneButton" : '<button>Done</button>',                                                              // 5400
            "wizardStatusBar" : '<ol id="${id}">{{each(i,v) titles}}<li id="stepDesc${i}"><div><strong><span>${v.title}</span>${v.description}</strong></div></li>{{/each}}</ol>'
        }                                                                                                              // 5402
    });                                                                                                                // 5403
                                                                                                                       // 5404
    Alpaca.registerView({                                                                                              // 5405
        "id": "VIEW_WEB_CREATE",                                                                                       // 5406
        "parent": 'VIEW_WEB_EDIT',                                                                                     // 5407
        "title": "Default Web Create View",                                                                            // 5408
        "description":"Default web create view which doesn't bind initial data.",                                      // 5409
        "type": "create",                                                                                              // 5410
        "displayReadonly":false                                                                                        // 5411
    });                                                                                                                // 5412
                                                                                                                       // 5413
})(jQuery);(function($) {                                                                                              // 5414
                                                                                                                       // 5415
    var Alpaca = $.alpaca;                                                                                             // 5416
                                                                                                                       // 5417
    var listViewTemplates = {                                                                                          // 5418
        // Templates for control fields                                                                                // 5419
        "controlFieldOuterEl": '<span class="alpaca-view-web-list">{{html this.html}}</span>',                         // 5420
        "controlFieldMessage": '<div><span class="ui-icon ui-icon-alert"></span><span class="alpaca-controlfield-message-text">${message}</span></div>',
        "controlFieldLabel": '{{if options.label}}<label for="${id}" class="{{if options.labelClass}}${options.labelClass}{{/if}}">${options.label}</label>{{/if}}',
        "controlFieldHelper": '{{if options.helper}}<div class="{{if options.helperClass}}${options.helperClass}{{/if}}"><span class="ui-icon ui-icon-info"></span><span class="alpaca-controlfield-helper-text">${options.helper}</span></div>{{/if}}',
        "controlFieldContainer": '<div>{{html this.html}}</div>',                                                      // 5424
        "controlField": '{{wrap(null, {}) Alpaca.fieldTemplate(this,"controlFieldOuterEl",true)}}{{html Alpaca.fieldTemplate(this,"controlFieldLabel")}}{{wrap(null, {}) Alpaca.fieldTemplate(this,"controlFieldContainer",true)}}{{html Alpaca.fieldTemplate(this,"controlFieldHelper")}}{{/wrap}}{{/wrap}}',
        // Templates for container fields                                                                              // 5426
        "fieldSetOuterEl": '<fieldset class="alpaca-view-web-list">{{html this.html}}</fieldset>',                     // 5427
        "fieldSetMessage": '<div><span class="ui-icon ui-icon-alert alpaca-fieldset-message-list-view"></span><span>${message}</span></div>',
        "fieldSetLegend": '{{if options.label}}<legend class="{{if options.labelClass}}${options.labelClass}{{/if}}">${options.label}</legend>{{/if}}',
        "fieldSetHelper": '{{if options.helper}}<div class="{{if options.helperClass}}${options.helperClass}{{/if}}">${options.helper}</div>{{/if}}',
        "fieldSetItemsContainer": '<ol>{{html this.html}}</ol>',                                                       // 5431
        "fieldSet": '{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetOuterEl",true)}}{{html Alpaca.fieldTemplate(this,"fieldSetLegend")}}{{html Alpaca.fieldTemplate(this,"fieldSetHelper")}}{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetItemsContainer",true)}}{{/wrap}}{{/wrap}}',
        "fieldSetItemContainer": '<li style="list-style:none;"></li>',                                                 // 5433
                                                                                                                       // 5434
        "itemLabel" : '{{if options.itemLabel}}<label for="${id}" class="alpaca-controlfield-label alpaca-controlfield-label-list-view"><span class="alpaca-controlfield-item-label-list-view">${options.itemLabel}{{if index}} <span class="alpaca-item-label-counter">${index}</span></span>{{/if}}</label>{{/if}}'
    };                                                                                                                 // 5436
                                                                                                                       // 5437
    Alpaca.registerView({                                                                                              // 5438
        "id": "VIEW_WEB_DISPLAY_LIST",                                                                                 // 5439
        "parent": 'VIEW_WEB_DISPLAY',                                                                                  // 5440
        "title": "Web Display View List Style",                                                                        // 5441
        "description": "Web display view based on list styles.",                                                       // 5442
        "legendStyle": "link",                                                                                         // 5443
        "templates": listViewTemplates,                                                                                // 5444
        "styles": {                                                                                                    // 5445
        },                                                                                                             // 5446
        "fields": {                                                                                                    // 5447
            "/": {                                                                                                     // 5448
                "templates": {                                                                                         // 5449
                    // Templates for container fields                                                                  // 5450
                    "fieldSetItemsContainer": '<ol class="alpaca-fieldset-itemscontainer-list-view-top">{{html this.html}}</ol>',
                    "fieldSetItemContainer": '<li class="alpaca-fieldset-itemcontainer-list-view-top"></li>'           // 5452
                }                                                                                                      // 5453
            }                                                                                                          // 5454
        }                                                                                                              // 5455
    });                                                                                                                // 5456
                                                                                                                       // 5457
    Alpaca.registerView({                                                                                              // 5458
        "id": "VIEW_WEB_EDIT_LIST",                                                                                    // 5459
        "parent": 'VIEW_WEB_EDIT',                                                                                     // 5460
        "title": "Web Edit View List Style",                                                                           // 5461
        "description": "Web edit view based on list styles.",                                                          // 5462
        "legendStyle": "link",                                                                                         // 5463
        "templates": listViewTemplates,                                                                                // 5464
        "styles": {                                                                                                    // 5465
        },                                                                                                             // 5466
        "fields": {                                                                                                    // 5467
            "/": {                                                                                                     // 5468
                "templates": {                                                                                         // 5469
                    // Templates for container fields                                                                  // 5470
                    "fieldSetItemsContainer": '<ol class="alpaca-fieldset-itemscontainer-list-view-top">{{html this.html}}</ol>',
                    "fieldSetItemContainer": '<li class="alpaca-fieldset-itemcontainer-list-view-top"></li>'           // 5472
                }                                                                                                      // 5473
            }                                                                                                          // 5474
        }                                                                                                              // 5475
    });                                                                                                                // 5476
                                                                                                                       // 5477
    Alpaca.registerView({                                                                                              // 5478
        "id": "VIEW_WEB_CREATE_LIST",                                                                                  // 5479
        "parent": 'VIEW_WEB_CREATE',                                                                                   // 5480
        "title": "Web Create View List Style",                                                                         // 5481
        "description": "Web create view based on list styles.",                                                        // 5482
        "legendStyle": "link",                                                                                         // 5483
        "templates": listViewTemplates,                                                                                // 5484
        "styles": {                                                                                                    // 5485
        },                                                                                                             // 5486
        "fields": {                                                                                                    // 5487
            "/": {                                                                                                     // 5488
                "templates": {                                                                                         // 5489
                    // Templates for container fields                                                                  // 5490
                    "fieldSetItemsContainer": '<ol class="alpaca-fieldset-itemscontainer-list-view-top">{{html this.html}}</ol>',
                    "fieldSetItemContainer": '<li class="alpaca-fieldset-itemcontainer-list-view-top"></li>'           // 5492
                }                                                                                                      // 5493
            }                                                                                                          // 5494
        }                                                                                                              // 5495
    });                                                                                                                // 5496
                                                                                                                       // 5497
})(jQuery);/**                                                                                                         // 5498
 * jQuery UI Theme ("jquery-ui")                                                                                       // 5499
 *                                                                                                                     // 5500
 * Defines the Alpaca theme for jQuery UI.                                                                             // 5501
 *                                                                                                                     // 5502
 * The style injector:                                                                                                 // 5503
 *                                                                                                                     // 5504
 *    jquery-ui                                                                                                        // 5505
 *                                                                                                                     // 5506
 * The views are:                                                                                                      // 5507
 *                                                                                                                     // 5508
 *    VIEW_JQUERYUI_DISPLAY                                                                                            // 5509
 *    VIEW_JQUERYUI_EDIT                                                                                               // 5510
 *    VIEW_JQUERYUI_CREATE                                                                                             // 5511
 *                                                                                                                     // 5512
 * This theme can be selected by specifying the following view:                                                        // 5513
 *                                                                                                                     // 5514
 *    {                                                                                                                // 5515
 *       "ui": "jquery-ui",                                                                                            // 5516
 *       "type": null | "create" | "edit" | "display"                                                                  // 5517
 *    }                                                                                                                // 5518
 *                                                                                                                     // 5519
 */                                                                                                                    // 5520
(function($) {                                                                                                         // 5521
                                                                                                                       // 5522
    var Alpaca = $.alpaca;                                                                                             // 5523
                                                                                                                       // 5524
    Alpaca.styleInjections["jquery-ui"] = {                                                                            // 5525
        "field" : function(targetDiv) {                                                                                // 5526
            targetDiv.addClass('ui-widget');                                                                           // 5527
        },                                                                                                             // 5528
        "required" : function(targetDiv) {                                                                             // 5529
            $('<span class="ui-icon ui-icon-star"></span>').prependTo(targetDiv);                                      // 5530
        },                                                                                                             // 5531
        "error" : function(targetDiv) {                                                                                // 5532
            targetDiv.addClass('ui-state-error');                                                                      // 5533
        },                                                                                                             // 5534
        "errorMessage" : function(targetDiv) {                                                                         // 5535
            targetDiv.addClass('ui-state-error-text');                                                                 // 5536
        },                                                                                                             // 5537
        "removeError" : function(targetDiv) {                                                                          // 5538
            targetDiv.removeClass('ui-state-error');                                                                   // 5539
        },                                                                                                             // 5540
        "container" : function(targetDiv) {                                                                            // 5541
            targetDiv.addClass('ui-widget-content');                                                                   // 5542
        },                                                                                                             // 5543
        "wizardStatusBar" : function(targetDiv) {                                                                      // 5544
            targetDiv.addClass('ui-widget-header ui-corner-all');                                                      // 5545
        },                                                                                                             // 5546
        "wizardCurrentStep" : function(targetDiv) {                                                                    // 5547
            targetDiv.addClass('ui-state-highlight ui-corner-all');                                                    // 5548
        },                                                                                                             // 5549
        "wizardUnCurrentStep" : function(targetDiv) {                                                                  // 5550
            targetDiv.removeClass('ui-state-highlight ui-corner-all');                                                 // 5551
        },                                                                                                             // 5552
        "containerExpandedIcon" : "ui-icon-circle-arrow-s",                                                            // 5553
        "containerCollapsedIcon" : "ui-icon-circle-arrow-e",                                                           // 5554
        "commonIcon" : "ui-icon",                                                                                      // 5555
        "addIcon" : "ui-icon-circle-plus",                                                                             // 5556
        "removeIcon" : "ui-icon-circle-minus",                                                                         // 5557
        "upIcon" : "ui-icon-circle-arrow-n",                                                                           // 5558
        "downIcon" : "ui-icon-circle-arrow-s",                                                                         // 5559
        "wizardPreIcon" : "ui-icon-triangle-1-w",                                                                      // 5560
        "wizardNextIcon" : "ui-icon-triangle-1-e",                                                                     // 5561
        "wizardDoneIcon" : "ui-icon-triangle-1-e",                                                                     // 5562
        "buttonBeautifier"  : function(button, iconClass, withText) {                                                  // 5563
            button.addClass("ui-button ui-widget ui-state-default ui-corner-all");                                     // 5564
            if (withText) {                                                                                            // 5565
                button.addClass("ui-button-text-icon-primary");                                                        // 5566
            } else {                                                                                                   // 5567
                button.addClass("ui-button-icon-only");                                                                // 5568
            }                                                                                                          // 5569
            var buttonText = button.html();                                                                            // 5570
            button.attr("title", buttonText);                                                                          // 5571
            button.empty().append('<span class="ui-button-icon-primary ui-icon alpaca-fieldset-legend-button ' + iconClass + '"></span><span class="ui-button-text">' + buttonText + '</span>');
            button.hover(function() {                                                                                  // 5573
                if (!button.hasClass("alpaca-fieldset-array-item-toolbar-disabled")) {                                 // 5574
                    $(this).addClass("ui-state-hover");                                                                // 5575
                }                                                                                                      // 5576
            }, function() {                                                                                            // 5577
                if (!button.hasClass("alpaca-fieldset-array-item-toolbar-disabled")) {                                 // 5578
                    $(this).removeClass("ui-state-hover");                                                             // 5579
                }                                                                                                      // 5580
            });                                                                                                        // 5581
        }                                                                                                              // 5582
    };                                                                                                                 // 5583
                                                                                                                       // 5584
    Alpaca.registerView({                                                                                              // 5585
        "id": "VIEW_JQUERYUI_DISPLAY",                                                                                 // 5586
        "parent": "VIEW_WEB_DISPLAY",                                                                                  // 5587
        "title": "Web Display View for jQuery UI",                                                                     // 5588
        "description": "Web Display View for jQuery UI",                                                               // 5589
        "style": "jquery-ui",                                                                                          // 5590
        "ui": "jquery-ui"                                                                                              // 5591
    });                                                                                                                // 5592
                                                                                                                       // 5593
    Alpaca.registerView({                                                                                              // 5594
        "id": "VIEW_JQUERYUI_EDIT",                                                                                    // 5595
        "parent": "VIEW_WEB_EDIT",                                                                                     // 5596
        "title": "Web Edit View for jQuery UI",                                                                        // 5597
        "description":"Web Edit View for jQuery UI",                                                                   // 5598
        "style": "jquery-ui",                                                                                          // 5599
        "ui": "jquery-ui"                                                                                              // 5600
    });                                                                                                                // 5601
                                                                                                                       // 5602
    Alpaca.registerView({                                                                                              // 5603
        "id": "VIEW_JQUERYUI_CREATE",                                                                                  // 5604
        "parent": 'VIEW_WEB_CREATE',                                                                                   // 5605
        "title": "Web Create View for jQuery UI",                                                                      // 5606
        "description": "Web Create View for jQuery UI",                                                                // 5607
        "style": "jquery-ui",                                                                                          // 5608
        "ui": "jquery-ui"                                                                                              // 5609
    });                                                                                                                // 5610
                                                                                                                       // 5611
    Alpaca.registerView({                                                                                              // 5612
        "id": "VIEW_JQUERYUI_EDIT_LIST",                                                                               // 5613
        "parent": 'VIEW_WEB_EDIT_LIST',                                                                                // 5614
        "title": "JQuery UI Edit View List Style",                                                                     // 5615
        "description": "JQuery UI edit view based on list styles.",                                                    // 5616
        "style": "jquery-ui",                                                                                          // 5617
        "ui": "jquery-ui"                                                                                              // 5618
    });                                                                                                                // 5619
                                                                                                                       // 5620
    Alpaca.registerView({                                                                                              // 5621
        "id": "VIEW_JQUERYUI_CREATE_LIST",                                                                             // 5622
        "parent": 'VIEW_WEB_CREATE_LIST',                                                                              // 5623
        "title": "JQuery UI Create View List Style",                                                                   // 5624
        "description": "JQuery UI create view based on list styles.",                                                  // 5625
        "style": "jquery-ui",                                                                                          // 5626
        "ui": "jquery-ui"                                                                                              // 5627
    });                                                                                                                // 5628
                                                                                                                       // 5629
                                                                                                                       // 5630
})(jQuery);/**                                                                                                         // 5631
 * jQuery Mobile Theme ("mobile")                                                                                      // 5632
 *                                                                                                                     // 5633
 * Defines the Alpaca theme for jQuery Mobile.                                                                         // 5634
 *                                                                                                                     // 5635
 * The style injector:                                                                                                 // 5636
 *                                                                                                                     // 5637
 *    mobile                                                                                                           // 5638
 *                                                                                                                     // 5639
 * The views are:                                                                                                      // 5640
 *                                                                                                                     // 5641
 *    VIEW_MOBILE_DISPLAY                                                                                              // 5642
 *    VIEW_MOBILE_EDIT                                                                                                 // 5643
 *    VIEW_MOBILE_CREATE                                                                                               // 5644
 *                                                                                                                     // 5645
 * This theme can also be selected by specifying the following view:                                                   // 5646
 *                                                                                                                     // 5647
 *    {                                                                                                                // 5648
 *       "ui": "mobile",                                                                                               // 5649
 *       "type": null | "create" | "edit" | "display"                                                                  // 5650
 *    }                                                                                                                // 5651
 *                                                                                                                     // 5652
 */(function($) {                                                                                                      // 5653
                                                                                                                       // 5654
    var Alpaca = $.alpaca;                                                                                             // 5655
                                                                                                                       // 5656
    Alpaca.styleInjections["jquery-mobile"] = {                                                                        // 5657
        "array" : function(containerElem) {                                                                            // 5658
            if (containerElem) {                                                                                       // 5659
                if (containerElem.find('[data-role="fieldcontain"]').fieldcontain) {                                   // 5660
                    containerElem.find('[data-role="fieldcontain"]').fieldcontain();                                   // 5661
                    containerElem.find('[data-role="fieldcontain"]').find("[type='radio'], [type='checkbox']").checkboxradio();
                    containerElem.find('[data-role="fieldcontain"]').find("button, [data-role='button'], [type='button'], [type='submit'], [type='reset'], [type='image']").not(".ui-nojs").button();
                    containerElem.find('[data-role="fieldcontain"]').find("input, textarea").not("[type='radio'], [type='checkbox'], button, [type='button'], [type='submit'], [type='reset'], [type='image']").textinput();
                    containerElem.find('[data-role="fieldcontain"]').find("input, select").filter("[data-role='slider'], [data-type='range']").slider();
                    containerElem.find('[data-role="fieldcontain"]').find("select:not([data-role='slider'])").selectmenu();
                    containerElem.find('[data-role="button"]').buttonMarkup();                                         // 5667
                    containerElem.find('[data-role="controlgroup"]').controlgroup();                                   // 5668
                }                                                                                                      // 5669
                                                                                                                       // 5670
            }                                                                                                          // 5671
        }                                                                                                              // 5672
    };                                                                                                                 // 5673
                                                                                                                       // 5674
    Alpaca.registerView({                                                                                              // 5675
        "id": "VIEW_MOBILE_DISPLAY",                                                                                   // 5676
        "parent": "VIEW_WEB_DISPLAY",                                                                                  // 5677
        "title": "Mobile DISPLAY View",                                                                                // 5678
        "description": "Mobile display view using JQuery Mobile Library",                                              // 5679
        "type": "view",                                                                                                // 5680
        "platform":"mobile",                                                                                           // 5681
        "style":"jquery-mobile",                                                                                       // 5682
        "ui":"mobile",                                                                                                 // 5683
        "legendStyle": "link",                                                                                         // 5684
        "toolbarStyle": "link",                                                                                        // 5685
        "buttonType": "link",                                                                                          // 5686
        "templates": {                                                                                                 // 5687
            // Templates for control fields                                                                            // 5688
            controlField: '<ul data-role="listview"><li>{{if options.label}}<h4>${options.label}</h4>{{/if}}<p><strong>${data}</strong></p></li></ul>',
            // Templates for container fields                                                                          // 5690
            fieldSetOuterEl: '<fieldset data-role="collapsible" id="${id}" data-collapsed="{{if options.collapsed}}true{{else}}false{{/if}}">{{html this.html}}</fieldset>',
            fieldSetMessage: '<div>* ${message}</div>',                                                                // 5692
            fieldSetLegend: '{{if options.label}}<legend for="${id}" class="{{if options.labelClass}}${options.labelClass}{{/if}}">${options.label}</legend>{{/if}}',
            fieldSetHelper: '{{if options.helper}}<h3 class="{{if options.helperClass}}${options.helperClass}{{/if}}">${options.helper}</h3>{{/if}}',
            fieldSetItemsContainer: '<div data-role="controlgroup">{{html this.html}}</div>',                          // 5695
            fieldSet: '{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetOuterEl",true)}}{{html Alpaca.fieldTemplate(this,"fieldSetLegend")}}{{html Alpaca.fieldTemplate(this,"fieldSetHelper")}}{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetItemsContainer",true)}}{{/wrap}}{{/wrap}}',
            fieldSetItemContainer: '<div></div>'                                                                       // 5697
        },                                                                                                             // 5698
        "messages": {                                                                                                  // 5699
            required: "Required Field",                                                                                // 5700
            invalid: "Invalid Field"                                                                                   // 5701
        },                                                                                                             // 5702
        "render": function(field, renderedCallback) {                                                                  // 5703
                                                                                                                       // 5704
            var self = this;                                                                                           // 5705
                                                                                                                       // 5706
            field.render(field.view, function(field) {                                                                 // 5707
                                                                                                                       // 5708
                refreshPageForField(field.getEl());                                                                    // 5709
                                                                                                                       // 5710
                if (renderedCallback) {                                                                                // 5711
                    renderedCallback.call(self, field);                                                                // 5712
                }                                                                                                      // 5713
            });                                                                                                        // 5714
                                                                                                                       // 5715
        }                                                                                                              // 5716
    });                                                                                                                // 5717
                                                                                                                       // 5718
    Alpaca.registerView({                                                                                              // 5719
        "id": "VIEW_MOBILE_EDIT",                                                                                      // 5720
        "parent": "VIEW_WEB_EDIT",                                                                                     // 5721
        "title": "Mobile Edit View",                                                                                   // 5722
        "description": "Mobile edit view using JQuery Mobile Library",                                                 // 5723
        "type": "edit",                                                                                                // 5724
        "platform":"mobile",                                                                                           // 5725
        "style":"jquery-mobile",                                                                                       // 5726
        "ui":"mobile",                                                                                                 // 5727
        "legendStyle": "link",                                                                                         // 5728
        "toolbarStyle": "link",                                                                                        // 5729
        "buttonType": "link",                                                                                          // 5730
        "toolbarSticky": true,                                                                                         // 5731
        "templates": {                                                                                                 // 5732
            // Templates for control fields                                                                            // 5733
            controlFieldOuterEl: '<div data-role="fieldcontain">{{html this.html}}</div>',                             // 5734
            controlFieldMessage: '<div>* ${message}</div>',                                                            // 5735
            controlFieldLabel: '{{if options.label}}<label for="${id}" class="{{if options.labelClass}}${options.labelClass}{{/if}}">${options.label}</label>{{/if}}',
            controlFieldHelper: '{{if options.helper}}<div class="{{if options.helperClass}}${options.helperClass}{{/if}}">${options.helper}</div>{{/if}}',
            controlFieldContainer: '<div data-replace="true">{{html this.html}}</div>',                                // 5738
            controlField: '{{wrap(null, {}) Alpaca.fieldTemplate(this,"controlFieldOuterEl",true)}}{{html Alpaca.fieldTemplate(this,"controlFieldLabel")}}{{wrap(null, {}) Alpaca.fieldTemplate(this,"controlFieldContainer",true)}}{{/wrap}}{{html Alpaca.fieldTemplate(this,"controlFieldHelper")}}{{/wrap}}',
            // Templates for container fields                                                                          // 5740
            fieldSetOuterEl: '<fieldset id="${id}" data-collapsed="{{if options.collapsed}}true{{else}}false{{/if}}">{{html this.html}}</fieldset>',
            fieldSetMessage: '<div>* ${message}</div>',                                                                // 5742
            fieldSetLegend: '{{if options.label}}<legend for="${id}" class="{{if options.labelClass}}${options.labelClass}{{/if}}">${options.label}</legend>{{/if}}',
            fieldSetHelper: '{{if options.helper}}<h3 class="{{if options.helperClass}}${options.helperClass}{{/if}}">${options.helper}</h3>{{/if}}',
            fieldSetItemsContainer: '<div data-role="controlgroup">{{html this.html}}</div>',                          // 5745
            fieldSet: '{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetOuterEl",true)}}{{html Alpaca.fieldTemplate(this,"fieldSetLegend")}}{{html Alpaca.fieldTemplate(this,"fieldSetHelper")}}{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetItemsContainer",true)}}{{/wrap}}{{/wrap}}',
            fieldSetItemContainer: '<div></div>',                                                                      // 5747
            // Templates for form                                                                                      // 5748
            formFieldsContainer: '<div data-role="content">{{html this.html}}</div>',                                  // 5749
            //formButtonsContainer: '<fieldset class="ui-grid-a">{{html this.html}}</fieldset>',                       // 5750
            //"formButtonsContainer": '<div>{{if options.buttons}}{{each(k,v) options.buttons}}<input data-key="${k}" class="alpaca-form-button alpaca-form-button-${k}" {{each(k1,v1) v}}${k1}="${v1}"{{/each}}/>{{/each}}{{/if}}</div>',
            form: '<form>{{html Alpaca.fieldTemplate(this,"formFieldsContainer")}}{{html Alpaca.fieldTemplate(this,"formButtonsContainer")}}</form>',
            // Controls                                                                                                // 5753
            //controlFieldRadio: '<fieldset data-role="controlgroup" id="${id}">{{if options.label}}<legend for="${id}" class="{{if options.labelClass}}${options.labelClass}{{/if}}">${options.label}</legend>{{/if}}{{each selectOptions}}<input type="radio" {{if options.readonly}}readonly="readonly"{{/if}} name="${formName}" id="${id}-${$index}" value="${value}" {{if value == data}}checked="checked"{{/if}}/><label for="${id}-${$index}">${text}</label>{{/each}}</fieldset>',
            controlFieldRadio: '<fieldset data-role="controlgroup" class="alpaca-radio-fieldset" id="${id}">{{each selectOptions}}<input type="radio" {{if options.readonly}}readonly="readonly"{{/if}} name="${name}" id="${id}-${$index}" value="${value}" {{if value == data}}checked="checked"{{/if}}/><label for="${id}-${$index}">${text}</label>{{/each}}</fieldset>',
            controlFieldCheckbox: '<fieldset data-role="controlgroup" class="alpaca-radio-fieldset" id="${id}-0"><input type="checkbox" id="${id}-1" name="${id}-1" {{if options.readonly}}readonly="readonly"{{/if}} {{if name}}name="${name}"{{/if}} {{each options.data}}data-${fieldId}="${value}"{{/each}}/>{{if options.rightLabel}}<label for="${id}-1">${options.rightLabel}</label>{{else}}{{if options.label}}<label for="${id}-1">${options.label}?</label>{{/if}}{{/if}}</fieldset>',
            arrayItemToolbar: '<div class="alpaca-fieldset-array-item-toolbar" data-role="controlgroup" data-type="horizontal" data-mini="true"><span class="alpaca-fieldset-array-item-toolbar-add" data-role="button" data-icon="add" data-iconpos="notext">Add</span><span class="alpaca-fieldset-array-item-toolbar-remove" data-role="button" data-icon="delete" data-iconpos="notext">Delete</span><span class="alpaca-fieldset-array-item-toolbar-up" data-role="button" data-icon="arrow-u" data-iconpos="notext">Up</span><span class="alpaca-fieldset-array-item-toolbar-down" data-role="button" data-icon="arrow-d" data-iconpos="notext">Down</span></div>',
            arrayToolbar: '<div class="alpaca-fieldset-array-toolbar" data-role="controlgroup"  data-mini="true"><span class="alpaca-fieldset-array-toolbar-icon alpaca-fieldset-array-toolbar-add" data-role="button" data-icon="add" data-inline="true" title="Add">Add</span></div>'
        },                                                                                                             // 5759
        "messages": {                                                                                                  // 5760
            required: "Required Field",                                                                                // 5761
            invalid: "Invalid Field"                                                                                   // 5762
        },                                                                                                             // 5763
        "render": function(field, renderedCallback) {                                                                  // 5764
                                                                                                                       // 5765
            var self = this;                                                                                           // 5766
                                                                                                                       // 5767
            field.render(function(field) {                                                                             // 5768
                                                                                                                       // 5769
                refreshPageForField(field.getEl());                                                                    // 5770
                                                                                                                       // 5771
                if (renderedCallback) {                                                                                // 5772
                    renderedCallback.call(self, field);                                                                // 5773
                }                                                                                                      // 5774
            });                                                                                                        // 5775
                                                                                                                       // 5776
        }                                                                                                              // 5777
    });                                                                                                                // 5778
                                                                                                                       // 5779
    var refreshPageForField = function(fieldEl)                                                                        // 5780
    {                                                                                                                  // 5781
        // find the data-role="page" and refresh it                                                                    // 5782
        var el = fieldEl;                                                                                              // 5783
        while (!Alpaca.isEmpty(el) && el.attr("data-role") !== "page")                                                 // 5784
        {                                                                                                              // 5785
            el = el.parent();                                                                                          // 5786
        }                                                                                                              // 5787
        if (!Alpaca.isEmpty(el)) {                                                                                     // 5788
            $(el).trigger('pagecreate');                                                                               // 5789
        }                                                                                                              // 5790
    };                                                                                                                 // 5791
                                                                                                                       // 5792
    Alpaca.registerView({                                                                                              // 5793
        "id": "VIEW_MOBILE_CREATE",                                                                                    // 5794
        "parent": 'VIEW_MOBILE_EDIT',                                                                                  // 5795
        "title": "Default Mobile Create View",                                                                         // 5796
        "description":"Default mobile create view which doesn't bind initial data.",                                   // 5797
        "type": "create",                                                                                              // 5798
        "displayReadonly":false                                                                                        // 5799
    });                                                                                                                // 5800
                                                                                                                       // 5801
})(jQuery);/**                                                                                                         // 5802
 * Twitter Bootstrap Theme ("bootstrap")                                                                               // 5803
 *                                                                                                                     // 5804
 * Defines the Alpaca theme for Twitter Bootstrap v3.                                                                  // 5805
 *                                                                                                                     // 5806
 * The style injector:                                                                                                 // 5807
 *                                                                                                                     // 5808
 *    bootstrap                                                                                                        // 5809
 *                                                                                                                     // 5810
 * The views are:                                                                                                      // 5811
 *                                                                                                                     // 5812
 *    VIEW_BOOTSTRAP_DISPLAY                                                                                           // 5813
 *    VIEW_BOOTSTRAP_EDIT                                                                                              // 5814
 *    VIEW_BOOTSTRAP_CREATE                                                                                            // 5815
 *                                                                                                                     // 5816
 * This theme can also be selected by specifying the following view:                                                   // 5817
 *                                                                                                                     // 5818
 *    {                                                                                                                // 5819
 *       "ui": "bootstrap",                                                                                            // 5820
 *       "type": null | "create" | "edit" | "display"                                                                  // 5821
 *    }                                                                                                                // 5822
 *                                                                                                                     // 5823
 */                                                                                                                    // 5824
(function($) {                                                                                                         // 5825
                                                                                                                       // 5826
    var Alpaca = $.alpaca;                                                                                             // 5827
                                                                                                                       // 5828
    Alpaca.styleInjections["bootstrap"] = {                                                                            // 5829
                                                                                                                       // 5830
        /*                                                                                                             // 5831
        // error messages                                                                                              // 5832
        "addErrorMessage": function(targetDiv, message) {                                                              // 5833
                                                                                                                       // 5834
            // if bootstrap has the tooltip, we can pretty up the message                                              // 5835
            if ($.fn.tooltip)                                                                                          // 5836
            {                                                                                                          // 5837
                targetDiv.tooltip({                                                                                    // 5838
                    "html": message                                                                                    // 5839
                }).click();                                                                                            // 5840
            }                                                                                                          // 5841
        },                                                                                                             // 5842
                                                                                                                       // 5843
        "buttonBeautifier"  : function(button, iconClass, withText) {                                                  // 5844
            var buttonText = button.html();                                                                            // 5845
            button.attr("title", buttonText);                                                                          // 5846
            var addedButtonText = withText ? buttonText : "";                                                          // 5847
            button.empty().append('<b class="alpaca-fieldset-legend-button ' + iconClass + '"></b><span>' + addedButtonText + '</span>');
        },                                                                                                             // 5849
        */                                                                                                             // 5850
                                                                                                                       // 5851
                                                                                                                       // 5852
                                                                                                                       // 5853
                                                                                                                       // 5854
                                                                                                                       // 5855
        // all control item containers get class: "form-group"                                                         // 5856
        // all input, textarea and select get class: "form-control"                                                    // 5857
        // all labels get class: "control-label"                                                                       // 5858
        "field" : function(targetDiv) {                                                                                // 5859
                                                                                                                       // 5860
            // the item container gets the "form-group"                                                                // 5861
            targetDiv.parent().addClass('form-group');                                                                 // 5862
                                                                                                                       // 5863
            $(targetDiv).find("input").addClass("form-control");//.addClass("input-lg");                               // 5864
            $(targetDiv).find("textarea").addClass("form-control");//.addClass("input-lg");                            // 5865
            $(targetDiv).find("select").addClass("form-control");//.addClass("input-lg");                              // 5866
                                                                                                                       // 5867
            // remove "input-lg" from selected controls                                                                // 5868
            //$(targetDiv).find("input[type=checkbox]").removeClass("input-lg");                                       // 5869
                                                                                                                       // 5870
            // remove "form-control" from selected controls                                                            // 5871
            $(targetDiv).find("input[type=checkbox]").removeClass("form-control");                                     // 5872
            $(targetDiv).find("input[type=file]").removeClass("form-control");                                         // 5873
                                                                                                                       // 5874
            // all labels get class "control-label"                                                                    // 5875
            $(targetDiv).find("label").addClass("control-label");                                                      // 5876
        },                                                                                                             // 5877
                                                                                                                       // 5878
        // icons                                                                                                       // 5879
        "commonIcon" : "",                                                                                             // 5880
        "addIcon" : "glyphicon glyphicon-plus-sign",                                                                   // 5881
        "removeIcon" : "glyphicon glyphicon-minus-sign",                                                               // 5882
        "upIcon" : "glyphicon glyphicon-chevron-up",                                                                   // 5883
        "downIcon" : "glyphicon glyphicon-chevron-down",                                                               // 5884
        "containerExpandedIcon" : "glyphicon glyphicon-circle-arrow-down",                                             // 5885
        "containerCollapsedIcon" : "glyphicon glyphicon-circle-arrow-right",                                           // 5886
        "wizardPreIcon" : "glyphicon glyphicon-chevron-left",                                                          // 5887
        "wizardNextIcon" : "glyphicon glyphicon-chevron-right",                                                        // 5888
        "wizardDoneIcon" : "glyphicon glyphicon-ok",                                                                   // 5889
                                                                                                                       // 5890
                                                                                                                       // 5891
        // required fields get star icon                                                                               // 5892
        "required" : function(targetDiv)                                                                               // 5893
        {                                                                                                              // 5894
            $('<span class="glyphicon glyphicon-star"></span>&nbsp;').prependTo(targetDiv);                            // 5895
        },                                                                                                             // 5896
                                                                                                                       // 5897
        // error fields get the "has-error" class                                                                      // 5898
        "error" : function(targetDiv) {                                                                                // 5899
            targetDiv.addClass('has-error');                                                                           // 5900
                                                                                                                       // 5901
            /*                                                                                                         // 5902
            $(targetDiv).popover({                                                                                     // 5903
                "html": true,                                                                                          // 5904
                "trigger": "manual",                                                                                   // 5905
                "content": "error message"                                                                             // 5906
            });                                                                                                        // 5907
            $(targetDiv).on("shown.bs.popover", function() {                                                           // 5908
                debugger;                                                                                              // 5909
                $(this).css({                                                                                          // 5910
                    "border": "1px red solid",                                                                         // 5911
                    "color": "red"                                                                                     // 5912
                });                                                                                                    // 5913
            });                                                                                                        // 5914
            $(targetDiv).popover("show");                                                                              // 5915
            */                                                                                                         // 5916
        },                                                                                                             // 5917
        "removeError" : function(targetDiv) {                                                                          // 5918
            targetDiv.removeClass('has-error');                                                                        // 5919
                                                                                                                       // 5920
            /*                                                                                                         // 5921
            $(targetDiv).popover("hide");                                                                              // 5922
            */                                                                                                         // 5923
                                                                                                                       // 5924
            /*                                                                                                         // 5925
            $(targetDiv).on("hidden.bs.popover", function() {                                                          // 5926
                $(targetDiv).popover("destroy");                                                                       // 5927
            });                                                                                                        // 5928
            */                                                                                                         // 5929
        },                                                                                                             // 5930
                                                                                                                       // 5931
                                                                                                                       // 5932
                                                                                                                       // 5933
        // The Wizard still relies on jQuery UI                                                                        // 5934
        "wizardStatusBar" : function(targetDiv) {                                                                      // 5935
            targetDiv.addClass('ui-widget-header ui-corner-all');                                                      // 5936
        },                                                                                                             // 5937
        "wizardCurrentStep" : function(targetDiv) {                                                                    // 5938
            targetDiv.addClass('ui-state-highlight ui-corner-all');                                                    // 5939
        },                                                                                                             // 5940
        "wizardUnCurrentStep" : function(targetDiv) {                                                                  // 5941
            targetDiv.removeClass('ui-state-highlight ui-corner-all');                                                 // 5942
        },                                                                                                             // 5943
                                                                                                                       // 5944
                                                                                                                       // 5945
        "buttonBeautifier"  : function(button, iconClass, withText) {                                                  // 5946
            var buttonText = button.html();                                                                            // 5947
            button.attr("title", buttonText);                                                                          // 5948
            button.empty().append('<b class="alpaca-fieldset-legend-button ' + iconClass + '"></b>');                  // 5949
            var addedButtonText = withText ? buttonText : null;                                                        // 5950
            if (addedButtonText)                                                                                       // 5951
            {                                                                                                          // 5952
                button.append('<span class="alpaca-fieldset-legend-button-text">' + addedButtonText + '</span>');      // 5953
            }                                                                                                          // 5954
        }                                                                                                              // 5955
                                                                                                                       // 5956
    };                                                                                                                 // 5957
                                                                                                                       // 5958
    var bootstrapTemplates = {                                                                                         // 5959
        "controlFieldLabel": '{{if options.label}}<label class="{{if options.labelClass}}${options.labelClass}{{/if}}" for="${id}">${options.label}</label>{{/if}}',
        "controlFieldHelper": '{{if options.helper}}<div class="{{if options.helperClass}}${options.helperClass}{{/if}}"><i class="glyphicon glyphicon-info-sign"></i> <p class="help-block help-inline alpaca-controlfield-helper-text">${options.helper}</p></div>{{/if}}',
        "controlFieldMessage": '<div><span class="glyphicon glyphicon-exclamation-sign"></span><span class="alpaca-controlfield-message-text help-inline help-block">${message}</span></div>',
                                                                                                                       // 5963
        "arrayToolbar": '<span class="alpaca-fieldset-array-toolbar"><button class="btn btn-default alpaca-fieldset-array-toolbar-icon alpaca-fieldset-array-toolbar-add">${addItemLabel}</button></span>',
        "arrayItemToolbar": '<div class="btn-toolbar alpaca-fieldset-array-item-toolbar"><div class="btn-group">{{each(k,v) buttons}}<button class="btn btn-default btn-xs alpaca-fieldset-array-item-toolbar-icon alpaca-fieldset-array-item-toolbar-${v.feature}">${v.label}</button>{{/each}}</div></div>',
                                                                                                                       // 5966
        "controlFieldCheckbox": '<span class="checkbox">{{if options.rightLabel}}<label for="${id}">{{/if}}<input type="checkbox" id="${id}" {{if options.readonly}}readonly="readonly"{{/if}} {{if name}}name="${name}"{{/if}} {{each(i,v) options.data}}data-${i}="${v}"{{/each}}/>{{if options.rightLabel}}${options.rightLabel}</label>{{/if}}</span>',
        "controlFieldRadio": '<div id="${id}" class="alpaca-controlfield-radio">{{if !required}}<label class="alpaca-controlfield-radio-label radio inline"><input type="radio" {{if options.readonly}}readonly="readonly"{{/if}} name="${name}" value=""/>None</label>{{/if}}{{each selectOptions}}<label class="alpaca-controlfield-radio-label radio inline"><input type="radio" {{if options.readonly}}readonly="readonly"{{/if}} name="${name}" value="${value}" {{if value == data}}checked="checked"{{/if}}/>${text}</label>{{/each}}</div>',
                                                                                                                       // 5969
        "fieldSetHelper": '{{if options.helper}}<p class="{{if options.helperClass}}${options.helperClass}{{/if}}">${options.helper}</p>{{/if}}',
                                                                                                                       // 5971
        "form": '<form role="form">{{html Alpaca.fieldTemplate(this,"formFieldsContainer")}}{{html Alpaca.fieldTemplate(this,"formButtonsContainer")}}</form>'
    };                                                                                                                 // 5973
                                                                                                                       // 5974
    var renderFunction = function(field, renderedCallback)                                                             // 5975
    {                                                                                                                  // 5976
        var self = this;                                                                                               // 5977
                                                                                                                       // 5978
        field.render(function(field) {                                                                                 // 5979
                                                                                                                       // 5980
            if (renderedCallback) {                                                                                    // 5981
                renderedCallback.call(self, field);                                                                    // 5982
            }                                                                                                          // 5983
        });                                                                                                            // 5984
    };                                                                                                                 // 5985
                                                                                                                       // 5986
    Alpaca.registerView({                                                                                              // 5987
        "id": "VIEW_BOOTSTRAP_DISPLAY",                                                                                // 5988
        "parent": "VIEW_WEB_DISPLAY",                                                                                  // 5989
        "title": "Display View for Bootstrap",                                                                         // 5990
        "description": "Display View for Bootstrap",                                                                   // 5991
        "style": "bootstrap",                                                                                          // 5992
        "ui": "bootstrap",                                                                                             // 5993
        "templates": bootstrapTemplates,                                                                               // 5994
        "render": renderFunction                                                                                       // 5995
    });                                                                                                                // 5996
                                                                                                                       // 5997
    Alpaca.registerView({                                                                                              // 5998
        "id": "VIEW_BOOTSTRAP_EDIT",                                                                                   // 5999
        "parent": 'VIEW_WEB_EDIT',                                                                                     // 6000
        "title": "Edit View for Bootstrap",                                                                            // 6001
        "description": "Edit View for Bootstrap",                                                                      // 6002
        "style": "bootstrap",                                                                                          // 6003
        "ui": "bootstrap",                                                                                             // 6004
        "templates": bootstrapTemplates,                                                                               // 6005
        "render": renderFunction                                                                                       // 6006
    });                                                                                                                // 6007
                                                                                                                       // 6008
    Alpaca.registerView({                                                                                              // 6009
        "id": "VIEW_BOOTSTRAP_CREATE",                                                                                 // 6010
        "parent": 'VIEW_WEB_CREATE',                                                                                   // 6011
        "title": "Create View for Bootstrap",                                                                          // 6012
        "description":"Create View for Bootstrap",                                                                     // 6013
        "style": "bootstrap",                                                                                          // 6014
        "ui": "bootstrap",                                                                                             // 6015
        "templates": bootstrapTemplates,                                                                               // 6016
        "render": renderFunction                                                                                       // 6017
    });                                                                                                                // 6018
                                                                                                                       // 6019
    Alpaca.registerView({                                                                                              // 6020
        "id": "VIEW_BOOTSTRAP_DISPLAY_LIST",                                                                           // 6021
        "parent": "VIEW_WEB_DISPLAY_LIST",                                                                             // 6022
        "title": "Display List View for Bootstrap",                                                                    // 6023
        "description": "Display List View for Bootstrap",                                                              // 6024
        "style": "bootstrap",                                                                                          // 6025
        "ui": "bootstrap",                                                                                             // 6026
        "templates": bootstrapTemplates,                                                                               // 6027
        "render": renderFunction                                                                                       // 6028
    });                                                                                                                // 6029
                                                                                                                       // 6030
    Alpaca.registerView({                                                                                              // 6031
        "id": "VIEW_BOOTSTRAP_EDIT_LIST",                                                                              // 6032
        "parent": 'VIEW_WEB_EDIT_LIST',                                                                                // 6033
        "title": "Edit List View for Bootstrap",                                                                       // 6034
        "description": "Edit List View for Bootstrap",                                                                 // 6035
        "style": "bootstrap",                                                                                          // 6036
        "ui": "bootstrap",                                                                                             // 6037
        "templates": bootstrapTemplates,                                                                               // 6038
        "render": renderFunction                                                                                       // 6039
    });                                                                                                                // 6040
                                                                                                                       // 6041
    Alpaca.registerView({                                                                                              // 6042
        "id": "VIEW_BOOTSTRAP_CREATE_LIST",                                                                            // 6043
        "parent": 'VIEW_WEB_CREATE_LIST',                                                                              // 6044
        "title": "Create List View for Bootstrap",                                                                     // 6045
        "description":"Create List View for Bootstrap",                                                                // 6046
        "style": "bootstrap",                                                                                          // 6047
        "ui": "bootstrap",                                                                                             // 6048
        "templates": bootstrapTemplates,                                                                               // 6049
        "render": renderFunction                                                                                       // 6050
    });                                                                                                                // 6051
                                                                                                                       // 6052
})(jQuery);                                                                                                            // 6053
(function($) {                                                                                                         // 6054
                                                                                                                       // 6055
    var Alpaca = $.alpaca;                                                                                             // 6056
                                                                                                                       // 6057
    Alpaca.registerView({                                                                                              // 6058
        "id": "VIEW_WEB_EDIT_TABLE",                                                                                   // 6059
        "parent": 'VIEW_WEB_EDIT',                                                                                     // 6060
        "title": "Web Edit View Table Style",                                                                          // 6061
        "description": "Web edit view based on table styles.",                                                         // 6062
        "type": "edit",                                                                                                // 6063
        "displayReadonly": true,                                                                                       // 6064
        "collapsible": false,                                                                                          // 6065
        "legendStyle": "link",                                                                                         // 6066
        "templates": {                                                                                                 // 6067
                                                                                                                       // 6068
            // Templates for control fields                                                                            // 6069
            "controlFieldOuterEl": null,                                                                               // 6070
            "controlFieldLabel": '<td>{{if options.label}}<label for="${id}" class="{{if options.labelClass}}${options.labelClass}{{/if}}">${options.label}</label>{{/if}}</td>',
            "controlFieldContainer": '<td data-control="append">{{html this.html}}</td>',                              // 6072
            "controlFieldMessage": '<div><span class="ui-icon ui-icon-alert"></span><span class="alpaca-controlfield-message-text">${message}</span></div>',
            "controlFieldHelper": '{{if options.helper}}<div class="{{if options.helperClass}}${options.helperClass}{{/if}}"><span class="ui-icon ui-icon-info"></span><span class="alpaca-controlfield-helper-text">${options.helper}</span></div>{{/if}}',
            "controlField":                                                                                            // 6075
                '{{html Alpaca.fieldTemplate(this,"controlFieldLabel")}}' +                                            // 6076
                '{{wrap(null, {}) Alpaca.fieldTemplate(this,"controlFieldContainer",true)}}' +                         // 6077
                    '{{html Alpaca.fieldTemplate(this,"controlFieldHelper")}}' +                                       // 6078
                '{{/wrap}}',                                                                                           // 6079
                                                                                                                       // 6080
            // Templates for container fields                                                                          // 6081
            "fieldSetOuterEl": '<fieldset class="alpaca-view-web-edit-table">{{html this.html}}</fieldset>',           // 6082
            "fieldSetMessage": '<div><span class="ui-icon ui-icon-alert alpaca-fieldset-message-table-view"></span><span>${message}</span></div>',
            "fieldSetLegend": '{{if options.label}}<legend class="{{if options.labelClass}}${options.labelClass}{{/if}}">${options.label}</legend>{{/if}}',
            "fieldSetHelper": '{{if options.helper}}<div class="{{if options.helperClass}}${options.helperClass}{{/if}}">${options.helper}</div>{{/if}}',
            "fieldSetItemsContainer": '<table><tbody>{{html this.html}}</tbody></table>',                              // 6086
            "fieldSet": '{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetOuterEl",true)}}{{html Alpaca.fieldTemplate(this,"fieldSetLegend")}}{{html Alpaca.fieldTemplate(this,"fieldSetHelper")}}{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetItemsContainer",true)}}{{/wrap}}{{/wrap}}',
            "fieldSetItemContainer": '<tr></tr>',                                                                      // 6088
                                                                                                                       // 6089
            "itemLabel" : '{{if options.itemLabel}}<label for="${id}" class="alpaca-controlfield-label alpaca-controlfield-label-list-view"><span class="alpaca-controlfield-item-label-list-view">${options.itemLabel}{{if index}} <span class="alpaca-item-label-counter">${index}</span></span>{{/if}}</label>{{/if}}'
        },                                                                                                             // 6091
        "styles": {                                                                                                    // 6092
        },                                                                                                             // 6093
        "fields": {                                                                                                    // 6094
            "/": {                                                                                                     // 6095
                "templates": {                                                                                         // 6096
                    // Templates for container fields                                                                  // 6097
                    "fieldSetItemsContainer": '<table class="alpaca-fieldset-itemscontainer-list-view-top">{{html this.html}}</table>',
                    "fieldSetItemContainer": '<tr class="alpaca-fieldset-itemscontainer-list-view-top"></tr>'          // 6099
                }                                                                                                      // 6100
            }                                                                                                          // 6101
        }                                                                                                              // 6102
                                                                                                                       // 6103
    });                                                                                                                // 6104
                                                                                                                       // 6105
    Alpaca.registerView({                                                                                              // 6106
        "id": "VIEW_WEB_CREATE_TABLE",                                                                                 // 6107
        "parent": 'VIEW_WEB_EDIT_TABLE',                                                                               // 6108
        "title": "Default Web Create View Table Stle",                                                                 // 6109
        "description":"Default web create view (Table Style) which doesn't bind initial data.",                        // 6110
        "type": "create",                                                                                              // 6111
        "displayReadonly":false                                                                                        // 6112
    });                                                                                                                // 6113
                                                                                                                       // 6114
})(jQuery);(function($) {                                                                                              // 6115
                                                                                                                       // 6116
    var Alpaca = $.alpaca;                                                                                             // 6117
                                                                                                                       // 6118
    Alpaca.registerView({                                                                                              // 6119
        "id": "VIEW_WEB_EDIT_YAML",                                                                                    // 6120
        "parent": 'VIEW_WEB_EDIT',                                                                                     // 6121
        "title": "Web Edit View List Style",                                                                           // 6122
        "description": "Web edit list styled to look like a YAML editor.",                                             // 6123
        "type": "edit",                                                                                                // 6124
        "displayReadonly": true,                                                                                       // 6125
        "collapsible": true,                                                                                           // 6126
        "legendStyle": "link",                                                                                         // 6127
        "templates": {                                                                                                 // 6128
            // Templates for control fields                                                                            // 6129
            "controlFieldOuterEl": '<span class="alpaca-view-web-edit-yaml" title="${options.helper}">{{html this.html}}</span>',
            "controlFieldMessage": '<div><span class="ui-icon ui-icon-alert"></span><span class="alpaca-controlfield-message-text">${message}</span></div>',
            "controlFieldLabel": '{{if options.label}}<label for="${id}" class="{{if options.labelClass}}${options.labelClass}{{/if}}">${options.label}:</label>{{/if}}',
            "controlFieldHelper": '<span style="display:none" />',                                                     // 6133
            "controlFieldContainer": '<div>{{html this.html}}</div>',                                                  // 6134
            "controlField": '{{wrap(null, {}) Alpaca.fieldTemplate(this,"controlFieldOuterEl",true)}}{{html Alpaca.fieldTemplate(this,"controlFieldLabel")}}{{wrap(null, {}) Alpaca.fieldTemplate(this,"controlFieldContainer",true)}}{{html Alpaca.fieldTemplate(this,"controlFieldHelper")}}{{/wrap}}{{/wrap}}',
            // Templates for container fields                                                                          // 6136
            "fieldSetOuterEl": '<fieldset class="alpaca-view-web-edit-yaml">{{html this.html}}</fieldset>',            // 6137
            "fieldSetMessage": '<div><span class="ui-icon ui-icon-alert alpaca-fieldset-message-list-view"></span><span>${message}</span></div>',
            "fieldSetLegend": '{{if options.label}}<legend class="{{if options.labelClass}}${options.labelClass}{{/if}}">${options.label}</legend>{{/if}}',
            "fieldSetHelper": '{{if options.helper}}<div class="{{if options.helperClass}}${options.helperClass}{{/if}}">${options.helper}</div>{{/if}}',
            "fieldSetItemsContainer": '<ol>{{html this.html}}</ol>',                                                   // 6141
            "fieldSet": '{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetOuterEl",true)}}{{html Alpaca.fieldTemplate(this,"fieldSetLegend")}}{{html Alpaca.fieldTemplate(this,"fieldSetHelper")}}{{wrap(null, {}) Alpaca.fieldTemplate(this,"fieldSetItemsContainer",true)}}{{/wrap}}{{/wrap}}',
            "fieldSetItemContainer": '<li style="list-style:none;"></li>',                                             // 6143
                                                                                                                       // 6144
            "itemLabel" : '{{if options.itemLabel}}<label for="${id}" class="alpaca-controlfield-label alpaca-controlfield-label-list-view"><span class="alpaca-controlfield-item-label-list-view">${options.itemLabel}{{if index}} <span class="alpaca-item-label-counter">${index}</span></span>{{/if}}</label>{{/if}}'
                                                                                                                       // 6146
        },                                                                                                             // 6147
        "styles": {                                                                                                    // 6148
        },                                                                                                             // 6149
        "fields": {                                                                                                    // 6150
            "/": {                                                                                                     // 6151
                "templates": {                                                                                         // 6152
                    // Templates for container fields                                                                  // 6153
                    "fieldSetItemsContainer": '<ol class="alpaca-fieldset-itemscontainer-list-view-top">{{html this.html}}</ol>',
                    "fieldSetItemContainer": '<li class="alpaca-fieldset-itemcontainer-list-view-top"></li>'           // 6155
                }                                                                                                      // 6156
            }                                                                                                          // 6157
        }                                                                                                              // 6158
    });                                                                                                                // 6159
})(jQuery);                                                                                                            // 6160
/*jshint -W014 */ // bad line breaking                                                                                 // 6161
(function($) {                                                                                                         // 6162
                                                                                                                       // 6163
    var Alpaca = $.alpaca;                                                                                             // 6164
                                                                                                                       // 6165
    Alpaca.registerView({                                                                                              // 6166
        "id":"VIEW_WEB_EDIT_INLINE",                                                                                   // 6167
        "parent":"VIEW_WEB_EDIT",                                                                                      // 6168
        "title":"Default Web Edit with fields inlining capabilities",                                                  // 6169
        "description":"Edit template with form fields inlining capabilities, via options.inline level to display some forms parts inline. Useful to display for example an ArrayField containing ObjectField items in a compact manner.",
        "type":"edit",                                                                                                 // 6171
        "platform":"web",                                                                                              // 6172
        "style":"jquery-ui",                                                                                           // 6173
        "displayReadonly":true,                                                                                        // 6174
        "templates": {                                                                                                 // 6175
            "fieldSetOuterEl": '<fieldset class="{{if options.inline}}alpaca-inline{{/if}}">{{html this.html}}</fieldset>',
            "fieldSetItemContainer": '<div class="alpaca-inline-item-container"></div>',                               // 6177
            "arrayItemToolbar": '<div class="alpaca-fieldset-array-item-toolbar" data-role="controlgroup" data-type="horizontal" data-mini="true">'
                +'<span class="alpaca-fieldset-array-item-toolbar-add" data-role="button" data-icon="add" data-iconpos="notext">Add</span>'
                +'<span class="alpaca-fieldset-array-item-toolbar-remove" data-role="button" data-icon="delete" data-iconpos="notext">Delete</span>'
                +'<span class="alpaca-fieldset-array-item-toolbar-up" data-role="button" data-icon="arrow-u" data-iconpos="notext">Up</span>'
                +'<span class="alpaca-fieldset-array-item-toolbar-down" data-role="button" data-icon="arrow-d" data-iconpos="notext">Down</span></div>'
        }                                                                                                              // 6183
    });                                                                                                                // 6184
})(jQuery);/*jshint -W014 */ // bad line breaking                                                                      // 6185
(function($) {                                                                                                         // 6186
                                                                                                                       // 6187
    var Alpaca = $.alpaca;                                                                                             // 6188
                                                                                                                       // 6189
    Alpaca.registerView({                                                                                              // 6190
        "id": "VIEW_WEB_EDIT",                                                                                         // 6191
        "templates": {                                                                                                 // 6192
            "twoColumnLayout":'<div class="alpaca-layout-two-column-mask">'                                            // 6193
                    + '{{if options.label}}<h3>${options.label}</h3>{{/if}}'                                           // 6194
                    + '{{if options.helper}}<h4>${options.helper}</h4>{{/if}}'                                         // 6195
                    + '<div class="alpaca-layout-two-column-left alpaca-layout-region"  id="leftcolumn"></div>'        // 6196
                    + '<div class="alpaca-layout-two-column-right alpaca-layout-region" id="rightcolumn"></div>'       // 6197
                    + '</div>'                                                                                         // 6198
        }                                                                                                              // 6199
    });                                                                                                                // 6200
                                                                                                                       // 6201
    Alpaca.registerView({                                                                                              // 6202
        "id": "VIEW_WEB_EDIT_LAYOUT_TWO_COLUMN",                                                                       // 6203
        "parent": "VIEW_WEB_EDIT",                                                                                     // 6204
        "title": "Web Edit View with Two-Column Layout",                                                               // 6205
        "description": "Web edit default view with two-column layout.",                                                // 6206
        "layout" : {                                                                                                   // 6207
            "template" : "twoColumnLayout"                                                                             // 6208
        }                                                                                                              // 6209
    });                                                                                                                // 6210
                                                                                                                       // 6211
    Alpaca.registerView({                                                                                              // 6212
        "id": "VIEW_WEB_EDIT_LIST_LAYOUT_TWO_COLUMN",                                                                  // 6213
        "parent": "VIEW_WEB_EDIT_LIST",                                                                                // 6214
        "title": "Web List Edit View with Two-Column Layout",                                                          // 6215
        "description": "Web edit list view with two-column layout.",                                                   // 6216
        "layout" : {                                                                                                   // 6217
            "template" : "twoColumnLayout"                                                                             // 6218
        }                                                                                                              // 6219
    });                                                                                                                // 6220
                                                                                                                       // 6221
})(jQuery);                                                                                                            // 6222
(function($) {                                                                                                         // 6223
                                                                                                                       // 6224
    var Alpaca = $.alpaca;                                                                                             // 6225
                                                                                                                       // 6226
    Alpaca.NormalizedView = Base.extend(                                                                               // 6227
    /**                                                                                                                // 6228
     * @lends Alpaca.NormalizedView.prototype                                                                          // 6229
     */                                                                                                                // 6230
    {                                                                                                                  // 6231
        /**                                                                                                            // 6232
         * Once all of the Alpaca views are registered with the framework, each is normalized so that parent-chain     // 6233
         * references and overrides are normalized into a single, fast lookup object.                                  // 6234
         *                                                                                                             // 6235
         * @constructs                                                                                                 // 6236
         *                                                                                                             // 6237
         * @class Normalized view.                                                                                     // 6238
         *                                                                                                             // 6239
         * @param {String} the view id                                                                                 // 6240
         */                                                                                                            // 6241
        constructor: function(viewId) {                                                                                // 6242
            this.id = viewId;                                                                                          // 6243
        },                                                                                                             // 6244
                                                                                                                       // 6245
        /**                                                                                                            // 6246
         * Normalization occurs once per view upon startup of Alpaca.                                                  // 6247
         */                                                                                                            // 6248
        normalize: function()                                                                                          // 6249
        {                                                                                                              // 6250
            // load the view object                                                                                    // 6251
            var viewObject  = Alpaca.views[this.id];                                                                   // 6252
            if (!viewObject)                                                                                           // 6253
            {                                                                                                          // 6254
                Alpaca.logError("View compilation failed - view not found: " + this.id);                               // 6255
                return false;                                                                                          // 6256
            }                                                                                                          // 6257
                                                                                                                       // 6258
            // collect the inheritance chain                                                                           // 6259
            var chain = [];                                                                                            // 6260
            var current = viewObject;                                                                                  // 6261
            while (current) {                                                                                          // 6262
                chain.push(current);                                                                                   // 6263
                                                                                                                       // 6264
                var parentId = current.parent;                                                                         // 6265
                if (parentId) {                                                                                        // 6266
                    var parent = Alpaca.views[current.parent];                                                         // 6267
                    if (!parent) {                                                                                     // 6268
                        Alpaca.logError("View compilation failed - cannot find parent view: " + parentId + " for view: " + current.id);
                        return false;                                                                                  // 6270
                    }                                                                                                  // 6271
                    current = parent;                                                                                  // 6272
                }                                                                                                      // 6273
                else                                                                                                   // 6274
                {                                                                                                      // 6275
                    current = null;                                                                                    // 6276
                }                                                                                                      // 6277
            }                                                                                                          // 6278
                                                                                                                       // 6279
            // reverse the chain                                                                                       // 6280
            chain = chain.reverse();                                                                                   // 6281
                                                                                                                       // 6282
            var setScalar = function(target, source, propertyId)                                                       // 6283
            {                                                                                                          // 6284
                var value = source[propertyId];                                                                        // 6285
                                                                                                                       // 6286
                var currentValue = target[propertyId];                                                                 // 6287
                if (!Alpaca.isUndefined(currentValue) && !Alpaca.isUndefined(value))                                   // 6288
                {                                                                                                      // 6289
                    Alpaca.logDebug("View property: " + propertyId + " already has value: " + currentValue + " and overwriting to: " + value);
                }                                                                                                      // 6291
                                                                                                                       // 6292
                if (!Alpaca.isUndefined(value)) {                                                                      // 6293
                    target[propertyId] = value;                                                                        // 6294
                }                                                                                                      // 6295
            };                                                                                                         // 6296
                                                                                                                       // 6297
            var setFunction = function(target, source, propertyId)                                                     // 6298
            {                                                                                                          // 6299
                var value = source[propertyId];                                                                        // 6300
                                                                                                                       // 6301
                var currentValue = target[propertyId];                                                                 // 6302
                if (!Alpaca.isUndefined(currentValue) && !Alpaca.isUndefined(value))                                   // 6303
                {                                                                                                      // 6304
                    Alpaca.logDebug("View property: " + propertyId + " already has function, overwriting");            // 6305
                }                                                                                                      // 6306
                                                                                                                       // 6307
                if (!Alpaca.isUndefined(value)) {                                                                      // 6308
                    target[propertyId] = value;                                                                        // 6309
                }                                                                                                      // 6310
            };                                                                                                         // 6311
                                                                                                                       // 6312
            var mergeMap = function(target, source, propertyId)                                                        // 6313
            {                                                                                                          // 6314
                var sourceMap = source[propertyId];                                                                    // 6315
                if (sourceMap)                                                                                         // 6316
                {                                                                                                      // 6317
                    if (!target[propertyId])                                                                           // 6318
                    {                                                                                                  // 6319
                        target[propertyId] = {};                                                                       // 6320
                    }                                                                                                  // 6321
                                                                                                                       // 6322
                    Alpaca.mergeObject2(sourceMap, target[propertyId]);                                                // 6323
                }                                                                                                      // 6324
            };                                                                                                         // 6325
                                                                                                                       // 6326
            // walk forward and apply                                                                                  // 6327
            for (var i = 0; i < chain.length; i++)                                                                     // 6328
            {                                                                                                          // 6329
                var element = chain[i];                                                                                // 6330
                                                                                                                       // 6331
                // scalar properties                                                                                   // 6332
                setScalar(this, element, "type");                                                                      // 6333
                setScalar(this, element, "displayReadonly");                                                           // 6334
                setScalar(this, element, "platform");                                                                  // 6335
                setScalar(this, element, "device");                                                                    // 6336
                setScalar(this, element, "style");                                                                     // 6337
                setScalar(this, element, "ui");                                                                        // 6338
                setScalar(this, element, "collapsible");                                                               // 6339
                setScalar(this, element, "legendStyle");                                                               // 6340
                setScalar(this, element, "toolbarStyle");                                                              // 6341
                setScalar(this, element, "buttonStyle");                                                               // 6342
                setScalar(this, element, "toolbarSticky");                                                             // 6343
                setScalar(this, element, "globalTemplate");                                                            // 6344
                                                                                                                       // 6345
                // functions                                                                                           // 6346
                setFunction(this, element, "render");                                                                  // 6347
                setFunction(this, element, "postRender");                                                              // 6348
                                                                                                                       // 6349
                // maps (merge)                                                                                        // 6350
                mergeMap(this, element, "styles");                                                                     // 6351
                mergeMap(this, element, "templates");                                                                  // 6352
                mergeMap(this, element, "messages");                                                                   // 6353
                mergeMap(this, element, "wizard");                                                                     // 6354
                mergeMap(this, element, "fields");                                                                     // 6355
                mergeMap(this, element, "layout");                                                                     // 6356
                                                                                                                       // 6357
                // compiled templates                                                                                  // 6358
                mergeMap(this, element, "compiledTemplates");                                                          // 6359
            }                                                                                                          // 6360
                                                                                                                       // 6361
            Alpaca.logDebug("View compilation complete for view: " + this.id);                                         // 6362
            Alpaca.logDebug("Final view: ");                                                                           // 6363
            Alpaca.logDebug(JSON.stringify(this, null, "   "));                                                        // 6364
                                                                                                                       // 6365
            return true;                                                                                               // 6366
        }                                                                                                              // 6367
    });                                                                                                                // 6368
})(jQuery);/*jshint -W004 */ // duplicate variables                                                                    // 6369
(function($) {                                                                                                         // 6370
                                                                                                                       // 6371
    var Alpaca = $.alpaca;                                                                                             // 6372
                                                                                                                       // 6373
    Alpaca.RuntimeView = Base.extend(                                                                                  // 6374
    /**                                                                                                                // 6375
     * @lends Alpaca.RuntimeView.prototype                                                                             // 6376
     */                                                                                                                // 6377
    {                                                                                                                  // 6378
        /**                                                                                                            // 6379
         * Runtime implementation of a view as applied to a field.                                                     // 6380
         *                                                                                                             // 6381
         * This provides accessors into the nested behaviors of views and also takes into account field-level attributes
         * of the currently rendering dom element.                                                                     // 6383
         *                                                                                                             // 6384
         * @constructs                                                                                                 // 6385
         *                                                                                                             // 6386
         * @class Class for managing view components such as layout, template, message etc.                            // 6387
         *                                                                                                             // 6388
         * @param {String} the view id                                                                                 // 6389
         * @param {Object} field the field control                                                                     // 6390
         */                                                                                                            // 6391
        constructor: function(viewId, field) {                                                                         // 6392
            this.field = field;                                                                                        // 6393
            this.setView(viewId);                                                                                      // 6394
        },                                                                                                             // 6395
                                                                                                                       // 6396
        /**                                                                                                            // 6397
         * Sets the view that this runtime view adapters should consult during render.                                 // 6398
         *                                                                                                             // 6399
         * @param {String} the view id                                                                                 // 6400
         */                                                                                                            // 6401
        setView: function (viewId)                                                                                     // 6402
        {                                                                                                              // 6403
            // TODO: should field classes ever really be instantiated directly?                                        // 6404
            // TODO: this is left in to support Alpaca docs generation (need to clean this up)s                        // 6405
            // if a view is not set at this point it probably means they instantiated a field directly                 // 6406
            // in which case, we'll just pick the default view                                                         // 6407
            if (!viewId)                                                                                               // 6408
            {                                                                                                          // 6409
                this.id = "VIEW_WEB_EDIT";                                                                             // 6410
                return;                                                                                                // 6411
            }                                                                                                          // 6412
                                                                                                                       // 6413
            // the normalized view                                                                                     // 6414
            var normalizedView = Alpaca.getNormalizedView(viewId);                                                     // 6415
            if (!normalizedView)                                                                                       // 6416
            {                                                                                                          // 6417
                // this should never be the case                                                                       // 6418
                throw new Error("Runtime view for view id: " + viewId + " could not find a normalized view");          // 6419
            }                                                                                                          // 6420
                                                                                                                       // 6421
            // copy compiled properties into this object                                                               // 6422
            for (var k in normalizedView)                                                                              // 6423
            {                                                                                                          // 6424
                if (normalizedView.hasOwnProperty(k)) {                                                                // 6425
                    this[k] = normalizedView[k];                                                                       // 6426
                }                                                                                                      // 6427
            }                                                                                                          // 6428
        },                                                                                                             // 6429
                                                                                                                       // 6430
        /**                                                                                                            // 6431
         * Gets view wizard settings.                                                                                  // 6432
         *                                                                                                             // 6433
         * @returns {Object} View wizard settings.                                                                     // 6434
         */                                                                                                            // 6435
        getWizard : function () {                                                                                      // 6436
            return this.getViewParam("wizard");                                                                        // 6437
        },                                                                                                             // 6438
                                                                                                                       // 6439
        /**                                                                                                            // 6440
         * Gets the global layout template.                                                                            // 6441
         *                                                                                                             // 6442
         * @returns {Object|String} Global layout template setting of the view.                                        // 6443
         */                                                                                                            // 6444
        getGlobalTemplateDescriptor : function ()                                                                      // 6445
        {                                                                                                              // 6446
            return this.getTemplateDescriptor("globalTemplate");                                                       // 6447
        },                                                                                                             // 6448
                                                                                                                       // 6449
        /**                                                                                                            // 6450
         * Gets layout template and bindings.                                                                          // 6451
         *                                                                                                             // 6452
         * @returns {Object} Layout template and bindings setting of the view.                                         // 6453
         */                                                                                                            // 6454
        getLayout: function ()                                                                                         // 6455
        {                                                                                                              // 6456
            var templateDescriptor = this.getTemplateDescriptor("layoutTemplate");                                     // 6457
                                                                                                                       // 6458
            return {                                                                                                   // 6459
                "templateDescriptor" : templateDescriptor,                                                             // 6460
                "bindings" : this.getViewParam(["layout","bindings"], true)                                            // 6461
            };                                                                                                         // 6462
        },                                                                                                             // 6463
                                                                                                                       // 6464
        /**                                                                                                            // 6465
         * Gets style injection lists.                                                                                 // 6466
         *                                                                                                             // 6467
         * @returns {Object} styles style injection list settings of the view.                                         // 6468
         */                                                                                                            // 6469
        getStyles : function () {                                                                                      // 6470
                                                                                                                       // 6471
            return this.styles;                                                                                        // 6472
        },                                                                                                             // 6473
                                                                                                                       // 6474
        /**                                                                                                            // 6475
         * Hands back the compiled template id for a given template.                                                   // 6476
         *                                                                                                             // 6477
         * @param templateId                                                                                           // 6478
         */                                                                                                            // 6479
        getTemplateDescriptor: function(templateId)                                                                    // 6480
        {                                                                                                              // 6481
            return Alpaca.getTemplateDescriptor(this, templateId);                                                     // 6482
        },                                                                                                             // 6483
                                                                                                                       // 6484
        /**                                                                                                            // 6485
         * Gets message for the given id.                                                                              // 6486
         *                                                                                                             // 6487
         * @param {String} messageId Message id.                                                                       // 6488
         *                                                                                                             // 6489
         * @returns {String} Message mapped to the given id.                                                           // 6490
         */                                                                                                            // 6491
        getMessage : function (messageId) {                                                                            // 6492
            var messageForLocale = this.getViewParam(["messages",Alpaca.defaultLocale,messageId]);                     // 6493
            return Alpaca.isEmpty(messageForLocale) ? this.getViewParam(["messages",messageId]): messageForLocale;     // 6494
        },                                                                                                             // 6495
                                                                                                                       // 6496
        /**                                                                                                            // 6497
         * Retrieves view parameter based on configuration Id or Id array.                                             // 6498
         *                                                                                                             // 6499
         * @param {String|Array} configId Configuration id or array.                                                   // 6500
         *                                                                                                             // 6501
         * @returns {Any} View parameter mapped to configuration Id or Id array.                                       // 6502
         */                                                                                                            // 6503
        getViewParam: function (configId, topLevelOnly) {                                                              // 6504
                                                                                                                       // 6505
            // Try the fields                                                                                          // 6506
            var fieldPath = this.field.path;                                                                           // 6507
            if (this.fields && this.fields[fieldPath]) {                                                               // 6508
                var configVal = this._getConfigVal(this.fields[fieldPath], configId);                                  // 6509
                if (!Alpaca.isEmpty(configVal)) {                                                                      // 6510
                    return configVal;                                                                                  // 6511
                }                                                                                                      // 6512
            }                                                                                                          // 6513
                                                                                                                       // 6514
            // array related field path                                                                                // 6515
            if (fieldPath && fieldPath.indexOf('[') != -1 && fieldPath.indexOf(']') != -1) {                           // 6516
                fieldPath = fieldPath.replace(/\[\d+\]/g,"[*]");                                                       // 6517
                if (this.fields && this.fields[fieldPath]) {                                                           // 6518
                    var configVal = this._getConfigVal(this.fields[fieldPath], configId);                              // 6519
                    if (!Alpaca.isEmpty(configVal)) {                                                                  // 6520
                        return configVal;                                                                              // 6521
                    }                                                                                                  // 6522
                }                                                                                                      // 6523
            }                                                                                                          // 6524
                                                                                                                       // 6525
            if (!Alpaca.isEmpty(topLevelOnly) && topLevelOnly && this.field.path != "/") {                             // 6526
                return null;                                                                                           // 6527
            }                                                                                                          // 6528
                                                                                                                       // 6529
            return this._getConfigVal(this, configId);                                                                 // 6530
        },                                                                                                             // 6531
                                                                                                                       // 6532
        /**                                                                                                            // 6533
         * Internal method for getting configuration.                                                                  // 6534
         *                                                                                                             // 6535
         * @private                                                                                                    // 6536
         *                                                                                                             // 6537
         * @param {Any} configVal configuration value.                                                                 // 6538
         * @param {String} configId configuration id.                                                                  // 6539
         *                                                                                                             // 6540
         * @returns {Any} configuration mapping to the given id                                                        // 6541
         */                                                                                                            // 6542
        _getConfigVal : function (configVal, configId) {                                                               // 6543
            if (Alpaca.isArray(configId)) {                                                                            // 6544
                for (var i = 0; i < configId.length && !Alpaca.isEmpty(configVal); i++) {                              // 6545
                    configVal = configVal[configId[i]];                                                                // 6546
                }                                                                                                      // 6547
            } else {                                                                                                   // 6548
                if (!Alpaca.isEmpty(configVal)) {                                                                      // 6549
                    configVal = configVal[configId];                                                                   // 6550
                }                                                                                                      // 6551
            }                                                                                                          // 6552
            return configVal;                                                                                          // 6553
        },                                                                                                             // 6554
                                                                                                                       // 6555
        /**                                                                                                            // 6556
         * Loads an injected style.                                                                                    // 6557
         *                                                                                                             // 6558
         * @param id                                                                                                   // 6559
         */                                                                                                            // 6560
        getInjectedStyle: function(id)                                                                                 // 6561
        {                                                                                                              // 6562
            var injectedStyle = null;                                                                                  // 6563
                                                                                                                       // 6564
            var injections = {};                                                                                       // 6565
            if (this.style)                                                                                            // 6566
            {                                                                                                          // 6567
                var _injections = Alpaca.styleInjections[this.style];                                                  // 6568
                if (_injections) {                                                                                     // 6569
                    Alpaca.mergeObject(_injections, injections);                                                       // 6570
                }                                                                                                      // 6571
            }                                                                                                          // 6572
                                                                                                                       // 6573
            return injectedStyle[id];                                                                                  // 6574
        },                                                                                                             // 6575
                                                                                                                       // 6576
        /**                                                                                                            // 6577
         * Executes a template.                                                                                        // 6578
         *                                                                                                             // 6579
         * @param view                                                                                                 // 6580
         * @param templateDescriptor                                                                                   // 6581
         * @param model                                                                                                // 6582
         */                                                                                                            // 6583
        tmpl: function(templateDescriptor, model)                                                                      // 6584
        {                                                                                                              // 6585
            return Alpaca.tmpl(this, templateDescriptor, model);                                                       // 6586
        }                                                                                                              // 6587
                                                                                                                       // 6588
    });                                                                                                                // 6589
})(jQuery);(function($) {                                                                                              // 6590
                                                                                                                       // 6591
    var Alpaca = $.alpaca;                                                                                             // 6592
                                                                                                                       // 6593
    Alpaca.Field = Base.extend(                                                                                        // 6594
    /**                                                                                                                // 6595
     * @lends Alpaca.Field.prototype                                                                                   // 6596
     */                                                                                                                // 6597
    {                                                                                                                  // 6598
        /**                                                                                                            // 6599
         * @constructs                                                                                                 // 6600
         *                                                                                                             // 6601
         * @class Abstract class that served as base for all Alpaca field classes that provide actual implementation.  // 6602
         *                                                                                                             // 6603
         * @param {Object} container Field container.                                                                  // 6604
         * @param {Any} data Field data.                                                                               // 6605
         * @param {Object} options Field options.                                                                      // 6606
         * @param {Object} schema Field schema.                                                                        // 6607
         * @param {String} viewId view id                                                                              // 6608
         * @param {Alpaca.Connector} connector Field connector.                                                        // 6609
         * @param {Function} errorCallback Error callback.                                                             // 6610
         */                                                                                                            // 6611
        constructor: function(container, data, options, schema, viewId, connector, errorCallback) {                    // 6612
                                                                                                                       // 6613
            var self = this;                                                                                           // 6614
                                                                                                                       // 6615
            // mark that we are initializing                                                                           // 6616
            this.initializing = true;                                                                                  // 6617
                                                                                                                       // 6618
            // container                                                                                               // 6619
            this.container = container;                                                                                // 6620
                                                                                                                       // 6621
            // parent                                                                                                  // 6622
            this.parent = null;                                                                                        // 6623
                                                                                                                       // 6624
            // config                                                                                                  // 6625
            this.data = data;                                                                                          // 6626
            this.options = options;                                                                                    // 6627
            this.schema = schema;                                                                                      // 6628
            this.connector = connector;                                                                                // 6629
            this.errorCallback = function(err)                                                                         // 6630
            {                                                                                                          // 6631
                if (errorCallback)                                                                                     // 6632
                {                                                                                                      // 6633
                    errorCallback(err);                                                                                // 6634
                }                                                                                                      // 6635
                else                                                                                                   // 6636
                {                                                                                                      // 6637
                    Alpaca.defaultErrorCallback.call(self, err);                                                       // 6638
                }                                                                                                      // 6639
            };                                                                                                         // 6640
                                                                                                                       // 6641
            // check if this field rendering is single-level or not                                                    // 6642
            this.singleLevelRendering = false;                                                                         // 6643
                                                                                                                       // 6644
            // set a runtime view                                                                                      // 6645
            this.view = new Alpaca.RuntimeView(viewId, this);                                                          // 6646
                                                                                                                       // 6647
            // things we can draw off the options                                                                      // 6648
            var noOptions = false;                                                                                     // 6649
            if (!this.options) {                                                                                       // 6650
                this.options = {};                                                                                     // 6651
                noOptions = true;                                                                                      // 6652
            }                                                                                                          // 6653
            this.id = this.options.id;                                                                                 // 6654
            this.type = this.options.type;                                                                             // 6655
                                                                                                                       // 6656
            // setup defaults                                                                                          // 6657
            if (!this.id) {                                                                                            // 6658
                this.id = Alpaca.generateId();                                                                         // 6659
            }                                                                                                          // 6660
            var noSchema = false;                                                                                      // 6661
            if (!this.schema) {                                                                                        // 6662
                this.schema = {};                                                                                      // 6663
                noSchema = true;                                                                                       // 6664
            }                                                                                                          // 6665
            if (!this.options.label && this.schema.title !== null) {                                                   // 6666
                this.options.label = this.schema.title;                                                                // 6667
            }                                                                                                          // 6668
                                                                                                                       // 6669
            if (!this.options.helper && this.schema.description !== null) {                                            // 6670
                this.options.helper = this.schema.description;                                                         // 6671
            }                                                                                                          // 6672
                                                                                                                       // 6673
            if (Alpaca.isEmpty(this.options.readonly) && !Alpaca.isEmpty(this.schema.readonly)) {                      // 6674
                this.options.readonly = this.schema.readonly;                                                          // 6675
            }                                                                                                          // 6676
                                                                                                                       // 6677
            // if data is empty, then we check whether we can fall back to a default value                             // 6678
            if (Alpaca.isValEmpty(this.data) && !Alpaca.isEmpty(this.schema["default"])) {                             // 6679
                this.data = this.schema["default"];                                                                    // 6680
                this.showingDefaultData = true;                                                                        // 6681
            }                                                                                                          // 6682
                                                                                                                       // 6683
            // default path                                                                                            // 6684
            this.path = "/";                                                                                           // 6685
                                                                                                                       // 6686
            // validation status                                                                                       // 6687
            this.validation = {};                                                                                      // 6688
                                                                                                                       // 6689
            // events                                                                                                  // 6690
            this._events = {};                                                                                         // 6691
                                                                                                                       // 6692
            // helper function to determine if we're in a display-only mode                                            // 6693
            this.isDisplayOnly = function()                                                                            // 6694
            {                                                                                                          // 6695
                return (self.view.type == "view");                                                                     // 6696
            };                                                                                                         // 6697
        },                                                                                                             // 6698
                                                                                                                       // 6699
        /**                                                                                                            // 6700
         * Returns default field template id. It would be "fieldSet" for container fields and                          // 6701
         * "controlField" for none-container fields.                                                                   // 6702
         *                                                                                                             // 6703
         * @returns {String} Default field template id.                                                                // 6704
         */                                                                                                            // 6705
        getDefaultFieldTemplateId : function () {                                                                      // 6706
            return "controlField";                                                                                     // 6707
        },                                                                                                             // 6708
                                                                                                                       // 6709
        /**                                                                                                            // 6710
         * Sets up default rendition template from view.                                                               // 6711
         */                                                                                                            // 6712
        setDefaultTemplateDescriptor: function() {                                                                     // 6713
                                                                                                                       // 6714
            var viewTemplateDescriptor = this.view.getTemplateDescriptor(this.getDefaultFieldTemplateId());            // 6715
            var globalTemplateDescriptor = this.view.getGlobalTemplateDescriptor();                                    // 6716
            var layout = this.view.getLayout();                                                                        // 6717
                                                                                                                       // 6718
            // we only allow the global or layout template to be applied to the top-most field                         // 6719
            var trip = false;                                                                                          // 6720
            if (!this.parent)                                                                                          // 6721
            {                                                                                                          // 6722
                if (globalTemplateDescriptor) {                                                                        // 6723
                    this.setTemplateDescriptor(globalTemplateDescriptor);                                              // 6724
                    this.singleLevelRendering = true;                                                                  // 6725
                    trip = true;                                                                                       // 6726
                }                                                                                                      // 6727
                else if (layout && layout.templateDescriptor) {                                                        // 6728
                    this.setTemplateDescriptor(layout.templateDescriptor);                                             // 6729
                    trip = true;                                                                                       // 6730
                }                                                                                                      // 6731
            }                                                                                                          // 6732
                                                                                                                       // 6733
            if (!trip && viewTemplateDescriptor)                                                                       // 6734
            {                                                                                                          // 6735
                this.setTemplateDescriptor(viewTemplateDescriptor);                                                    // 6736
            }                                                                                                          // 6737
        },                                                                                                             // 6738
                                                                                                                       // 6739
        /**                                                                                                            // 6740
         * This method will be called right after the field instance is created. It will initialize                    // 6741
         * the field to get it ready for rendition.                                                                    // 6742
         */                                                                                                            // 6743
        setup: function() {                                                                                            // 6744
                                                                                                                       // 6745
            if (!this.initializing) {                                                                                  // 6746
                this.data = this.getValue();                                                                           // 6747
            }                                                                                                          // 6748
                                                                                                                       // 6749
            this.setDefaultTemplateDescriptor();                                                                       // 6750
                                                                                                                       // 6751
            // JSON SCHEMA                                                                                             // 6752
            if (Alpaca.isUndefined(this.schema.required)) {                                                            // 6753
                this.schema.required = false;                                                                          // 6754
            }                                                                                                          // 6755
                                                                                                                       // 6756
            // VALIDATION                                                                                              // 6757
            if (Alpaca.isUndefined(this.options.validate)) {                                                           // 6758
                this.options.validate = true;                                                                          // 6759
            }                                                                                                          // 6760
                                                                                                                       // 6761
            // OPTIONS                                                                                                 // 6762
            if (Alpaca.isUndefined(this.options.disabled)) {                                                           // 6763
                this.options.disabled = false;                                                                         // 6764
            }                                                                                                          // 6765
                                                                                                                       // 6766
            // MESSAGES                                                                                                // 6767
            if (Alpaca.isUndefined(this.options.showMessages)) {                                                       // 6768
                this.options.showMessages = true;                                                                      // 6769
            }                                                                                                          // 6770
        },                                                                                                             // 6771
                                                                                                                       // 6772
        /**                                                                                                            // 6773
         * Registers an event listener.                                                                                // 6774
         *                                                                                                             // 6775
         * @param name                                                                                                 // 6776
         * @param fn                                                                                                   // 6777
         * @returns {*}                                                                                                // 6778
         */                                                                                                            // 6779
        on: function(name, fn)                                                                                         // 6780
        {                                                                                                              // 6781
            Alpaca.logDebug("Adding listener for event: " + name);                                                     // 6782
            this._events[name] = fn;                                                                                   // 6783
            return this;                                                                                               // 6784
        },                                                                                                             // 6785
                                                                                                                       // 6786
        /**                                                                                                            // 6787
         * Triggers an event and propagates the event up the parent chain.                                             // 6788
         *                                                                                                             // 6789
         * @param name                                                                                                 // 6790
         * @param event                                                                                                // 6791
         */                                                                                                            // 6792
        triggerWithPropagation: function(name, event)                                                                  // 6793
        {                                                                                                              // 6794
            this.trigger.call(this, name, event);                                                                      // 6795
                                                                                                                       // 6796
            if (this.parent)                                                                                           // 6797
            {                                                                                                          // 6798
                this.parent.triggerWithPropagation.call(this.parent, name, event);                                     // 6799
            }                                                                                                          // 6800
        },                                                                                                             // 6801
                                                                                                                       // 6802
        /**                                                                                                            // 6803
         * Triggers an event                                                                                           // 6804
         *                                                                                                             // 6805
         * @param name                                                                                                 // 6806
         * @param event                                                                                                // 6807
         *                                                                                                             // 6808
         * Remainder of arguments will be passed to the event handler.                                                 // 6809
         *                                                                                                             // 6810
         * @returns {null}                                                                                             // 6811
         */                                                                                                            // 6812
        trigger: function(name, event)                                                                                 // 6813
        {                                                                                                              // 6814
            // NOTE: this == control                                                                                   // 6815
                                                                                                                       // 6816
            Alpaca.logDebug("Firing event: " + name);                                                                  // 6817
            var handler = this._events[name];                                                                          // 6818
                                                                                                                       // 6819
            var ret = null;                                                                                            // 6820
            if (typeof(handler) == "function")                                                                         // 6821
            {                                                                                                          // 6822
                Alpaca.logDebug("Found event handler, calling: " + name);                                              // 6823
                try                                                                                                    // 6824
                {                                                                                                      // 6825
                    ret = handler.call(this, event);                                                                   // 6826
                }                                                                                                      // 6827
                catch (e)                                                                                              // 6828
                {                                                                                                      // 6829
                    Alpaca.logDebug("The event handler caught an exception: " + name);                                 // 6830
                }                                                                                                      // 6831
            }                                                                                                          // 6832
            else                                                                                                       // 6833
            {                                                                                                          // 6834
                Alpaca.logDebug("Could not find an event handler for: " + name);                                       // 6835
            }                                                                                                          // 6836
                                                                                                                       // 6837
            return ret;                                                                                                // 6838
        },                                                                                                             // 6839
                                                                                                                       // 6840
                                                                                                                       // 6841
        /**                                                                                                            // 6842
         * Binds the data into the field.  Called at the very end of construction.                                     // 6843
         */                                                                                                            // 6844
        bindData: function()                                                                                           // 6845
        {                                                                                                              // 6846
            if (!Alpaca.isEmpty(this.data)) {                                                                          // 6847
                this.setValue(this.data);                                                                              // 6848
            }                                                                                                          // 6849
        },                                                                                                             // 6850
                                                                                                                       // 6851
        /**                                                                                                            // 6852
         * This is the entry point method into the field.  It is called by Alpaca for each field being rendered.       // 6853
         *                                                                                                             // 6854
         * Renders this field into the container and creates a DOM element which is bound into the container.          // 6855
         *                                                                                                             // 6856
         * @param {Object|String} view View to be used for rendering field (optional).                                 // 6857
         * @param {Function} callback Post-Render callback (optional).                                                 // 6858
         */                                                                                                            // 6859
        render: function(view, callback)                                                                               // 6860
        {                                                                                                              // 6861
            if (view && (Alpaca.isString(view) || Alpaca.isObject(view))) {                                            // 6862
                this.view.setView(view);                                                                               // 6863
            } else {                                                                                                   // 6864
                if (Alpaca.isEmpty(callback) && Alpaca.isFunction(view)) {                                             // 6865
                    callback = view;                                                                                   // 6866
                }                                                                                                      // 6867
            }                                                                                                          // 6868
            // last try to see if we can populate the label from propertyId                                            // 6869
            if (this.options.label === null && this.propertyId) {                                                      // 6870
                this.options.label = this.propertyId;                                                                  // 6871
            }                                                                                                          // 6872
                                                                                                                       // 6873
            // make a copy of name field                                                                               // 6874
            if (this.options.name) {                                                                                   // 6875
                this.name = this.options.name;                                                                         // 6876
            }                                                                                                          // 6877
                                                                                                                       // 6878
            // set default name value if it is not provided through options.                                           // 6879
            if (!this.name)                                                                                            // 6880
            {                                                                                                          // 6881
                // has path?                                                                                           // 6882
                if (this.parent && this.parent.name && this.path) {                                                    // 6883
                    var lastSegment = this.path.substring(this.path.lastIndexOf('/')+1);                               // 6884
                    if (lastSegment.indexOf("[") != -1 && lastSegment.indexOf("]") != -1) {                            // 6885
                        lastSegment = lastSegment.substring(lastSegment.indexOf("[") + 1, lastSegment.indexOf("]"));   // 6886
                    }                                                                                                  // 6887
                    if (lastSegment) {                                                                                 // 6888
                        this.name = this.parent.name + "_" + lastSegment;                                              // 6889
                        this.nameCalculated = true;                                                                    // 6890
                    }                                                                                                  // 6891
                } else {                                                                                               // 6892
                    if (this.path) {                                                                                   // 6893
                       this.name = this.path.replace(/\//g,"").replace(/\[/g,"_").replace(/\]/g,"");                   // 6894
                       this.nameCalculated = true;                                                                     // 6895
                    }                                                                                                  // 6896
                }                                                                                                      // 6897
            }                                                                                                          // 6898
                                                                                                                       // 6899
            this.setup();                                                                                              // 6900
                                                                                                                       // 6901
            this._render(callback);                                                                                    // 6902
        },                                                                                                             // 6903
                                                                                                                       // 6904
        /**                                                                                                            // 6905
         * Internal method for processing the render.                                                                  // 6906
         *                                                                                                             // 6907
         * @private                                                                                                    // 6908
         * @param {Function} callback Post-render callback.                                                            // 6909
         */                                                                                                            // 6910
        _render: function(callback) {                                                                                  // 6911
            var _this = this;                                                                                          // 6912
                                                                                                                       // 6913
            // remove the previous outerEl if it exists                                                                // 6914
            if (this.getEl()) {                                                                                        // 6915
                this.getEl().remove();                                                                                 // 6916
            }                                                                                                          // 6917
                                                                                                                       // 6918
            // check if it needs to be wrapped in a form                                                               // 6919
            if (this.options.renderForm) {                                                                             // 6920
                if (!this.options.form) {                                                                              // 6921
                    this.options.form = {};                                                                            // 6922
                }                                                                                                      // 6923
                this.options.form.viewType = /*this.viewType*/this.view.type;                                          // 6924
                var form = this.form;                                                                                  // 6925
                if (!form) {                                                                                           // 6926
                    form = new Alpaca.Form(this.container, this.options.form, this.view.id, this.connector, this.errorCallback);
                }                                                                                                      // 6928
                form.render(function(form) {                                                                           // 6929
                    // load the appropriate template and render it                                                     // 6930
                    _this._processRender(form.formFieldsContainer, function() {                                        // 6931
                        // bind our field dom element into the container                                               // 6932
                        _this.getEl().appendTo(form.formFieldsContainer);                                              // 6933
                        // bind the top field to the form                                                              // 6934
                        form.topControl = _this;                                                                       // 6935
                        if (_this.view.type && _this.view.type != 'view') {                                            // 6936
                            form.initEvents();                                                                         // 6937
                        }                                                                                              // 6938
                        _this.form = form;                                                                             // 6939
                        // allow any post-rendering facilities to kick in                                              // 6940
                        _this.postRender(function() {                                                                  // 6941
                                                                                                                       // 6942
                            // callback                                                                                // 6943
                            if (callback && Alpaca.isFunction(callback)) {                                             // 6944
                                callback(_this);                                                                       // 6945
                            }                                                                                          // 6946
                                                                                                                       // 6947
                        });                                                                                            // 6948
                    });                                                                                                // 6949
                });                                                                                                    // 6950
            } else {                                                                                                   // 6951
                // load the appropriate template and render it                                                         // 6952
                this._processRender(this.container, function() {                                                       // 6953
                    // bind our field dom element into the container                                                   // 6954
                    _this.getEl().appendTo(_this.container);                                                           // 6955
                    // allow any post-rendering facilities to kick in                                                  // 6956
                    _this.postRender(function() {                                                                      // 6957
                                                                                                                       // 6958
                        // callback                                                                                    // 6959
                        if (callback && Alpaca.isFunction(callback)) {                                                 // 6960
                            callback(_this);                                                                           // 6961
                        }                                                                                              // 6962
                                                                                                                       // 6963
                    });                                                                                                // 6964
                });                                                                                                    // 6965
            }                                                                                                          // 6966
        },                                                                                                             // 6967
                                                                                                                       // 6968
        /**                                                                                                            // 6969
         * NOTE: this is no longer needed since all templates are compiled and cached on init.                         // 6970
         *                                                                                                             // 6971
         * Responsible for fetching any templates needed so as to render the                                           // 6972
         * current mode for this field.                                                                                // 6973
         *                                                                                                             // 6974
         * Once completed, the onSuccess method is called.                                                             // 6975
         *                                                                                                             // 6976
         * @private                                                                                                    // 6977
         *                                                                                                             // 6978
         * @param {Object} parentEl Field container.                                                                   // 6979
         * @param {Function} onSuccess onSuccess callback.                                                             // 6980
         */                                                                                                            // 6981
        _processRender: function(parentEl, onSuccess) {                                                                // 6982
            var _this = this;                                                                                          // 6983
                                                                                                                       // 6984
            var templateDescriptor = this.getTemplateDescriptor();                                                     // 6985
                                                                                                                       // 6986
            // the data we'll render                                                                                   // 6987
            var theData = this.data;                                                                                   // 6988
            // if we're in display-only mode, and theData is an object, convert to string                              // 6989
            if (this.isDisplayOnly() && typeof(theData) == "object") {                                                 // 6990
                theData = JSON.stringify(theData);                                                                     // 6991
            }                                                                                                          // 6992
                                                                                                                       // 6993
            // render field template                                                                                   // 6994
            if (Alpaca.collectTiming)                                                                                  // 6995
            {                                                                                                          // 6996
                var t1 = new Date().getTime();                                                                         // 6997
            }                                                                                                          // 6998
                                                                                                                       // 6999
            var renderedDomElement = _this.view.tmpl(templateDescriptor, {                                             // 7000
                "id": this.getId(),                                                                                    // 7001
                "options": this.options,                                                                               // 7002
                "schema": this.schema,                                                                                 // 7003
                "data": theData,                                                                                       // 7004
                "view": this.view,                                                                                     // 7005
                "path": this.path                                                                                      // 7006
            }, {});                                                                                                    // 7007
                                                                                                                       // 7008
            if (Alpaca.collectTiming)                                                                                  // 7009
            {                                                                                                          // 7010
                var t2 = new Date().getTime();                                                                         // 7011
                                                                                                                       // 7012
                var counters = Alpaca.Counters("tmpl");                                                                // 7013
                counters.increment(this.type, (t2-t1));                                                                // 7014
            }                                                                                                          // 7015
                                                                                                                       // 7016
            // TODO: Alpaca currently assumes that everything under parentEl is the control itself                     // 7017
            // the workaround for TABLE view is unaccommodating toward this                                            // 7018
            // a click on the label behaves like a click on the cell                                                   // 7019
            // this needs more work                                                                                    // 7020
            renderedDomElement.appendTo(parentEl);                                                                     // 7021
                                                                                                                       // 7022
            // if we got back multiple dom elements, then look for the dom element where "data-control" has a value of // 7023
            //   "append" = place the control into this dom element                                                    // 7024
            var newEl = renderedDomElement;                                                                            // 7025
            if (renderedDomElement.size() > 1) {                                                                       // 7026
                renderedDomElement.each(function(k,v) {                                                                // 7027
                    if ($(this).attr("data-control") == "append") {                                                    // 7028
                        newEl = $(this);                                                                               // 7029
                    }                                                                                                  // 7030
                });                                                                                                    // 7031
            }                                                                                                          // 7032
            //this.setEl(renderedDomElement);                                                                          // 7033
            this.setEl(newEl);                                                                                         // 7034
                                                                                                                       // 7035
                                                                                                                       // 7036
            ///                                                                                                        // 7037
            // in the case of a control field, the renderedDomElement is the control field rendered using the template // 7038
            // 'templateDescriptor' which is the controlField template from the view                                   // 7039
            //                                                                                                         // 7040
            // this renderedDomElement services as a container for the control field itself which we can now render INTO
            // the renderedDomElement if we want.                                                                      // 7042
            //                                                                                                         // 7043
            // however, if we're in DISPLAY_ONLY mode (i.e. view.type == "view") then the controlField will have already
            // rendered a simple textual representation of the data                                                    // 7045
            //                                                                                                         // 7046
            // therefore, if we're in DISPLAY_ONLY mode, we do not want to render the field control (which would be something
            // like an INPUT field).  therefore, if we're rendering a control (like a text field), then we should stop now
            // otherwise, if we are a ContainerField, then we do want to continue so that any children can process     // 7049
            //                                                                                                         // 7050
            // in addition, if we're in singleLevelRendering (in which case the top most global template has taken care
            // of rendering everything), then we do not want to render the field.                                      // 7052
            if (!this.singleLevelRendering) {                                                                          // 7053
                                                                                                                       // 7054
                if (!this.isDisplayOnly() || (!this.isControlField))                                                   // 7055
                {                                                                                                      // 7056
                    this.renderField(function() {                                                                      // 7057
                        if (onSuccess) {                                                                               // 7058
                            onSuccess(this);                                                                           // 7059
                        }                                                                                              // 7060
                    });                                                                                                // 7061
                }                                                                                                      // 7062
                else                                                                                                   // 7063
                {                                                                                                      // 7064
                    if (onSuccess) {                                                                                   // 7065
                        onSuccess(this);                                                                               // 7066
                    }                                                                                                  // 7067
                }                                                                                                      // 7068
                                                                                                                       // 7069
            } else {                                                                                                   // 7070
                if (onSuccess) {                                                                                       // 7071
                    onSuccess(this);                                                                                   // 7072
                }                                                                                                      // 7073
            }                                                                                                          // 7074
        },                                                                                                             // 7075
                                                                                                                       // 7076
        /**                                                                                                            // 7077
         * Renders DOM elements for this field.                                                                        // 7078
         *                                                                                                             // 7079
         * @param onSuccess {Function} onSuccess callback.                                                             // 7080
         */                                                                                                            // 7081
        renderField: function(onSuccess) {                                                                             // 7082
        },                                                                                                             // 7083
                                                                                                                       // 7084
        /**                                                                                                            // 7085
         * Applies style injection function for the provided item key.                                                 // 7086
         *                                                                                                             // 7087
         * @param key item key for style injection                                                                     // 7088
         * @param targetDiv target DIV of style injection                                                              // 7089
         */                                                                                                            // 7090
        getStyleInjection: function(key,targetDiv, arg1, arg2) {                                                       // 7091
            if (this.view.style && Alpaca.styleInjections[this.view.style] && Alpaca.styleInjections[this.view.style][key]) {
                Alpaca.styleInjections[this.view.style][key].call(this,targetDiv, arg1, arg2);                         // 7093
            }                                                                                                          // 7094
        },                                                                                                             // 7095
                                                                                                                       // 7096
        /**                                                                                                            // 7097
         * This method will be called after the field rendition is complete. It is served as a way to make final       // 7098
         * modifications to the dom elements that were produced.                                                       // 7099
         */                                                                                                            // 7100
        postRender: function(callback) {                                                                               // 7101
                                                                                                                       // 7102
            // try to avoid adding unnecessary injections for display view.                                            // 7103
            if (this.view.type != 'view') {                                                                            // 7104
                                                                                                                       // 7105
                // add classes                                                                                         // 7106
                this.getStyleInjection('field',this.getEl());                                                          // 7107
                                                                                                                       // 7108
                this.getEl().addClass("alpaca-field");                                                                 // 7109
                                                                                                                       // 7110
                // for edit or create mode                                                                             // 7111
                // injects Ids                                                                                         // 7112
                if (this.getEl().attr("id") === null) {                                                                // 7113
                    this.getEl().attr("id", this.getId() + "-field-outer");                                            // 7114
                }                                                                                                      // 7115
                if (Alpaca.isEmpty(this.getEl().attr("alpaca-field-id"))) {                                            // 7116
                    this.getEl().attr("alpaca-field-id", this.getId());                                                // 7117
                }                                                                                                      // 7118
                // optional                                                                                            // 7119
                if (this.schema.required) {                                                                            // 7120
                    this.getEl().addClass("alpaca-field-required");                                                    // 7121
                } else {                                                                                               // 7122
                    this.getEl().addClass("alpaca-field-optional");                                                    // 7123
                }                                                                                                      // 7124
                                                                                                                       // 7125
                // readonly                                                                                            // 7126
                if (this.options.readonly) {                                                                           // 7127
                    this.getEl().addClass("alpaca-field-readonly");                                                    // 7128
                    $(':input', this.getEl()).attr('readonly', 'readonly');                                            // 7129
                    $('select', this.getEl()).attr('disabled', 'disabled');                                            // 7130
                    $(':radio', this.getEl()).attr('disabled', 'disabled');                                            // 7131
                    $(':checkbox', this.getEl()).attr('disabled', 'disabled');                                         // 7132
                }                                                                                                      // 7133
                                                                                                                       // 7134
                // allow single or multiple field classes to be specified via the "fieldClass"                         // 7135
                // or "fieldClasses" options                                                                           // 7136
                var applyFieldClass = function(el, thing)                                                              // 7137
                {                                                                                                      // 7138
                    if (thing) {                                                                                       // 7139
                                                                                                                       // 7140
                        var i = 0;                                                                                     // 7141
                        var tokens = null;                                                                             // 7142
                                                                                                                       // 7143
                        if (Alpaca.isArray(thing)) {                                                                   // 7144
                            for (i = 0; i < thing.length; i++) {                                                       // 7145
                                el.addClass(thing[i]);                                                                 // 7146
                            }                                                                                          // 7147
                        }                                                                                              // 7148
                        else {                                                                                         // 7149
                            if (thing.indexOf(",") > -1) {                                                             // 7150
                                tokens = thing.split(",");                                                             // 7151
                                for (i = 0; i < tokens.length; i++) {                                                  // 7152
                                    el.addClass(tokens[i]);                                                            // 7153
                                }                                                                                      // 7154
                            } else if (thing.indexOf(" ") > -1) {                                                      // 7155
                                tokens = thing.split(" ");                                                             // 7156
                                for (i = 0; i < tokens.length; i++) {                                                  // 7157
                                    el.addClass(tokens[i]);                                                            // 7158
                                }                                                                                      // 7159
                            }                                                                                          // 7160
                            else {                                                                                     // 7161
                                el.addClass(thing);                                                                    // 7162
                            }                                                                                          // 7163
                        }                                                                                              // 7164
                    }                                                                                                  // 7165
                };                                                                                                     // 7166
                applyFieldClass(this.getEl(), this.options["fieldClass"]);                                             // 7167
                                                                                                                       // 7168
                // Support for custom styles provided by custom view                                                   // 7169
                var customStyles = this.view.getStyles();                                                              // 7170
                                                                                                                       // 7171
                if (customStyles) {                                                                                    // 7172
                    for (var styleClass in customStyles) {                                                             // 7173
                        $(styleClass, this.container).css(customStyles[styleClass]);                                   // 7174
                    }                                                                                                  // 7175
                }                                                                                                      // 7176
                                                                                                                       // 7177
                // add required field style                                                                            // 7178
                if (this.labelDiv && this.schema.required) {                                                           // 7179
                    this.getStyleInjection('required',this.labelDiv);                                                  // 7180
                }                                                                                                      // 7181
                                                                                                                       // 7182
                // after render                                                                                        // 7183
                if (this.options.disabled) {                                                                           // 7184
                    this.disable();                                                                                    // 7185
                }                                                                                                      // 7186
                                                                                                                       // 7187
                // we bind data if we're in "edit" mode                                                                // 7188
                // typically, we don't bind data if we're in "create" or any other mode                                // 7189
                if (this.view.type && this.view.type == 'edit') {                                                      // 7190
                    this.bindData();                                                                                   // 7191
                }                                                                                                      // 7192
                else if (this.showingDefaultData)                                                                      // 7193
                {                                                                                                      // 7194
                    // if this control is showing default data, then we render the control anyway                      // 7195
                    this.bindData();                                                                                   // 7196
                }                                                                                                      // 7197
                                                                                                                       // 7198
                // some logging to be useful                                                                           // 7199
                if (this.view.type == "create")                                                                        // 7200
                {                                                                                                      // 7201
                    Alpaca.logDebug("Skipping data binding for field: " + this.id + " since view mode is 'create'");   // 7202
                }                                                                                                      // 7203
                                                                                                                       // 7204
                // initialize dom-level events                                                                         // 7205
                if (this.view.type && this.view.type != 'view') {                                                      // 7206
                    this.initEvents();                                                                                 // 7207
                }                                                                                                      // 7208
            }                                                                                                          // 7209
                                                                                                                       // 7210
            // hidden                                                                                                  // 7211
            if (this.options.hidden) {                                                                                 // 7212
                this.getEl().hide();                                                                                   // 7213
            }                                                                                                          // 7214
                                                                                                                       // 7215
            // finished initializing                                                                                   // 7216
            this.initializing = false;                                                                                 // 7217
                                                                                                                       // 7218
            var defaultHideInitValidationError = (this.view.type == 'create');                                         // 7219
            this.hideInitValidationError = Alpaca.isValEmpty(this.options.hideInitValidationError) ? defaultHideInitValidationError : this.options.hideInitValidationError;
                                                                                                                       // 7221
            // final call to update validation state                                                                   // 7222
            if (this.view.type != 'view') {                                                                            // 7223
                this.renderValidationState();                                                                          // 7224
            }                                                                                                          // 7225
                                                                                                                       // 7226
            // set to false after first validation (even if in CREATE mode, we only force init validation error false on first render)
            this.hideInitValidationError = false;                                                                      // 7228
                                                                                                                       // 7229
            // for create view, hide all readonly fields                                                               // 7230
            if (!this.view.displayReadonly) {                                                                          // 7231
                $('.alpaca-field-readonly', this.getEl()).hide();                                                      // 7232
            }                                                                                                          // 7233
                                                                                                                       // 7234
            // field level post render                                                                                 // 7235
            if (this.options.postRender)                                                                               // 7236
            {                                                                                                          // 7237
                this.options.postRender.call(this, function() {                                                        // 7238
                                                                                                                       // 7239
                    callback();                                                                                        // 7240
                                                                                                                       // 7241
                });                                                                                                    // 7242
            }                                                                                                          // 7243
            else                                                                                                       // 7244
            {                                                                                                          // 7245
                callback();                                                                                            // 7246
            }                                                                                                          // 7247
                                                                                                                       // 7248
        },                                                                                                             // 7249
                                                                                                                       // 7250
        /**                                                                                                            // 7251
         * Retrieves the rendered DOM element.                                                                         // 7252
         *                                                                                                             // 7253
         * @returns {Object} The rendered DOM element.                                                                 // 7254
         */                                                                                                            // 7255
        getEl: function() {                                                                                            // 7256
            return this.outerEl;                                                                                       // 7257
        },                                                                                                             // 7258
                                                                                                                       // 7259
        /**                                                                                                            // 7260
         * Sets the outer element of the DOM element to be rendered by this field.                                     // 7261
         *                                                                                                             // 7262
         * @param outerEl New outer element for this field.                                                            // 7263
         */                                                                                                            // 7264
        setEl: function(outerEl) {                                                                                     // 7265
            this.outerEl = outerEl;                                                                                    // 7266
        },                                                                                                             // 7267
                                                                                                                       // 7268
        /**                                                                                                            // 7269
         * Returns the id of the field.                                                                                // 7270
         *                                                                                                             // 7271
         * @returns Field id.                                                                                          // 7272
         */                                                                                                            // 7273
        getId: function() {                                                                                            // 7274
            return this.id;                                                                                            // 7275
        },                                                                                                             // 7276
                                                                                                                       // 7277
        /*        getType: function() {                                                                                // 7278
         return this.type;                                                                                             // 7279
         },*/                                                                                                          // 7280
                                                                                                                       // 7281
        /**                                                                                                            // 7282
         * Returns this field's parent.                                                                                // 7283
         *                                                                                                             // 7284
         * @returns {Alpaca.Field} Field parent.                                                                       // 7285
         */                                                                                                            // 7286
        getParent: function() {                                                                                        // 7287
            return this.parent;                                                                                        // 7288
        },                                                                                                             // 7289
                                                                                                                       // 7290
        /**                                                                                                            // 7291
         * Finds if this field is top level.                                                                           // 7292
         *                                                                                                             // 7293
         * @returns {Boolean} True if this field is the top level one, false otherwise.                                // 7294
         */                                                                                                            // 7295
        isTopLevel: function() {                                                                                       // 7296
            return Alpaca.isEmpty(this.parent);                                                                        // 7297
        },                                                                                                             // 7298
                                                                                                                       // 7299
        /**                                                                                                            // 7300
         * Returns the value of this field.                                                                            // 7301
         *                                                                                                             // 7302
         * @returns {Any} value Field value.                                                                           // 7303
         */                                                                                                            // 7304
        getValue: function() {                                                                                         // 7305
            return this.data;                                                                                          // 7306
        },                                                                                                             // 7307
                                                                                                                       // 7308
        /**                                                                                                            // 7309
         * Sets the value of the field.                                                                                // 7310
         *                                                                                                             // 7311
         * @param {Any} value Value to be set.                                                                         // 7312
         */                                                                                                            // 7313
        setValue: function(value) {                                                                                    // 7314
            this.data = value;                                                                                         // 7315
            this.triggerUpdate();                                                                                      // 7316
        },                                                                                                             // 7317
                                                                                                                       // 7318
        /**                                                                                                            // 7319
         * Resets value to default.                                                                                    // 7320
         */                                                                                                            // 7321
        setDefault: function() {                                                                                       // 7322
        },                                                                                                             // 7323
                                                                                                                       // 7324
        /**                                                                                                            // 7325
         * Returns the field template descriptor.                                                                      // 7326
         *                                                                                                             // 7327
         * @returns {Object} template descriptor                                                                       // 7328
         */                                                                                                            // 7329
        getTemplateDescriptor: function() {                                                                            // 7330
            return this.templateDescriptor;                                                                            // 7331
        },                                                                                                             // 7332
                                                                                                                       // 7333
        /**                                                                                                            // 7334
         * Sets the field template descriptor.                                                                         // 7335
         *                                                                                                             // 7336
         * @param {Object} template descriptor                                                                         // 7337
         */                                                                                                            // 7338
        setTemplateDescriptor: function(templateDescriptor) {                                                          // 7339
            this.templateDescriptor = templateDescriptor;                                                              // 7340
        },                                                                                                             // 7341
                                                                                                                       // 7342
        /**                                                                                                            // 7343
         * Renders a validation state message below the field.                                                         // 7344
         *                                                                                                             // 7345
         * @param {String} messages Validation state messages.                                                         // 7346
         * @param {Boolean} beforeStatus Previous validation status.                                                   // 7347
         */                                                                                                            // 7348
        displayMessage: function(messages, beforeStatus) {                                                             // 7349
            // remove the message element if it exists                                                                 // 7350
            var _this = this;                                                                                          // 7351
            //if (beforeStatus == false) {                                                                             // 7352
                $("[id^='" + _this.getId() + "-field-message']", _this.getEl()).remove();                              // 7353
            //}                                                                                                        // 7354
            // add message and generate it                                                                             // 7355
            if (messages && messages.length > 0) {                                                                     // 7356
                $.each(messages, function(index, message) {                                                            // 7357
                    if (message.length > 0) {                                                                          // 7358
                        var messageTemplateDescriptor = _this.view.getTemplateDescriptor("controlFieldMessage");       // 7359
                        if (messageTemplateDescriptor) {                                                               // 7360
                            _this.messageElement = _this.view.tmpl(messageTemplateDescriptor, {                        // 7361
                                "message": message                                                                     // 7362
                            });                                                                                        // 7363
                            _this.getStyleInjection('errorMessage',_this.messageElement);                              // 7364
                            if (_this.hideInitValidationError) {                                                       // 7365
                                _this.messageElement.addClass("alpaca-controlfield-message-hidden");                   // 7366
                            } else {                                                                                   // 7367
                                _this.messageElement.addClass("alpaca-controlfield-message");                          // 7368
                            }                                                                                          // 7369
                            _this.messageElement.attr("id", _this.getId() + '-field-message-' + index);                // 7370
                            // check to see if we have a message container rendered                                    // 7371
                            if ($('.alpaca-controlfield-message-container', _this.getEl()).length) {                   // 7372
                                _this.messageElement.appendTo($('.alpaca-controlfield-message-container', _this.getEl()));
                            } else {                                                                                   // 7374
                                _this.messageElement.appendTo(_this.getEl());                                          // 7375
                            }                                                                                          // 7376
                        }                                                                                              // 7377
                                                                                                                       // 7378
                        _this.getStyleInjection('addErrorMessage', _this.getEl(), message);                            // 7379
                    }                                                                                                  // 7380
                });                                                                                                    // 7381
            }                                                                                                          // 7382
        },                                                                                                             // 7383
                                                                                                                       // 7384
        /**                                                                                                            // 7385
         * Injects styles to the DOM of the rendered field reflects the validation state                               // 7386
         * of the field. If necessary, displays validation messages as well.                                           // 7387
         *                                                                                                             // 7388
         * @param {Boolean} checkChildren whether to render the validation state for any child fields                  // 7389
         */                                                                                                            // 7390
        renderValidationState: function(checkChildren) {                                                               // 7391
                                                                                                                       // 7392
            // internal method for conducting either a depth first validation of child fields                          // 7393
            // or a trickle up re-validation of dependent parents                                                      // 7394
            // this method gets called with the context (this) == field                                                // 7395
            var _rvc = function(checkChildren, diving)                                                                 // 7396
            {                                                                                                          // 7397
                if (this.options.validate) {                                                                           // 7398
                                                                                                                       // 7399
                    // if we're instructed to check children, always go depth first right away                         // 7400
                    if (checkChildren && this.children)                                                                // 7401
                    {                                                                                                  // 7402
                        for (var i = 0; i < this.children.length; i++) {                                               // 7403
                            _rvc.call(this.children[i], checkChildren, true);                                          // 7404
                        }                                                                                              // 7405
                    }                                                                                                  // 7406
                                                                                                                       // 7407
                    // current validation status                                                                       // 7408
                    var beforeStatus = this.isValid();                                                                 // 7409
                                                                                                                       // 7410
                    // clear out previous validation UI markers                                                        // 7411
                    this.getStyleInjection("removeError",this.getEl());                                                // 7412
                    this.getEl().removeClass("alpaca-field-invalid alpaca-field-invalid-hidden alpaca-field-valid");   // 7413
                                                                                                                       // 7414
                    // now run the validation                                                                          // 7415
                    if (this.validate()) {                                                                             // 7416
                                                                                                                       // 7417
                        // TRIGGER: "validated"                                                                        // 7418
                        this.triggerWithPropagation("validated");                                                      // 7419
                                                                                                                       // 7420
                        // mark valid                                                                                  // 7421
                        this.getEl().addClass("alpaca-field-valid");                                                   // 7422
                                                                                                                       // 7423
                    } else {                                                                                           // 7424
                                                                                                                       // 7425
                        // TRIGGER: "invalidated"                                                                      // 7426
                        this.triggerWithPropagation("invalidated");                                                    // 7427
                                                                                                                       // 7428
                        // we don't markup invalidation state for readonly fields                                      // 7429
                        if (!this.options.readonly)                                                                    // 7430
                        {                                                                                              // 7431
                            if (!this.hideInitValidationError) {                                                       // 7432
                                this.getStyleInjection("error",this.getEl());                                          // 7433
                                this.getEl().addClass("alpaca-field-invalid");                                         // 7434
                            } else {                                                                                   // 7435
                                this.getEl().addClass("alpaca-field-invalid-hidden");                                  // 7436
                            }                                                                                          // 7437
                        }                                                                                              // 7438
                        else                                                                                           // 7439
                        {                                                                                              // 7440
                            // this field is invalid and is also read-only, so we're not supposed to inform the end-user
                            // within the UI (since there is nothing we can do about it)                               // 7442
                            // here, we log a message to debug to inform the developer                                 // 7443
                            Alpaca.logWarn("The field (id=" + this.getId() + ", title=" + this.getTitle() + ", label=" + this.options.label + ") is invalid and also read-only");
                        }                                                                                              // 7445
                    }                                                                                                  // 7446
                                                                                                                       // 7447
                    // now check whether valid                                                                         // 7448
                    var afterStatus = this.isValid();                                                                  // 7449
                                                                                                                       // 7450
                    // Allow for the message to change                                                                 // 7451
                    if (this.options.showMessages) {                                                                   // 7452
                                                                                                                       // 7453
                        if (!this.initializing) {                                                                      // 7454
                                                                                                                       // 7455
                            // we don't markup invalidation state for readonly fields                                  // 7456
                            if (!this.options.readonly)                                                                // 7457
                            {                                                                                          // 7458
                                var messages = [];                                                                     // 7459
                                for (var messageId in this.validation) {                                               // 7460
                                    if (!this.validation[messageId]["status"]) {                                       // 7461
                                        messages.push(this.validation[messageId]["message"]);                          // 7462
                                    }                                                                                  // 7463
                                }                                                                                      // 7464
                                this.displayMessage(messages, beforeStatus);                                           // 7465
                            }                                                                                          // 7466
                        }                                                                                              // 7467
                    }                                                                                                  // 7468
                                                                                                                       // 7469
                    // if the validations state changed and we're not "diving", then it means we're at the top field   // 7470
                    // of our depth-first dive.                                                                        // 7471
                    //                                                                                                 // 7472
                    // a change to the validation state means that any fields dependent on us should have their validation
                    // checked, thus we allow for trickle-up validation here                                           // 7474
                                                                                                                       // 7475
                    if (!diving)                                                                                       // 7476
                    {                                                                                                  // 7477
                        var forceRevalidation = false;                                                                 // 7478
                        var parent = this.parent;                                                                      // 7479
                        while (parent) {                                                                               // 7480
                            // if parent has custom validator, it should re-validate.                                  // 7481
                            if (parent.options && (parent.options.forceRevalidation || parent.options.validator)) {    // 7482
                                forceRevalidation = true;                                                              // 7483
                            }                                                                                          // 7484
                            parent = parent.parent;                                                                    // 7485
                        }                                                                                              // 7486
                        if ((beforeStatus != afterStatus && this.parent && this.parent.renderValidationState) || forceRevalidation) {
                            this.parent.renderValidationState();                                                       // 7488
                        }                                                                                              // 7489
                    }                                                                                                  // 7490
                                                                                                                       // 7491
                    // apply custom validation                                                                         // 7492
                    this._validateCustomValidator();                                                                   // 7493
                }                                                                                                      // 7494
            };                                                                                                         // 7495
                                                                                                                       // 7496
            _rvc.call(this, checkChildren, false);                                                                     // 7497
        },                                                                                                             // 7498
                                                                                                                       // 7499
        showHiddenMessages: function() {                                                                               // 7500
            var hiddenDiv = $('.alpaca-field-invalid-hidden', this.outerEl);                                           // 7501
            hiddenDiv.removeClass('alpaca-field-invalid-hidden');                                                      // 7502
            this.getStyleInjection('error',hiddenDiv);                                                                 // 7503
            hiddenDiv.addClass('alpaca-field-invalid');                                                                // 7504
            $('.alpaca-controlfield-message-hidden', this.outerEl).removeClass('alpaca-controlfield-message-hidden').addClass('alpaca-controlfield-message');
        },                                                                                                             // 7506
                                                                                                                       // 7507
        /**                                                                                                            // 7508
         * Updates validation based on provided validation information. This method is for user provided               // 7509
         * custom validator only.                                                                                      // 7510
         *                                                                                                             // 7511
         * @param {String} valId Validator id.                                                                         // 7512
         * @param {Object} valInfo Object that contains validation information.                                        // 7513
         */                                                                                                            // 7514
        updateValidationState: function(valId, valInfo) {                                                              // 7515
            if (this.options.validate) {                                                                               // 7516
                                                                                                                       // 7517
                var beforeStatus = this.isValid();                                                                     // 7518
                // Push the message                                                                                    // 7519
                this.validation[valId] = valInfo;                                                                      // 7520
                                                                                                                       // 7521
                if (!this.hideInitValidationError) {                                                                   // 7522
                                                                                                                       // 7523
                    // we don't markup invalidation state for readonly fields                                          // 7524
                    if (!this.options.readonly)                                                                        // 7525
                    {                                                                                                  // 7526
                        if (valInfo && !valInfo.status) {                                                              // 7527
                            this.getEl().removeClass("alpaca-field-valid");                                            // 7528
                            this.getStyleInjection("error",this.getEl());                                              // 7529
                            this.getEl().addClass("alpaca-field-invalid");                                             // 7530
                        }                                                                                              // 7531
                    }                                                                                                  // 7532
                }                                                                                                      // 7533
                                                                                                                       // 7534
                // Push the message                                                                                    // 7535
                this.validation[valId] = valInfo;                                                                      // 7536
                                                                                                                       // 7537
                // Allow for the message to change                                                                     // 7538
                if (this.options.showMessages) {                                                                       // 7539
                    if (!this.initializing) {                                                                          // 7540
                                                                                                                       // 7541
                        if (!this.hideInitValidationError) {                                                           // 7542
                                                                                                                       // 7543
                            // we don't markup invalidation state for readonly fields                                  // 7544
                            if (!this.options.readonly)                                                                // 7545
                            {                                                                                          // 7546
                                var messages = [];                                                                     // 7547
                                for (var messageId in this.validation) {                                               // 7548
                                    if (!this.validation[messageId]["status"]) {                                       // 7549
                                        messages.push(this.validation[messageId]["message"]);                          // 7550
                                    }                                                                                  // 7551
                                }                                                                                      // 7552
                                this.displayMessage(messages, beforeStatus);                                           // 7553
                            }                                                                                          // 7554
                        }                                                                                              // 7555
                    }                                                                                                  // 7556
                }                                                                                                      // 7557
                                                                                                                       // 7558
                // Revalidate parents if validation state changed                                                      // 7559
                if (this.isValid() && this.parent && this.parent.renderValidationState) {                              // 7560
                    this.parent.renderValidationState();                                                               // 7561
                }                                                                                                      // 7562
                                                                                                                       // 7563
            }                                                                                                          // 7564
        },                                                                                                             // 7565
                                                                                                                       // 7566
        /**                                                                                                            // 7567
         * Validates this field and returns whether it is in a valid state.                                            // 7568
         *                                                                                                             // 7569
         * @param [Boolean] validateChildren whether to child controls.                                                // 7570
         *                                                                                                             // 7571
         * @returns {Boolean} True if value of this field is valid, false otherwise.                                   // 7572
         */                                                                                                            // 7573
        validate: function(validateChildren) {                                                                         // 7574
                                                                                                                       // 7575
            // if validateChildren, then walk recursively down into child elements                                     // 7576
            if (this.children && validateChildren) {                                                                   // 7577
                for (var i = 0; i < this.children.length; i++) {                                                       // 7578
                    var child = this.children[i];                                                                      // 7579
                    child.validate(validateChildren);                                                                  // 7580
                }                                                                                                      // 7581
            }                                                                                                          // 7582
                                                                                                                       // 7583
            // skip out if we haven't yet bound any data into this control                                             // 7584
            // the control can still be considered to be initializing                                                  // 7585
            var status = true;                                                                                         // 7586
            if (!this.initializing && this.options.validate) {                                                         // 7587
                status = this.handleValidate();                                                                        // 7588
            }                                                                                                          // 7589
                                                                                                                       // 7590
            return status;                                                                                             // 7591
        },                                                                                                             // 7592
                                                                                                                       // 7593
        /**                                                                                                            // 7594
         * Performs validation.                                                                                        // 7595
         */                                                                                                            // 7596
        handleValidate: function() {                                                                                   // 7597
            var valInfo = this.validation;                                                                             // 7598
                                                                                                                       // 7599
            var status = this._validateOptional();                                                                     // 7600
            valInfo["notOptional"] = {                                                                                 // 7601
                "message": status ? "" : this.view.getMessage("notOptional"),                                          // 7602
                "status": status                                                                                       // 7603
            };                                                                                                         // 7604
                                                                                                                       // 7605
            status = this._validateDisallow();                                                                         // 7606
            valInfo["disallowValue"] = {                                                                               // 7607
                "message": status ? "" : Alpaca.substituteTokens(this.view.getMessage("disallowValue"), [this.schema["disallow"].join(',')]),
                "status": status                                                                                       // 7609
            };                                                                                                         // 7610
                                                                                                                       // 7611
            return valInfo["notOptional"]["status"] && valInfo["disallowValue"]["status"];                             // 7612
        },                                                                                                             // 7613
                                                                                                                       // 7614
        /**                                                                                                            // 7615
         * Validates using user provided validator.                                                                    // 7616
         */                                                                                                            // 7617
        _validateCustomValidator: function() {                                                                         // 7618
            var _this = this;                                                                                          // 7619
            if (this.options.validator && Alpaca.isFunction(this.options.validator)) {                                 // 7620
                this.options.validator(this, function(valInfo) {                                                       // 7621
                    _this.updateValidationState('customValidator', valInfo);                                           // 7622
                });                                                                                                    // 7623
            }                                                                                                          // 7624
        },                                                                                                             // 7625
                                                                                                                       // 7626
        /**                                                                                                            // 7627
         * Validates against required property.                                                                        // 7628
         *                                                                                                             // 7629
         * @returns {Boolean} False if this field value is empty but required, true otherwise.                         // 7630
         */                                                                                                            // 7631
        _validateOptional: function() {                                                                                // 7632
            if (this.schema.required && this.isEmpty()) {                                                              // 7633
                return false;                                                                                          // 7634
            }                                                                                                          // 7635
            return true;                                                                                               // 7636
        },                                                                                                             // 7637
                                                                                                                       // 7638
        /**                                                                                                            // 7639
         * Checks whether the field value is allowed or not.                                                           // 7640
         *                                                                                                             // 7641
         * @returns {Boolean} True if the field value is allowed, false otherwise.                                     // 7642
         */                                                                                                            // 7643
        _validateDisallow: function() {                                                                                // 7644
            if (!Alpaca.isValEmpty(this.schema.disallow)) {                                                            // 7645
                var val = this.getValue();                                                                             // 7646
                var disallow = this.schema.disallow;                                                                   // 7647
                if (Alpaca.isArray(disallow)) {                                                                        // 7648
                    var isAllowed = true;                                                                              // 7649
                    $.each(disallow, function(index, value) {                                                          // 7650
                        if ((Alpaca.isObject(val) || Alpaca.isArray(val)) && Alpaca.isString(value)) {                 // 7651
                            value = Alpaca.parseJSON(value);                                                           // 7652
                        }                                                                                              // 7653
                        if (Alpaca.compareObject(val, value)) {                                                        // 7654
                            isAllowed = false;                                                                         // 7655
                        }                                                                                              // 7656
                    });                                                                                                // 7657
                    return isAllowed;                                                                                  // 7658
                } else {                                                                                               // 7659
                    if ((Alpaca.isObject(val) || Alpaca.isArray(val)) && Alpaca.isString(disallow)) {                  // 7660
                        disallow = Alpaca.parseJSON(disallow);                                                         // 7661
                    }                                                                                                  // 7662
                    return !Alpaca.compareObject(val, disallow);                                                       // 7663
                }                                                                                                      // 7664
            }                                                                                                          // 7665
                                                                                                                       // 7666
            return true;                                                                                               // 7667
        },                                                                                                             // 7668
                                                                                                                       // 7669
        /**                                                                                                            // 7670
         * Triggers any event handlers that listens to the update event of this field.                                 // 7671
         */                                                                                                            // 7672
        triggerUpdate: function() {                                                                                    // 7673
            this.getEl().trigger("fieldupdate");                                                                       // 7674
        },                                                                                                             // 7675
                                                                                                                       // 7676
        /**                                                                                                            // 7677
         * Disables the field.                                                                                         // 7678
         */                                                                                                            // 7679
        disable: function() {                                                                                          // 7680
            // OVERRIDE                                                                                                // 7681
        },                                                                                                             // 7682
                                                                                                                       // 7683
        /**                                                                                                            // 7684
         * Enables the field.                                                                                          // 7685
         */                                                                                                            // 7686
        enable: function() {                                                                                           // 7687
            // OVERRIDE                                                                                                // 7688
        },                                                                                                             // 7689
                                                                                                                       // 7690
        /**                                                                                                            // 7691
         * Focuses on the field.                                                                                       // 7692
         */                                                                                                            // 7693
        focus: function() {                                                                                            // 7694
            // OVERRIDE                                                                                                // 7695
        },                                                                                                             // 7696
                                                                                                                       // 7697
        /**                                                                                                            // 7698
         * Purges any event listeners and remove this field from the DOM.                                              // 7699
         */                                                                                                            // 7700
        destroy: function() {                                                                                          // 7701
                                                                                                                       // 7702
            // clean up Alpaca.fieldInstances static reference (used for convenience access to previous rendered fields)
            if (Alpaca && Alpaca.fieldInstances) {                                                                     // 7704
                if (Alpaca.fieldInstances[this.getId()]) {                                                             // 7705
                    delete Alpaca.fieldInstances[this.getId()];                                                        // 7706
                }                                                                                                      // 7707
            }                                                                                                          // 7708
                                                                                                                       // 7709
            // clean up DOM                                                                                            // 7710
            this.getEl().remove();                                                                                     // 7711
        },                                                                                                             // 7712
                                                                                                                       // 7713
        /**                                                                                                            // 7714
         * Shows the field.                                                                                            // 7715
         */                                                                                                            // 7716
        show: function() {                                                                                             // 7717
            if (this.options && this.options.hidden)                                                                   // 7718
            {                                                                                                          // 7719
                // if the hidden option is on, we're always hidden                                                     // 7720
                return;                                                                                                // 7721
            }                                                                                                          // 7722
            else                                                                                                       // 7723
            {                                                                                                          // 7724
                // show the field                                                                                      // 7725
                this.getEl().css({                                                                                     // 7726
                    "display": ""                                                                                      // 7727
                });                                                                                                    // 7728
                                                                                                                       // 7729
                this.onShow();                                                                                         // 7730
            }                                                                                                          // 7731
        },                                                                                                             // 7732
                                                                                                                       // 7733
        onShow: function()                                                                                             // 7734
        {                                                                                                              // 7735
                                                                                                                       // 7736
        },                                                                                                             // 7737
                                                                                                                       // 7738
        /**                                                                                                            // 7739
         * Hides the field.                                                                                            // 7740
         */                                                                                                            // 7741
        hide: function()                                                                                               // 7742
        {                                                                                                              // 7743
            this.getEl().css({                                                                                         // 7744
                "display": "none"                                                                                      // 7745
            });                                                                                                        // 7746
                                                                                                                       // 7747
            this.onHide();                                                                                             // 7748
        },                                                                                                             // 7749
                                                                                                                       // 7750
        onHide: function()                                                                                             // 7751
        {                                                                                                              // 7752
                                                                                                                       // 7753
        },                                                                                                             // 7754
                                                                                                                       // 7755
        isVisible: function() {                                                                                        // 7756
            return !this.isHidden();                                                                                   // 7757
        },                                                                                                             // 7758
                                                                                                                       // 7759
        isHidden: function() {                                                                                         // 7760
            return "none" == this.getEl().css("display");                                                              // 7761
        },                                                                                                             // 7762
                                                                                                                       // 7763
        /**                                                                                                            // 7764
         * Prints the field.                                                                                           // 7765
         */                                                                                                            // 7766
        print: function() {                                                                                            // 7767
            if (this.container.printArea) {                                                                            // 7768
                this.container.printArea();                                                                            // 7769
            }                                                                                                          // 7770
        },                                                                                                             // 7771
                                                                                                                       // 7772
        /**                                                                                                            // 7773
         * Triggered when the field is being revealed as the result of a dependency or conditional calculation         // 7774
         * that has determined that the field should be shown.                                                         // 7775
         */                                                                                                            // 7776
        onDependentReveal: function()                                                                                  // 7777
        {                                                                                                              // 7778
                                                                                                                       // 7779
        },                                                                                                             // 7780
                                                                                                                       // 7781
        /**                                                                                                            // 7782
         * Triggered when the field is being concealed as the result of a dependency or conditional calculation        // 7783
         * that has determined that the field should be hidden.                                                        // 7784
         */                                                                                                            // 7785
        onDependentConceal: function()                                                                                 // 7786
        {                                                                                                              // 7787
                                                                                                                       // 7788
        },                                                                                                             // 7789
                                                                                                                       // 7790
        /**                                                                                                            // 7791
         * Reloads the field.                                                                                          // 7792
         */                                                                                                            // 7793
        reload: function() {                                                                                           // 7794
            this.initializing = true;                                                                                  // 7795
                                                                                                                       // 7796
            if (!Alpaca.isEmpty(this.callback)) {                                                                      // 7797
                this.callback(this, this.renderedCallback);                                                            // 7798
            } else {                                                                                                   // 7799
                this.render(this.renderedCallback);                                                                    // 7800
            }                                                                                                          // 7801
        },                                                                                                             // 7802
                                                                                                                       // 7803
        /**                                                                                                            // 7804
         * Clears the field and resets the field to its original value.                                                // 7805
         */                                                                                                            // 7806
        clear: function() {                                                                                            // 7807
            var newValue = null;                                                                                       // 7808
                                                                                                                       // 7809
            if (this.data) {                                                                                           // 7810
                newValue = this.data;                                                                                  // 7811
            }                                                                                                          // 7812
                                                                                                                       // 7813
            this.setValue(newValue);                                                                                   // 7814
        },                                                                                                             // 7815
                                                                                                                       // 7816
        /**                                                                                                            // 7817
         * Finds if the value of this field is empty.                                                                  // 7818
         *                                                                                                             // 7819
         * @return {Boolean} True if the field value is empty, false otherwise.                                        // 7820
         */                                                                                                            // 7821
        isEmpty: function() {                                                                                          // 7822
            return Alpaca.isValEmpty(this.getValue());                                                                 // 7823
        },                                                                                                             // 7824
                                                                                                                       // 7825
        /**                                                                                                            // 7826
         * Finds if this field is valid.                                                                               // 7827
         *                                                                                                             // 7828
         * @return {Boolean} True if the field is valid, false otherwise.                                              // 7829
         */                                                                                                            // 7830
        isValid: function(checkChildren) {                                                                             // 7831
                                                                                                                       // 7832
            if (checkChildren && this.children)                                                                        // 7833
            {                                                                                                          // 7834
                for (var i = 0; i < this.children.length; i++) {                                                       // 7835
                    var child = this.children[i];                                                                      // 7836
                    if (!child.isValid(checkChildren)) {                                                               // 7837
                        return false;                                                                                  // 7838
                    }                                                                                                  // 7839
                }                                                                                                      // 7840
            }                                                                                                          // 7841
                                                                                                                       // 7842
            if ($.isEmptyObject(this.validation)) {                                                                    // 7843
                return true;                                                                                           // 7844
            } else {                                                                                                   // 7845
                for (var key in this.validation) {                                                                     // 7846
                    if (!this.validation[key].status) {                                                                // 7847
                        return false;                                                                                  // 7848
                    }                                                                                                  // 7849
                }                                                                                                      // 7850
                return true;                                                                                           // 7851
            }                                                                                                          // 7852
        },                                                                                                             // 7853
                                                                                                                       // 7854
        /**                                                                                                            // 7855
         * Initializes event handling.                                                                                 // 7856
         */                                                                                                            // 7857
        initEvents: function() {                                                                                       // 7858
            var _this = this;                                                                                          // 7859
                                                                                                                       // 7860
            if (this.field)                                                                                            // 7861
            {                                                                                                          // 7862
                // trigger control level handlers for things that happen to input element                              // 7863
                this.field.change(function(e) {                                                                        // 7864
                    _this.onChange.call(_this, e);                                                                     // 7865
                    _this.trigger("change", e);                                                                        // 7866
                });                                                                                                    // 7867
                                                                                                                       // 7868
                this.field.focus(function(e) {                                                                         // 7869
                    _this.onFocus.call(_this, e);                                                                      // 7870
                    _this.trigger("focus", e);                                                                         // 7871
                });                                                                                                    // 7872
                                                                                                                       // 7873
                this.field.blur(function(e) {                                                                          // 7874
                    _this.onBlur.call(_this, e);                                                                       // 7875
                    _this.trigger("blur", e);                                                                          // 7876
                });                                                                                                    // 7877
                this.field.mouseover(function(e) {                                                                     // 7878
                    _this.onMouseOver.call(_this, e);                                                                  // 7879
                    _this.trigger("mouseover", e);                                                                     // 7880
                });                                                                                                    // 7881
                this.field.mouseout(function(e) {                                                                      // 7882
                    _this.onMouseOut.call(_this, e);                                                                   // 7883
                    _this.trigger("mouseout", e);                                                                      // 7884
                });                                                                                                    // 7885
                                                                                                                       // 7886
                // register general event handlers through options                                                     // 7887
                $.each(this.options, function(key, func) {                                                             // 7888
                    if (Alpaca.startsWith(key,'onField') && Alpaca.isFunction(func)) {                                 // 7889
                        var event = key.substring(7).toLowerCase();                                                    // 7890
                        _this.field.on(event, function(e) {                                                            // 7891
                            func.call(_this,e);                                                                        // 7892
                        });                                                                                            // 7893
                    }                                                                                                  // 7894
                });                                                                                                    // 7895
            }                                                                                                          // 7896
        },                                                                                                             // 7897
                                                                                                                       // 7898
        /**                                                                                                            // 7899
         * Callback for when the field receives focus.                                                                 // 7900
         *                                                                                                             // 7901
         * Default behavior is for the entire field to highlight.                                                      // 7902
         *                                                                                                             // 7903
         * @param e dom event                                                                                          // 7904
         */                                                                                                            // 7905
        onFocus: function(e) {                                                                                         // 7906
            this.getEl().removeClass("alpaca-field-empty");                                                            // 7907
            this.getEl().addClass("alpaca-field-focused");                                                             // 7908
        },                                                                                                             // 7909
                                                                                                                       // 7910
        /**                                                                                                            // 7911
         * Callback for when the field loses focus (blurs).                                                            // 7912
         *                                                                                                             // 7913
         * Default behavior is for the entire field to un-highlight.                                                   // 7914
         *                                                                                                             // 7915
         * @param e dom event                                                                                          // 7916
         */                                                                                                            // 7917
        onBlur: function(e) {                                                                                          // 7918
            this.getEl().removeClass("alpaca-field-focused");                                                          // 7919
                                                                                                                       // 7920
            // update the UI validation state                                                                          // 7921
            this.renderValidationState();                                                                              // 7922
        },                                                                                                             // 7923
                                                                                                                       // 7924
        /**                                                                                                            // 7925
         * Callback for when the field's value changes.                                                                // 7926
         *                                                                                                             // 7927
         * Default behavior is to update the control's value and notify.                                               // 7928
         *                                                                                                             // 7929
         * @param e Event.                                                                                             // 7930
         */                                                                                                            // 7931
        onChange: function(e) {                                                                                        // 7932
            // store back into data element                                                                            // 7933
            this.data = this.getValue();                                                                               // 7934
            this.triggerUpdate();                                                                                      // 7935
        },                                                                                                             // 7936
                                                                                                                       // 7937
        /**                                                                                                            // 7938
         * Callback for when the mouse moves over a field.                                                             // 7939
         *                                                                                                             // 7940
         * @param e                                                                                                    // 7941
         */                                                                                                            // 7942
        onMouseOver: function(e) {                                                                                     // 7943
                                                                                                                       // 7944
        },                                                                                                             // 7945
                                                                                                                       // 7946
        /**                                                                                                            // 7947
         * Callback for when the mouse moves out of the field.                                                         // 7948
         *                                                                                                             // 7949
         * @param e                                                                                                    // 7950
         */                                                                                                            // 7951
        onMouseOut: function(e) {                                                                                      // 7952
                                                                                                                       // 7953
        },                                                                                                             // 7954
                                                                                                                       // 7955
        /**                                                                                                            // 7956
         * Finds a field control by its path.                                                                          // 7957
         *                                                                                                             // 7958
         * @param {String} path Field control path.                                                                    // 7959
         * @returns {Alpaca.Field} Field control mapped to the path.                                                   // 7960
         */                                                                                                            // 7961
        getControlByPath: function(path) {                                                                             // 7962
            var parentControl = this;                                                                                  // 7963
            if (path) {                                                                                                // 7964
                var pathArray = path.split('/');                                                                       // 7965
                for (var i = 0; i < pathArray.length; i++) {                                                           // 7966
                    if (!Alpaca.isValEmpty(pathArray[i])) {                                                            // 7967
                        if (parentControl && parentControl.childrenByPropertyId) {                                     // 7968
                            //check to see if we need to add the properties field                                      // 7969
                            if (parentControl.childrenByPropertyId[pathArray[i]]) {                                    // 7970
                                parentControl = parentControl.childrenByPropertyId[pathArray[i]];                      // 7971
                            } else {                                                                                   // 7972
                                return null;                                                                           // 7973
                            }                                                                                          // 7974
                        } else {                                                                                       // 7975
                            return null;                                                                               // 7976
                        }                                                                                              // 7977
                    } else {                                                                                           // 7978
                        return null;                                                                                   // 7979
                    }                                                                                                  // 7980
                }                                                                                                      // 7981
                return parentControl;                                                                                  // 7982
            }                                                                                                          // 7983
        },                                                                                                             // 7984
                                                                                                                       // 7985
        // Utility Functions for Form Builder                                                                          // 7986
        /**                                                                                                            // 7987
         * Returns field type.                                                                                         // 7988
         *                                                                                                             // 7989
         * @returns {String} Field type.                                                                               // 7990
         */                                                                                                            // 7991
        getFieldType: function() {                                                                                     // 7992
                                                                                                                       // 7993
        },                                                                                                             // 7994
                                                                                                                       // 7995
        /**                                                                                                            // 7996
         * Returns schema data type.                                                                                   // 7997
         *                                                                                                             // 7998
         * @returns {String} Schema data type.                                                                         // 7999
         */                                                                                                            // 8000
        getType: function() {                                                                                          // 8001
                                                                                                                       // 8002
        }                                                                                                              // 8003
    });                                                                                                                // 8004
                                                                                                                       // 8005
    // Registers additional messages                                                                                   // 8006
    Alpaca.registerMessages({                                                                                          // 8007
        "disallowValue": "{0} are disallowed values.",                                                                 // 8008
        "notOptional": "This field is not optional."                                                                   // 8009
    });                                                                                                                // 8010
                                                                                                                       // 8011
})(jQuery);                                                                                                            // 8012
(function($) {                                                                                                         // 8013
                                                                                                                       // 8014
    var Alpaca = $.alpaca;                                                                                             // 8015
                                                                                                                       // 8016
    Alpaca.ControlField = Alpaca.Field.extend(                                                                         // 8017
    /**                                                                                                                // 8018
     * @lends Alpaca.ControlField.prototype                                                                            // 8019
     */                                                                                                                // 8020
    {                                                                                                                  // 8021
        /**                                                                                                            // 8022
         * @constructs                                                                                                 // 8023
         * @augments Alpaca.Field                                                                                      // 8024
         *                                                                                                             // 8025
         * @class Abstract base class for Alpaca non-container Fields.                                                 // 8026
         *                                                                                                             // 8027
         * @param {Object} container Field container.                                                                  // 8028
         * @param {Any} data Field data.                                                                               // 8029
         * @param {Object} options Field options.                                                                      // 8030
         * @param {Object} schema Field schema.                                                                        // 8031
         * @param {Object|String} view Field view.                                                                     // 8032
         * @param {Alpaca.Connector} connector Field connector.                                                        // 8033
         * @param {Function} errorCallback Error callback.                                                             // 8034
         */                                                                                                            // 8035
        constructor: function(container, data, options, schema, view, connector, errorCallback) {                      // 8036
            this.base(container, data, options, schema, view, connector, errorCallback);                               // 8037
                                                                                                                       // 8038
            // tag to flag that this is a control field                                                                // 8039
            // used by Field base class to determine whether to traverse into this during a display-only rendering     // 8040
            this.isControlField = true;                                                                                // 8041
        },                                                                                                             // 8042
                                                                                                                       // 8043
        /**                                                                                                            // 8044
         * @see Alpaca.Field#setDefault                                                                                // 8045
         */                                                                                                            // 8046
        setDefault: function() {                                                                                       // 8047
            var defaultData = Alpaca.isEmpty(this.schema['default']) ? "" : this.schema['default'];                    // 8048
            this.setValue(defaultData);                                                                                // 8049
        },                                                                                                             // 8050
                                                                                                                       // 8051
        /**                                                                                                            // 8052
         * @see Alpaca.Field#renderField                                                                               // 8053
         */                                                                                                            // 8054
        renderField: function(onSuccess) {                                                                             // 8055
        },                                                                                                             // 8056
                                                                                                                       // 8057
        /**                                                                                                            // 8058
         * Injects Field Element into its container.                                                                   // 8059
         *                                                                                                             // 8060
         * @param {Object} element Field element to be injected.                                                       // 8061
         */                                                                                                            // 8062
        injectField: function(element) {                                                                               // 8063
            // find out the field container                                                                            // 8064
            var containerElem = $('.alpaca-controlfield-container', this.outerEl);                                     // 8065
            if (containerElem.length) {                                                                                // 8066
                this.fieldContainer = containerElem;                                                                   // 8067
            } else {                                                                                                   // 8068
                this.fieldContainer = this.outerEl;                                                                    // 8069
            }                                                                                                          // 8070
            // now figure out where exactly we want to insert it                                                       // 8071
            var parentNode = $('.alpaca-field-container-field', this.fieldContainer);                                  // 8072
            if (parentNode.length > 0) {                                                                               // 8073
                if (parentNode.attr('data-replace') == 'true') {                                                       // 8074
                    parentNode.replaceWith(element);                                                                   // 8075
                } else {                                                                                               // 8076
                    element.appendTo(parentNode);                                                                      // 8077
                }                                                                                                      // 8078
            } else {                                                                                                   // 8079
                if (this.fieldContainer.attr('data-replace') == 'true') {                                              // 8080
                    this.fieldContainer.replaceWith(element);                                                          // 8081
                } else {                                                                                               // 8082
                    element.prependTo(this.fieldContainer);                                                            // 8083
                }                                                                                                      // 8084
            }                                                                                                          // 8085
        },                                                                                                             // 8086
                                                                                                                       // 8087
        /**                                                                                                            // 8088
         * @see Alpaca.Field#postRender                                                                                // 8089
         */                                                                                                            // 8090
        postRender: function(callback)                                                                                 // 8091
        {                                                                                                              // 8092
            var self = this;                                                                                           // 8093
                                                                                                                       // 8094
            var labelDiv = $('.alpaca-controlfield-label', this.outerEl);                                              // 8095
            if (labelDiv.length) {                                                                                     // 8096
                this.labelDiv = labelDiv;                                                                              // 8097
            }                                                                                                          // 8098
                                                                                                                       // 8099
            var helperDiv = $('.alpaca-controlfield-helper', this.outerEl);                                            // 8100
            if (helperDiv.length) {                                                                                    // 8101
                this.helperDiv = helperDiv;                                                                            // 8102
            }                                                                                                          // 8103
                                                                                                                       // 8104
            this.base(function() {                                                                                     // 8105
                                                                                                                       // 8106
                // add additional classes                                                                              // 8107
                self.outerEl.addClass('alpaca-controlfield');                                                          // 8108
                                                                                                                       // 8109
                callback();                                                                                            // 8110
                                                                                                                       // 8111
            });                                                                                                        // 8112
        },                                                                                                             // 8113
                                                                                                                       // 8114
        /**                                                                                                            // 8115
         * Validate against enum property.                                                                             // 8116
         *                                                                                                             // 8117
         * @returns {Boolean} True if the element value is part of the enum list, false otherwise.                     // 8118
         */                                                                                                            // 8119
        _validateEnum: function() {                                                                                    // 8120
            if (this.schema["enum"]) {                                                                                 // 8121
                var val = this.data;                                                                                   // 8122
                /*this.getValue();*/                                                                                   // 8123
                if (!this.schema.required && Alpaca.isValEmpty(val)) {                                                 // 8124
                    return true;                                                                                       // 8125
                }                                                                                                      // 8126
                if ($.inArray(val, this.schema["enum"]) > -1) {                                                        // 8127
                    return true;                                                                                       // 8128
                } else {                                                                                               // 8129
                    return false;                                                                                      // 8130
                }                                                                                                      // 8131
            } else {                                                                                                   // 8132
                return true;                                                                                           // 8133
            }                                                                                                          // 8134
        },                                                                                                             // 8135
                                                                                                                       // 8136
        /**                                                                                                            // 8137
         * @see Alpaca.Field#handleValidate                                                                            // 8138
         */                                                                                                            // 8139
        handleValidate: function() {                                                                                   // 8140
            var baseStatus = this.base();                                                                              // 8141
                                                                                                                       // 8142
            var valInfo = this.validation;                                                                             // 8143
                                                                                                                       // 8144
            var status = this._validateEnum();                                                                         // 8145
            valInfo["invalidValueOfEnum"] = {                                                                          // 8146
                "message": status ? "" : Alpaca.substituteTokens(this.view.getMessage("invalidValueOfEnum"), [this.schema["enum"].join(',')]),
                "status": status                                                                                       // 8148
            };                                                                                                         // 8149
                                                                                                                       // 8150
            return baseStatus && valInfo["invalidValueOfEnum"]["status"];                                              // 8151
        },                                                                                                             // 8152
                                                                                                                       // 8153
        /**                                                                                                            // 8154
         * @see Alpaca.Field#initEvents                                                                                // 8155
         */                                                                                                            // 8156
        initEvents: function() {                                                                                       // 8157
            this.base();                                                                                               // 8158
                                                                                                                       // 8159
            var _this = this;                                                                                          // 8160
                                                                                                                       // 8161
            if (this.field)                                                                                            // 8162
            {                                                                                                          // 8163
                this.field.keypress(function(e) {                                                                      // 8164
                    _this.onKeyPress.call(_this, e);                                                                   // 8165
                    _this.trigger("keypress", e);                                                                      // 8166
                });                                                                                                    // 8167
                                                                                                                       // 8168
                this.field.keyup(function(e) {                                                                         // 8169
                    _this.onKeyUp.call(_this, e);                                                                      // 8170
                    _this.trigger("keyup", e);                                                                         // 8171
                });                                                                                                    // 8172
                                                                                                                       // 8173
                this.field.keydown(function(e) {                                                                       // 8174
                    _this.onKeyDown.call(_this, e);                                                                    // 8175
                    _this.trigger("keydown", e);                                                                       // 8176
                });                                                                                                    // 8177
                                                                                                                       // 8178
                this.field.click(function(e) {                                                                         // 8179
                    _this.onClick.call(_this, e);                                                                      // 8180
                    _this.trigger("click", e);                                                                         // 8181
                });                                                                                                    // 8182
            }                                                                                                          // 8183
                                                                                                                       // 8184
        },                                                                                                             // 8185
                                                                                                                       // 8186
        /**                                                                                                            // 8187
         * Callback for when a key press event is received for the field control.                                      // 8188
         *                                                                                                             // 8189
         * @param {Object} e keypress event                                                                            // 8190
         */                                                                                                            // 8191
        onKeyPress: function(e) {                                                                                      // 8192
                                                                                                                       // 8193
            var self = this;                                                                                           // 8194
                                                                                                                       // 8195
            // if the field is currently invalid, then we provide early feedback to the user as to when they enter     // 8196
            // if the field was valid, we don't render invalidation feedback until they blur the field                 // 8197
                                                                                                                       // 8198
            // was the control valid previously?                                                                       // 8199
            var wasValid = this.isValid();                                                                             // 8200
            if (!wasValid)                                                                                             // 8201
            {                                                                                                          // 8202
                //                                                                                                     // 8203
                // we use a timeout because at this exact moment, the value of the control is still the old value      // 8204
                // jQuery raises the keypress event ahead of the input receiving the new data which would incorporate  // 8205
                // the key that was pressed                                                                            // 8206
                //                                                                                                     // 8207
                // this timeout provides the browser with enough time to plug the value into the input control         // 8208
                // which the validation logic uses to determine whether the control is now in a valid state            // 8209
                //                                                                                                     // 8210
                window.setTimeout(function() {                                                                         // 8211
                    self.renderValidationState();                                                                      // 8212
                }, 50);                                                                                                // 8213
            }                                                                                                          // 8214
                                                                                                                       // 8215
        },                                                                                                             // 8216
                                                                                                                       // 8217
        /**                                                                                                            // 8218
         * Callback for when a key down event is received for the field control.                                       // 8219
         *                                                                                                             // 8220
         * @param {Object} e keydown event                                                                             // 8221
         */                                                                                                            // 8222
        onKeyDown: function(e) {                                                                                       // 8223
                                                                                                                       // 8224
        },                                                                                                             // 8225
                                                                                                                       // 8226
        /**                                                                                                            // 8227
         * Callback for when a key up event is received for the field control.                                         // 8228
         *                                                                                                             // 8229
         * @param {Object} e keyup event                                                                               // 8230
         */                                                                                                            // 8231
        onKeyUp: function(e) {                                                                                         // 8232
                                                                                                                       // 8233
        },                                                                                                             // 8234
                                                                                                                       // 8235
        /**                                                                                                            // 8236
         * Handler for click event.                                                                                    // 8237
         *                                                                                                             // 8238
         * @param {Object} e Click event.                                                                              // 8239
         */                                                                                                            // 8240
        onClick: function(e) {                                                                                         // 8241
        }                                                                                                              // 8242
    });                                                                                                                // 8243
                                                                                                                       // 8244
    // Registers additional messages                                                                                   // 8245
    Alpaca.registerMessages({                                                                                          // 8246
        "invalidValueOfEnum": "This field should have one of the values in {0}."                                       // 8247
    });                                                                                                                // 8248
                                                                                                                       // 8249
})(jQuery);                                                                                                            // 8250
(function($) {                                                                                                         // 8251
                                                                                                                       // 8252
    var Alpaca = $.alpaca;                                                                                             // 8253
                                                                                                                       // 8254
    Alpaca.ContainerField = Alpaca.Field.extend(                                                                       // 8255
                                                                                                                       // 8256
        /**                                                                                                            // 8257
         * @lends Alpaca.ContainerField.prototype                                                                      // 8258
         */                                                                                                            // 8259
        {                                                                                                              // 8260
            /**                                                                                                        // 8261
             * @constructs                                                                                             // 8262
             * @augments Alpaca.Field                                                                                  // 8263
             *                                                                                                         // 8264
             * @class Abstract container field for parenting of child fields.                                          // 8265
             *                                                                                                         // 8266
             * Custom field implementation should extend this if they intend to be containers of sub-controls -        // 8267
             * examples include tree controls, list controls and more.                                                 // 8268
             *                                                                                                         // 8269
             * @param {Object} container Field container.                                                              // 8270
             * @param {Any} data Field data.                                                                           // 8271
             * @param {Object} options Field options.                                                                  // 8272
             * @param {Object} schema Field schema.                                                                    // 8273
             * @param {Object|String} view Field view.                                                                 // 8274
             * @param {Alpaca.Connector} connector Field connector.                                                    // 8275
             * @param {Function} errorCallback Error callback.                                                         // 8276
             */                                                                                                        // 8277
            constructor: function(container, data, options, schema, view, connector, errorCallback) {                  // 8278
                this.base(container, data, options, schema, view, connector, errorCallback);                           // 8279
            },                                                                                                         // 8280
                                                                                                                       // 8281
            /**                                                                                                        // 8282
             * @see Alpaca.Field#setup                                                                                 // 8283
             */                                                                                                        // 8284
            setup: function() {                                                                                        // 8285
                this.base();                                                                                           // 8286
                                                                                                                       // 8287
                var collapsible = true;                                                                                // 8288
                                                                                                                       // 8289
                if (!Alpaca.isEmpty(this.view.collapsible)) {                                                          // 8290
                    collapsible = this.view.collapsible;                                                               // 8291
                }                                                                                                      // 8292
                                                                                                                       // 8293
                if (!Alpaca.isEmpty(this.options.collapsible)) {                                                       // 8294
                    collapsible = this.options.collapsible;                                                            // 8295
                }                                                                                                      // 8296
                                                                                                                       // 8297
                this.options.collapsible = collapsible;                                                                // 8298
                                                                                                                       // 8299
                var legendStyle = "button";                                                                            // 8300
                                                                                                                       // 8301
                if (!Alpaca.isEmpty(this.view.legendStyle)) {                                                          // 8302
                    legendStyle = this.view.legendStyle;                                                               // 8303
                }                                                                                                      // 8304
                                                                                                                       // 8305
                if (!Alpaca.isEmpty(this.options.legendStyle)) {                                                       // 8306
                    legendStyle = this.options.legendStyle;                                                            // 8307
                }                                                                                                      // 8308
                                                                                                                       // 8309
                this.options.legendStyle = legendStyle;                                                                // 8310
                                                                                                                       // 8311
                //Lazy loading                                                                                         // 8312
                this.lazyLoading = false;                                                                              // 8313
                if (!Alpaca.isEmpty(this.options.lazyLoading)) {                                                       // 8314
                    this.lazyLoading = this.options.lazyLoading;                                                       // 8315
                    if (this.lazyLoading) {                                                                            // 8316
                        this.options.collapsed = true;                                                                 // 8317
                    }                                                                                                  // 8318
                    //delete this.options.lazyLoading;                                                                 // 8319
                }                                                                                                      // 8320
                // holders of references to children                                                                   // 8321
                this.children = [];                                                                                    // 8322
                this.childrenById = [];                                                                                // 8323
                this.childrenByPropertyId = [];                                                                        // 8324
                // style icons                                                                                         // 8325
                this.expandedIcon = "";                                                                                // 8326
                this.collapsedIcon = "";                                                                               // 8327
                this.commonIcon = "";                                                                                  // 8328
                this.addIcon = "";                                                                                     // 8329
                this.removeIcon = "";                                                                                  // 8330
                this.upIcon = "";                                                                                      // 8331
                this.downIcon = "";                                                                                    // 8332
                if (this.view.style && Alpaca.styleInjections[this.view.style]) {                                      // 8333
                    if (Alpaca.styleInjections[this.view.style]["commonIcon"]) {                                       // 8334
                        this.commonIcon = Alpaca.styleInjections[this.view.style]["commonIcon"];                       // 8335
                    }                                                                                                  // 8336
                    if (Alpaca.styleInjections[this.view.style]["containerExpandedIcon"]) {                            // 8337
                        this.expandedIcon = Alpaca.styleInjections[this.view.style]["containerExpandedIcon"];          // 8338
                    }                                                                                                  // 8339
                    if (Alpaca.styleInjections[this.view.style]["containerCollapsedIcon"]) {                           // 8340
                        this.collapsedIcon = Alpaca.styleInjections[this.view.style]["containerCollapsedIcon"];        // 8341
                    }                                                                                                  // 8342
                    if (Alpaca.styleInjections[this.view.style]["buttonBeautifier"]) {                                 // 8343
                        this.buttonBeautifier = Alpaca.styleInjections[this.view.style]["buttonBeautifier"];           // 8344
                    }                                                                                                  // 8345
                    if (Alpaca.styleInjections[this.view.style]["addIcon"]) {                                          // 8346
                        this.addIcon = Alpaca.styleInjections[this.view.style]["addIcon"];                             // 8347
                    }                                                                                                  // 8348
                    if (Alpaca.styleInjections[this.view.style]["removeIcon"]) {                                       // 8349
                        this.removeIcon = Alpaca.styleInjections[this.view.style]["removeIcon"];                       // 8350
                    }                                                                                                  // 8351
                    if (Alpaca.styleInjections[this.view.style]["upIcon"]) {                                           // 8352
                        this.upIcon = Alpaca.styleInjections[this.view.style]["upIcon"];                               // 8353
                    }                                                                                                  // 8354
                    if (Alpaca.styleInjections[this.view.style]["downIcon"]) {                                         // 8355
                        this.downIcon = Alpaca.styleInjections[this.view.style]["downIcon"];                           // 8356
                    }                                                                                                  // 8357
                }                                                                                                      // 8358
            },                                                                                                         // 8359
                                                                                                                       // 8360
            /**                                                                                                        // 8361
             * @see Alpaca.Field#getDefaultFieldTemplateId                                                             // 8362
             */                                                                                                        // 8363
            getDefaultFieldTemplateId : function () {                                                                  // 8364
                return "fieldSet";                                                                                     // 8365
            },                                                                                                         // 8366
                                                                                                                       // 8367
            /**                                                                                                        // 8368
             * @see Alpaca.Field#setDefaultTemplateDescriptor                                                          // 8369
             */                                                                                                        // 8370
            setDefaultTemplateDescriptor: function() {                                                                 // 8371
                this.base();                                                                                           // 8372
            },                                                                                                         // 8373
                                                                                                                       // 8374
            /**                                                                                                        // 8375
             * Helper method to add child field.                                                                       // 8376
             *                                                                                                         // 8377
             * @param {Alpaca.Control} child Child field to be added.                                                  // 8378
             * @param {Integer} index Index of the new child.                                                          // 8379
             */                                                                                                        // 8380
            addChild: function(child, index) {                                                                         // 8381
                if (!Alpaca.isEmpty(index)) {                                                                          // 8382
                    this.children.splice(index, 0, child);                                                             // 8383
                } else {                                                                                               // 8384
                    this.children.push(child);                                                                         // 8385
                }                                                                                                      // 8386
                this.childrenById[child.getId()] = child;                                                              // 8387
                if (child.propertyId) {                                                                                // 8388
                    this.childrenByPropertyId[child.propertyId] = child;                                               // 8389
                }                                                                                                      // 8390
                child.parent = this;                                                                                   // 8391
            },                                                                                                         // 8392
                                                                                                                       // 8393
            /**                                                                                                        // 8394
             * @see Alpaca.Field#initEvents                                                                            // 8395
             */                                                                                                        // 8396
            initEvents: function() {                                                                                   // 8397
                var _this = this;                                                                                      // 8398
                                                                                                                       // 8399
                // if collapsible                                                                                      // 8400
                if (this.labelDiv) {                                                                                   // 8401
                    if (this.options.collapsible) {                                                                    // 8402
                                                                                                                       // 8403
                        this.labelDiv.addClass("legend-expanded");                                                     // 8404
                        this.fieldSetDiv.addClass("fieldset-expanded");                                                // 8405
                                                                                                                       // 8406
                        var initIcon = this.expandedIcon;                                                              // 8407
                                                                                                                       // 8408
                        if (!Alpaca.isEmpty(this.options.collapsed) && this.options.collapsed) {                       // 8409
                            initIcon = this.collapsedIcon;                                                             // 8410
                            this.labelDiv.nextAll(".alpaca-fieldset-helper").slideToggle(500);                         // 8411
                            this.labelDiv.nextAll(".alpaca-fieldset-items-container").slideToggle(500);                // 8412
                            this.labelDiv.nextAll(".alpaca-fieldset-array-toolbar").slideToggle(500);                  // 8413
                            this.fieldSetDiv.toggleClass("fieldset-expanded");                                         // 8414
                            this.fieldSetDiv.toggleClass("fieldset-collapsed");                                        // 8415
                            this.labelDiv.toggleClass("legend-expanded");                                              // 8416
                            this.labelDiv.toggleClass("legend-collapsed");                                             // 8417
                        }                                                                                              // 8418
                                                                                                                       // 8419
                        if (this.options.legendStyle == 'link') {                                                      // 8420
                            $('<span class="' + this.commonIcon + " " + initIcon + ' alpaca-fieldset-legend-link"></span>').prependTo(this.labelDiv);
                            this.labelDiv.click(function() {                                                           // 8422
                                _this.fieldSetDiv.toggleClass("fieldset-collapsed");                                   // 8423
                                _this.fieldSetDiv.toggleClass("fieldset-expanded");                                    // 8424
                                $(this).toggleClass("legend-collapsed");                                               // 8425
                                $(this).toggleClass("legend-expanded");                                                // 8426
                                $('.alpaca-fieldset-legend-link', this).toggleClass(_this.collapsedIcon).toggleClass(_this.expandedIcon);
                                $(this).nextAll(".alpaca-fieldset-helper").slideToggle(500);                           // 8428
                                $(this).nextAll(".alpaca-fieldset-items-container").slideToggle(500);                  // 8429
                                $(this).nextAll(".alpaca-fieldset-array-toolbar").slideToggle(500);                    // 8430
                            });                                                                                        // 8431
                        }                                                                                              // 8432
                                                                                                                       // 8433
                        if (this.options.legendStyle == 'button') {                                                    // 8434
                            if (this.buttonBeautifier) {                                                               // 8435
                                this.buttonBeautifier.call(this, this.labelDiv, initIcon, true);                       // 8436
                            }                                                                                          // 8437
                                                                                                                       // 8438
                            this.labelDiv.click(function() {                                                           // 8439
                                _this.fieldSetDiv.toggleClass("fieldset-collapsed");                                   // 8440
                                _this.fieldSetDiv.toggleClass("fieldset-expanded");                                    // 8441
                                $(this).toggleClass("legend-collapsed");                                               // 8442
                                $(this).toggleClass("legend-expanded");                                                // 8443
                                $('.alpaca-fieldset-legend-button', this).toggleClass(_this.collapsedIcon).toggleClass(_this.expandedIcon);
                                $(this).nextAll(".alpaca-fieldset-helper").slideToggle(500);                           // 8445
                                $(this).nextAll(".alpaca-fieldset-items-container").slideToggle(500);                  // 8446
                                $(this).nextAll(".alpaca-fieldset-array-toolbar").slideToggle(500);                    // 8447
                            });                                                                                        // 8448
                        }                                                                                              // 8449
                    }                                                                                                  // 8450
                }                                                                                                      // 8451
            },                                                                                                         // 8452
                                                                                                                       // 8453
            /**                                                                                                        // 8454
             * Clears the field and resets the field to its original value.                                            // 8455
             *                                                                                                         // 8456
             * @param stopUpdateTrigger If false, triggers the update event of this event.                             // 8457
             */                                                                                                        // 8458
            clear: function(stopUpdateTrigger) {                                                                       // 8459
                // clear all the kiddies                                                                               // 8460
                Alpaca.each(this.children, function() {                                                                // 8461
                    this.clear(false);                                                                                 // 8462
                });                                                                                                    // 8463
                                                                                                                       // 8464
                // trigger update all at once                                                                          // 8465
                if (!stopUpdateTrigger) {                                                                              // 8466
                    this.triggerUpdate();                                                                              // 8467
                }                                                                                                      // 8468
            },                                                                                                         // 8469
                                                                                                                       // 8470
            /**                                                                                                        // 8471
             * @see Alpaca.Field#setDefault                                                                            // 8472
             */                                                                                                        // 8473
            setDefault: function() {                                                                                   // 8474
                if (Alpaca.isEmpty(this.schema['default'])) {                                                          // 8475
                    Alpaca.each(this.children, function() {                                                            // 8476
                        this.setDefault();                                                                             // 8477
                    });                                                                                                // 8478
                } else {                                                                                               // 8479
                    this.setValue(this.schema['default']);                                                             // 8480
                }                                                                                                      // 8481
            },                                                                                                         // 8482
                                                                                                                       // 8483
            /**                                                                                                        // 8484
             * @see Alpaca.Field#destroy                                                                               // 8485
             */                                                                                                        // 8486
            destroy: function() {                                                                                      // 8487
                                                                                                                       // 8488
                // if this container is DOM-wrapped with a form, then release the form                                 // 8489
                if (this.form) {                                                                                       // 8490
                    this.form.destroy(true); // pass in true so that we don't call back recursively                    // 8491
                    delete this.form;                                                                                  // 8492
                }                                                                                                      // 8493
                                                                                                                       // 8494
                // destroy any child controls                                                                          // 8495
                Alpaca.each(this.children, function() {                                                                // 8496
                    this.destroy();                                                                                    // 8497
                });                                                                                                    // 8498
                                                                                                                       // 8499
                // call up to base method                                                                              // 8500
                this.base();                                                                                           // 8501
            },                                                                                                         // 8502
                                                                                                                       // 8503
            /**                                                                                                        // 8504
             * Renders child item container.                                                                           // 8505
             *                                                                                                         // 8506
             * @param {Integer} insertAfterId Insertion point for the container.                                       // 8507
             * @param {Alpaca.Control} parent Parent field.                                                            // 8508
             * @param {String} propertyId Child item property ID.                                                      // 8509
             */                                                                                                        // 8510
            renderItemContainer: function(insertAfterId, parent, propertyId) {                                         // 8511
                var _this = this;                                                                                      // 8512
                                                                                                                       // 8513
                var itemContainerTemplateDescriptor = this.view.getTemplateDescriptor("fieldSetItemContainer");        // 8514
                if (itemContainerTemplateDescriptor) {                                                                 // 8515
                    var containerElem = _this.view.tmpl(itemContainerTemplateDescriptor, {});                          // 8516
                    if (containerElem.attr('data-replace') == 'true') {                                                // 8517
                        return this.fieldContainer;                                                                    // 8518
                    } else {                                                                                           // 8519
                        if (insertAfterId) {                                                                           // 8520
                            $('#' + insertAfterId + '-item-container', this.outerEl).after(containerElem);             // 8521
                        } else {                                                                                       // 8522
                                                                                                                       // 8523
                            var appendToContainer = this.fieldContainer;                                               // 8524
                                                                                                                       // 8525
                            var bindings = this.view.getLayout().bindings;                                             // 8526
                            if (bindings) {                                                                            // 8527
                                var binding = bindings[propertyId];                                                    // 8528
                                if (binding && $('#' + binding, appendToContainer).length > 0) {                       // 8529
                                    appendToContainer = $('#' + binding, appendToContainer);                           // 8530
                                }                                                                                      // 8531
                            }                                                                                          // 8532
                            containerElem.appendTo(appendToContainer);                                                 // 8533
                        }                                                                                              // 8534
                    }                                                                                                  // 8535
                    return containerElem;                                                                              // 8536
                } else {                                                                                               // 8537
                    return this.fieldContainer;                                                                        // 8538
                }                                                                                                      // 8539
            },                                                                                                         // 8540
                                                                                                                       // 8541
            /**                                                                                                        // 8542
             * @see Alpaca.Field#renderField                                                                           // 8543
             */                                                                                                        // 8544
            renderField: function(onSuccess) {                                                                         // 8545
                                                                                                                       // 8546
                var _this = this;                                                                                      // 8547
                                                                                                                       // 8548
                this.getStyleInjection("container", this.outerEl);                                                     // 8549
                                                                                                                       // 8550
                var labelDiv = $('.alpaca-fieldset-legend', this.outerEl);                                             // 8551
                                                                                                                       // 8552
                if (labelDiv.length) {                                                                                 // 8553
                    this.labelDiv = labelDiv;                                                                          // 8554
                } else {                                                                                               // 8555
                    this.outerEl.addClass('alpaca-fieldset-no-legend');                                                // 8556
                }                                                                                                      // 8557
                                                                                                                       // 8558
                var fieldSetDiv = $('.alpaca-fieldset', this.outerEl);                                                 // 8559
                                                                                                                       // 8560
                if (fieldSetDiv.length) {                                                                              // 8561
                    this.fieldSetDiv = fieldSetDiv;                                                                    // 8562
                } else {                                                                                               // 8563
                    this.fieldSetDiv = this.outerEl;                                                                   // 8564
                }                                                                                                      // 8565
                                                                                                                       // 8566
                var fieldContainer = $('.alpaca-fieldset-items-container', this.outerEl);                              // 8567
                if (fieldContainer.length) {                                                                           // 8568
                    this.fieldContainer = fieldContainer;                                                              // 8569
                } else {                                                                                               // 8570
                    this.fieldContainer = this.outerEl;                                                                // 8571
                }                                                                                                      // 8572
                                                                                                                       // 8573
                var asyncHandler = false;                                                                              // 8574
                                                                                                                       // 8575
                if (!this.singleLevelRendering && !this.lazyLoading) {                                                 // 8576
                    asyncHandler = true;                                                                               // 8577
                    this.renderItems(function() {                                                                      // 8578
                        if (onSuccess) {                                                                               // 8579
                            onSuccess();                                                                               // 8580
                        }                                                                                              // 8581
                    });                                                                                                // 8582
                }                                                                                                      // 8583
                                                                                                                       // 8584
                if (this.lazyLoading) {                                                                                // 8585
                    if (this.labelDiv) {                                                                               // 8586
                        asyncHandler = true;                                                                           // 8587
                        $(this.labelDiv).click(function() {                                                            // 8588
                            if (_this.lazyLoading) {                                                                   // 8589
                                _this.renderItems(function() {                                                         // 8590
                                    _this.lazyLoading = false;                                                         // 8591
                                    if (onSuccess) {                                                                   // 8592
                                        onSuccess();                                                                   // 8593
                                    }                                                                                  // 8594
                                });                                                                                    // 8595
                            }                                                                                          // 8596
                        });                                                                                            // 8597
                    }                                                                                                  // 8598
                }                                                                                                      // 8599
                                                                                                                       // 8600
                if (!asyncHandler)                                                                                     // 8601
                {                                                                                                      // 8602
                    if (onSuccess) {                                                                                   // 8603
                        onSuccess();                                                                                   // 8604
                    }                                                                                                  // 8605
                }                                                                                                      // 8606
            },                                                                                                         // 8607
                                                                                                                       // 8608
            /**                                                                                                        // 8609
             * Propagates signal down to all children.                                                                 // 8610
             * @override                                                                                               // 8611
             */                                                                                                        // 8612
            onDependentReveal: function()                                                                              // 8613
            {                                                                                                          // 8614
                for (var i = 0; i < this.children.length; i++)                                                         // 8615
                {                                                                                                      // 8616
                    this.children[i].onDependentReveal();                                                              // 8617
                }                                                                                                      // 8618
            },                                                                                                         // 8619
                                                                                                                       // 8620
            /**                                                                                                        // 8621
             * Propagates signal down to all children.                                                                 // 8622
             * @override                                                                                               // 8623
             */                                                                                                        // 8624
            onDependentConceal: function()                                                                             // 8625
            {                                                                                                          // 8626
                for (var i = 0; i < this.children.length; i++)                                                         // 8627
                {                                                                                                      // 8628
                    this.children[i].onDependentConceal();                                                             // 8629
                }                                                                                                      // 8630
            },                                                                                                         // 8631
                                                                                                                       // 8632
            /**                                                                                                        // 8633
             * Renders all child items of this field.                                                                  // 8634
             *                                                                                                         // 8635
             * @param onSuccess onSuccess callback.                                                                    // 8636
             */                                                                                                        // 8637
            renderItems: function(onSuccess) {                                                                         // 8638
            }                                                                                                          // 8639
        });                                                                                                            // 8640
                                                                                                                       // 8641
})(jQuery);                                                                                                            // 8642
(function($) {                                                                                                         // 8643
                                                                                                                       // 8644
    var Alpaca = $.alpaca;                                                                                             // 8645
                                                                                                                       // 8646
    Alpaca.Connector = Base.extend(                                                                                    // 8647
    /**                                                                                                                // 8648
     * @lends Alpaca.Connector.prototype                                                                               // 8649
     */                                                                                                                // 8650
    {                                                                                                                  // 8651
        /**                                                                                                            // 8652
         * @constructs                                                                                                 // 8653
         * @class Connects Alpaca to remote data stores.                                                               // 8654
                                                                                                                       // 8655
         * @param {String} id Connector ID.                                                                            // 8656
         */                                                                                                            // 8657
        constructor: function(id) {                                                                                    // 8658
            this.id = id;                                                                                              // 8659
        },                                                                                                             // 8660
                                                                                                                       // 8661
        /**                                                                                                            // 8662
         * Makes initial connections to data source.                                                                   // 8663
         *                                                                                                             // 8664
         * @param {Function} onSuccess onSuccess callback.                                                             // 8665
         * @param {Function} onError onError callback.                                                                 // 8666
         */                                                                                                            // 8667
        connect: function (onSuccess, onError) {                                                                       // 8668
            if (onSuccess && Alpaca.isFunction(onSuccess)) {                                                           // 8669
                onSuccess();                                                                                           // 8670
            }                                                                                                          // 8671
        },                                                                                                             // 8672
                                                                                                                       // 8673
        /**                                                                                                            // 8674
         * Loads a template (HTML or Text).                                                                            // 8675
         *                                                                                                             // 8676
         * If the source is a URI, then it is loaded.                                                                  // 8677
         * If it is not a URI, then the source is simply handed back.                                                  // 8678
         *                                                                                                             // 8679
         * @param {Object|String} source Source to be loaded.                                                          // 8680
         * @param {Function} onSuccess onSuccess callback.                                                             // 8681
         * @param {Function} onError onError callback.                                                                 // 8682
         */                                                                                                            // 8683
        loadTemplate : function (source, onSuccess, onError) {                                                         // 8684
            if (!Alpaca.isEmpty(source)) {                                                                             // 8685
                if (Alpaca.isUri(source)) {                                                                            // 8686
                    this.loadUri(source, false, function(loadedData) {                                                 // 8687
                        if (onSuccess && Alpaca.isFunction(onSuccess)) {                                               // 8688
                            onSuccess(loadedData);                                                                     // 8689
                        }                                                                                              // 8690
                    }, function (loadError) {                                                                          // 8691
                        if (onError && Alpaca.isFunction(onError)) {                                                   // 8692
                            onError(loadError);                                                                        // 8693
                        }                                                                                              // 8694
                    });                                                                                                // 8695
                } else {                                                                                               // 8696
                    onSuccess(source);                                                                                 // 8697
                }                                                                                                      // 8698
            } else {                                                                                                   // 8699
                onError({                                                                                              // 8700
                    "message":"Empty data source.",                                                                    // 8701
                    "reason": "TEMPLATE_LOADING_ERROR"                                                                 // 8702
                });                                                                                                    // 8703
            }                                                                                                          // 8704
        },                                                                                                             // 8705
                                                                                                                       // 8706
        /**                                                                                                            // 8707
         * Loads JSON data.                                                                                            // 8708
         *                                                                                                             // 8709
         * @param {Object|String} source Source to be loaded.                                                          // 8710
         * @param {Function} onSuccess onSuccess callback                                                              // 8711
         * @param {Function} onError onError callback                                                                  // 8712
         */                                                                                                            // 8713
        loadData : function (source, successCallback, errorCallback) {                                                 // 8714
            var isValidSource = function () {                                                                          // 8715
                return !Alpaca.isEmpty(source) && Alpaca.isUri(source);                                                // 8716
            };                                                                                                         // 8717
            if (isValidSource())                                                                                       // 8718
            {                                                                                                          // 8719
                this.loadJson(source, function(loadedData) {                                                           // 8720
                    successCallback(loadedData);                                                                       // 8721
                }, errorCallback);                                                                                     // 8722
            }                                                                                                          // 8723
            else                                                                                                       // 8724
            {                                                                                                          // 8725
                successCallback(source);                                                                               // 8726
            }                                                                                                          // 8727
        },                                                                                                             // 8728
                                                                                                                       // 8729
        /**                                                                                                            // 8730
         * Loads JSON schema.                                                                                          // 8731
         *                                                                                                             // 8732
         * @param {Object|String} source Source to be loaded.                                                          // 8733
         * @param {Function} onSuccess onSuccess callback.                                                             // 8734
         * @param {Function} onError onError callback.                                                                 // 8735
         */                                                                                                            // 8736
        loadSchema : function (source, successCallback, errorCallback) {                                               // 8737
            var isValidSchema = function () {                                                                          // 8738
                return !Alpaca.isEmpty(source) && Alpaca.isUri(source);                                                // 8739
            };                                                                                                         // 8740
            if (isValidSchema()) {                                                                                     // 8741
                this.loadJson(source, function(loadedSchema) {                                                         // 8742
                    successCallback(loadedSchema);                                                                     // 8743
                }, errorCallback);                                                                                     // 8744
            } else {                                                                                                   // 8745
                successCallback(source);                                                                               // 8746
            }                                                                                                          // 8747
        },                                                                                                             // 8748
                                                                                                                       // 8749
        /**                                                                                                            // 8750
         * Loads JSON options.                                                                                         // 8751
         *                                                                                                             // 8752
         * @param {Object|String} source Source to be loaded.                                                          // 8753
         * @param {Function} onSuccess onSuccess callback.                                                             // 8754
         * @param {Function} onError onError callback.                                                                 // 8755
         */                                                                                                            // 8756
        loadOptions : function (source, successCallback, errorCallback) {                                              // 8757
            var isValidOptions = function () {                                                                         // 8758
                return !Alpaca.isEmpty(source) && Alpaca.isUri(source);                                                // 8759
            };                                                                                                         // 8760
            if (isValidOptions()) {                                                                                    // 8761
                this.loadJson(source, function(loadedOptions) {                                                        // 8762
                    successCallback(loadedOptions);                                                                    // 8763
                }, errorCallback);                                                                                     // 8764
            } else {                                                                                                   // 8765
                successCallback(source);                                                                               // 8766
            }                                                                                                          // 8767
        },                                                                                                             // 8768
                                                                                                                       // 8769
        /**                                                                                                            // 8770
         * Loads JSON view.                                                                                            // 8771
         *                                                                                                             // 8772
         * @param {Object|String} source Source to be loaded.                                                          // 8773
         * @param {Function} onSuccess onSuccess callback.                                                             // 8774
         * @param {Function} onError onError callback.                                                                 // 8775
         */                                                                                                            // 8776
        loadView : function (source, successCallback, errorCallback) {                                                 // 8777
            var isValidView = function () {                                                                            // 8778
                return !Alpaca.isEmpty(source) && Alpaca.isUri(source);                                                // 8779
            };                                                                                                         // 8780
            if (isValidView()) {                                                                                       // 8781
                this.loadJson(source, function(loadedView) {                                                           // 8782
                    successCallback(loadedView);                                                                       // 8783
                }, errorCallback);                                                                                     // 8784
            } else {                                                                                                   // 8785
                successCallback(source);                                                                               // 8786
            }                                                                                                          // 8787
        },                                                                                                             // 8788
                                                                                                                       // 8789
        /**                                                                                                            // 8790
         * Loads schema, form, view and data in a single call.                                                         // 8791
         *                                                                                                             // 8792
         * @param {Object} sources sources                                                                             // 8793
         * @param {Function} onSuccess onSuccess callback.                                                             // 8794
         * @param {Function} onError onError callback.                                                                 // 8795
         */                                                                                                            // 8796
        loadAll: function (sources, onSuccess, onError) {                                                              // 8797
                                                                                                                       // 8798
            var dataSource = sources.dataSource;                                                                       // 8799
            var schemaSource = sources.schemaSource;                                                                   // 8800
            var optionsSource = sources.optionsSource;                                                                 // 8801
            var viewSource = sources.viewSource;                                                                       // 8802
                                                                                                                       // 8803
            // we allow "schema" to contain a URI as well (backwards-compatibility)                                    // 8804
            if (!schemaSource)                                                                                         // 8805
            {                                                                                                          // 8806
                schemaSource = sources.schema;                                                                         // 8807
            }                                                                                                          // 8808
                                                                                                                       // 8809
            // we allow "options" to contain a URI as well (backwards-compatibility)                                   // 8810
            if (!optionsSource)                                                                                        // 8811
            {                                                                                                          // 8812
                optionsSource = sources.options;                                                                       // 8813
            }                                                                                                          // 8814
                                                                                                                       // 8815
            // we allow "view" to contain a URI as well (backwards-compatibility)                                      // 8816
            if (!viewSource)                                                                                           // 8817
            {                                                                                                          // 8818
                viewSource = sources.view;                                                                             // 8819
            }                                                                                                          // 8820
                                                                                                                       // 8821
            var loaded = {};                                                                                           // 8822
                                                                                                                       // 8823
            var loadCounter = 0;                                                                                       // 8824
            var invocationCount = 0;                                                                                   // 8825
                                                                                                                       // 8826
            var successCallback = function() {                                                                         // 8827
                if (loadCounter === invocationCount) {                                                                 // 8828
                    if (onSuccess && Alpaca.isFunction(onSuccess)) {                                                   // 8829
                        onSuccess(loaded.data, loaded.options, loaded.schema, loaded.view);                            // 8830
                    }                                                                                                  // 8831
                }                                                                                                      // 8832
            };                                                                                                         // 8833
                                                                                                                       // 8834
            var errorCallback = function (loadError) {                                                                 // 8835
                if (onError && Alpaca.isFunction(onError)) {                                                           // 8836
                    onError(loadError);                                                                                // 8837
                }                                                                                                      // 8838
            };                                                                                                         // 8839
                                                                                                                       // 8840
            // count out the total # of invokes we're going to fire off                                                // 8841
            if (dataSource)                                                                                            // 8842
            {                                                                                                          // 8843
                invocationCount++;                                                                                     // 8844
            }                                                                                                          // 8845
            if (schemaSource)                                                                                          // 8846
            {                                                                                                          // 8847
                invocationCount++;                                                                                     // 8848
            }                                                                                                          // 8849
            if (optionsSource)                                                                                         // 8850
            {                                                                                                          // 8851
                invocationCount++;                                                                                     // 8852
            }                                                                                                          // 8853
            if (viewSource)                                                                                            // 8854
            {                                                                                                          // 8855
                invocationCount++;                                                                                     // 8856
            }                                                                                                          // 8857
            if (invocationCount === 0)                                                                                 // 8858
            {                                                                                                          // 8859
                // nothing to invoke, so just hand back                                                                // 8860
                successCallback();                                                                                     // 8861
                return;                                                                                                // 8862
            }                                                                                                          // 8863
                                                                                                                       // 8864
            // fire off all of the invokes                                                                             // 8865
            if (dataSource)                                                                                            // 8866
            {                                                                                                          // 8867
                this.loadData(dataSource, function(data) {                                                             // 8868
                    loaded.data = data;                                                                                // 8869
                    loadCounter++;                                                                                     // 8870
                    successCallback();                                                                                 // 8871
                }, errorCallback);                                                                                     // 8872
            }                                                                                                          // 8873
            if (schemaSource)                                                                                          // 8874
            {                                                                                                          // 8875
                this.loadSchema(schemaSource, function(schema) {                                                       // 8876
                    loaded.schema = schema;                                                                            // 8877
                    loadCounter++;                                                                                     // 8878
                    successCallback();                                                                                 // 8879
                }, errorCallback);                                                                                     // 8880
            }                                                                                                          // 8881
            if (optionsSource)                                                                                         // 8882
            {                                                                                                          // 8883
                this.loadOptions(optionsSource, function(options) {                                                    // 8884
                    loaded.options = options;                                                                          // 8885
                    loadCounter++;                                                                                     // 8886
                    successCallback();                                                                                 // 8887
                }, errorCallback);                                                                                     // 8888
            }                                                                                                          // 8889
            if (viewSource)                                                                                            // 8890
            {                                                                                                          // 8891
                this.loadView(viewSource, function(view) {                                                             // 8892
                    loaded.view = view;                                                                                // 8893
                    loadCounter++;                                                                                     // 8894
                    successCallback();                                                                                 // 8895
                }, errorCallback);                                                                                     // 8896
            }                                                                                                          // 8897
        },                                                                                                             // 8898
                                                                                                                       // 8899
        /**                                                                                                            // 8900
         * Loads a JSON through Ajax call.                                                                             // 8901
         *                                                                                                             // 8902
         * @param {String} uri Target source JSON location.                                                            // 8903
         * @param {Function} onSuccess onSuccess callback.                                                             // 8904
         * @param {Function} onError onError callback.                                                                 // 8905
         */                                                                                                            // 8906
        loadJson : function(uri, onSuccess, onError) {                                                                 // 8907
            this.loadUri(uri, true, onSuccess, onError);                                                               // 8908
        } ,                                                                                                            // 8909
                                                                                                                       // 8910
        /**                                                                                                            // 8911
         * Loads a general document through Ajax call.                                                                 // 8912
         *                                                                                                             // 8913
         * This uses jQuery to perform the Ajax call.  If you need to customize connectivity to your own remote server,
         * this would be the appropriate place to do so.                                                               // 8915
         *                                                                                                             // 8916
         * @param {String} uri Target source document location.                                                        // 8917
         * @param {Boolean} isJson Whether the document is a JSON or not.                                              // 8918
         * @param {Function} onSuccess onSuccess callback.                                                             // 8919
         * @param {Function} onError onError callback.                                                                 // 8920
         */                                                                                                            // 8921
        loadUri : function(uri, isJson, onSuccess, onError) {                                                          // 8922
            var ajaxConfigs = {                                                                                        // 8923
                "url": uri,                                                                                            // 8924
                "type": "get",                                                                                         // 8925
                "success": function(jsonDocument) {                                                                    // 8926
                    if (onSuccess && Alpaca.isFunction(onSuccess)) {                                                   // 8927
                        onSuccess(jsonDocument);                                                                       // 8928
                    }                                                                                                  // 8929
                },                                                                                                     // 8930
                "error": function(jqXHR, textStatus, errorThrown) {                                                    // 8931
                    if (onError && Alpaca.isFunction(onError)) {                                                       // 8932
                        onError({                                                                                      // 8933
                            "message":"Unable to load data from uri : " + uri,                                         // 8934
                            "stage": "DATA_LOADING_ERROR",                                                             // 8935
                            "details": {                                                                               // 8936
                                "jqXHR" : jqXHR,                                                                       // 8937
                                "textStatus" : textStatus,                                                             // 8938
                                "errorThrown" : errorThrown                                                            // 8939
                            }                                                                                          // 8940
                        });                                                                                            // 8941
                    }                                                                                                  // 8942
                }                                                                                                      // 8943
            };                                                                                                         // 8944
                                                                                                                       // 8945
            if (isJson) {                                                                                              // 8946
                ajaxConfigs.dataType = "json";                                                                         // 8947
            } else {                                                                                                   // 8948
                ajaxConfigs.dataType = "text";                                                                         // 8949
            }                                                                                                          // 8950
                                                                                                                       // 8951
            $.ajax(ajaxConfigs);                                                                                       // 8952
        }                                                                                                              // 8953
                                                                                                                       // 8954
    });                                                                                                                // 8955
                                                                                                                       // 8956
    Alpaca.registerConnectorClass("default", Alpaca.Connector);                                                        // 8957
                                                                                                                       // 8958
})(jQuery);                                                                                                            // 8959
(function($) {                                                                                                         // 8960
                                                                                                                       // 8961
    var Alpaca = $.alpaca;                                                                                             // 8962
                                                                                                                       // 8963
    Alpaca.Form = Base.extend(                                                                                         // 8964
    /**                                                                                                                // 8965
     * @lends Alpaca.Form.prototype                                                                                    // 8966
     */                                                                                                                // 8967
    {                                                                                                                  // 8968
        /**                                                                                                            // 8969
         * @constructs                                                                                                 // 8970
         *                                                                                                             // 8971
         * @class This class is for managing HTML form control.                                                        // 8972
         *                                                                                                             // 8973
         * @param {Object} container Field container.                                                                  // 8974
         * @param {Object} options Field options.                                                                      // 8975
         * @param {Object|String} view Field view.                                                                     // 8976
         * @param {Alpaca.Connector} connector Field connector.                                                        // 8977
         * @param {Function} errorCallback Error callback.                                                             // 8978
         */                                                                                                            // 8979
        constructor: function(container, options, viewId, connector, errorCallback) {                                  // 8980
            var _this = this;                                                                                          // 8981
                                                                                                                       // 8982
            // container                                                                                               // 8983
            this.container = container;                                                                                // 8984
                                                                                                                       // 8985
            // parent                                                                                                  // 8986
            this.parent = null;                                                                                        // 8987
                                                                                                                       // 8988
            this.connector = connector;                                                                                // 8989
            this.errorCallback = errorCallback;                                                                        // 8990
                                                                                                                       // 8991
            // options                                                                                                 // 8992
            this.options = options;                                                                                    // 8993
                                                                                                                       // 8994
            if (this.options.attributes) {                                                                             // 8995
                this.attributes = this.options.attributes;                                                             // 8996
            } else {                                                                                                   // 8997
                this.attributes = {};                                                                                  // 8998
            }                                                                                                          // 8999
                                                                                                                       // 9000
            if (this.options.buttons) {                                                                                // 9001
                if (this.options.buttons.submit) {                                                                     // 9002
                    if (!this.options.buttons.submit.type) {                                                           // 9003
                        this.options.buttons.submit.type = 'submit';                                                   // 9004
                    }                                                                                                  // 9005
                    if (!this.options.buttons.submit.name) {                                                           // 9006
                        this.options.buttons.submit.name = 'submit';                                                   // 9007
                    }                                                                                                  // 9008
                    if (!this.options.buttons.submit.value) {                                                          // 9009
                        this.options.buttons.submit.value = 'Submit';                                                  // 9010
                    }                                                                                                  // 9011
                }                                                                                                      // 9012
                if (this.options.buttons.reset) {                                                                      // 9013
                    if (!this.options.buttons.reset.type) {                                                            // 9014
                        this.options.buttons.reset.type = 'reset';                                                     // 9015
                    }                                                                                                  // 9016
                    if (!this.options.buttons.reset.name) {                                                            // 9017
                        this.options.buttons.reset.name = 'reset';                                                     // 9018
                    }                                                                                                  // 9019
                    if (!this.options.buttons.reset.value) {                                                           // 9020
                        this.options.buttons.reset.value = 'Reset';                                                    // 9021
                    }                                                                                                  // 9022
                }                                                                                                      // 9023
            }                                                                                                          // 9024
                                                                                                                       // 9025
            if (this.attributes.id) {                                                                                  // 9026
                this.id = this.attributes.id;                                                                          // 9027
            } else {                                                                                                   // 9028
                this.id = Alpaca.generateId();                                                                         // 9029
                this.attributes.id = this.id;                                                                          // 9030
            }                                                                                                          // 9031
                                                                                                                       // 9032
            // if we have a submit button specified, and toggleSubmitValidState isn't defined, set to true by default  // 9033
            // don't allow the form to submit unless valid                                                             // 9034
            if (this.options.buttons && this.options.buttons.submit && Alpaca.isUndefined(this.options.toggleSubmitValidState))
            {                                                                                                          // 9036
                this.options.toggleSubmitValidState = true;                                                            // 9037
            }                                                                                                          // 9038
                                                                                                                       // 9039
            this.viewType = options.viewType;                                                                          // 9040
                                                                                                                       // 9041
            // set a runtime view                                                                                      // 9042
            this.view = new Alpaca.RuntimeView(viewId, this);                                                          // 9043
        },                                                                                                             // 9044
                                                                                                                       // 9045
        /**                                                                                                            // 9046
         * Renders this form into the container.                                                                       // 9047
         *                                                                                                             // 9048
         * @param {Function} onSuccess onSuccess callback.                                                             // 9049
         */                                                                                                            // 9050
        render: function(onSuccess) {                                                                                  // 9051
            var _this = this;                                                                                          // 9052
                                                                                                                       // 9053
            this.templateDescriptor = this.view.getTemplateDescriptor("form");                                         // 9054
                                                                                                                       // 9055
            // remove the previous outerEl if it exists                                                                // 9056
            if (this.outerEl) {                                                                                        // 9057
                this.outerEl.remove();                                                                                 // 9058
            }                                                                                                          // 9059
                                                                                                                       // 9060
            // load the appropriate template and render it                                                             // 9061
            this.processRender(this.container, function() {                                                            // 9062
                // bind our field dom element into the container                                                       // 9063
                _this.outerEl.appendTo(_this.container);                                                               // 9064
                                                                                                                       // 9065
                // add default class                                                                                   // 9066
                _this.outerEl.addClass("alpaca-form");                                                                 // 9067
                                                                                                                       // 9068
                // execute callback                                                                                    // 9069
                if (onSuccess)                                                                                         // 9070
                    onSuccess(_this);                                                                                  // 9071
            });                                                                                                        // 9072
        },                                                                                                             // 9073
                                                                                                                       // 9074
        /**                                                                                                            // 9075
         * Determines whether the top control is entirely valid.                                                       // 9076
         *                                                                                                             // 9077
         * @return {*}                                                                                                 // 9078
         */                                                                                                            // 9079
        isFormValid: function()                                                                                        // 9080
        {                                                                                                              // 9081
            // re-compute validation for the full control set                                                          // 9082
            this.topControl.validate(true);                                                                            // 9083
                                                                                                                       // 9084
            var valid = this.topControl.isValid(true);                                                                 // 9085
            this.renderValidationState();                                                                              // 9086
                                                                                                                       // 9087
            return valid;                                                                                              // 9088
        },                                                                                                             // 9089
                                                                                                                       // 9090
        validate: function(children)                                                                                   // 9091
        {                                                                                                              // 9092
            return this.topControl.validate(children);                                                                 // 9093
        },                                                                                                             // 9094
                                                                                                                       // 9095
        enableSubmitButton: function()                                                                                 // 9096
        {                                                                                                              // 9097
            $(".alpaca-form-button-submit").attrProp("disabled", false);                                               // 9098
                                                                                                                       // 9099
            if ($.mobile) {                                                                                            // 9100
                try { $(".alpaca-form-button-submit").button('refresh'); } catch (e) { }                               // 9101
            }                                                                                                          // 9102
        },                                                                                                             // 9103
                                                                                                                       // 9104
        disableSubmitButton: function()                                                                                // 9105
        {                                                                                                              // 9106
            $(".alpaca-form-button-submit").attrProp("disabled", true);                                                // 9107
                                                                                                                       // 9108
            if ($.mobile) {                                                                                            // 9109
                try { $(".alpaca-form-button-submit").button('refresh'); } catch (e) { }                               // 9110
            }                                                                                                          // 9111
        },                                                                                                             // 9112
                                                                                                                       // 9113
        adjustSubmitButtonState: function()                                                                            // 9114
        {                                                                                                              // 9115
            this.disableSubmitButton();                                                                                // 9116
                                                                                                                       // 9117
            var x = this.isFormValid();                                                                                // 9118
            if (this.isFormValid())                                                                                    // 9119
            {                                                                                                          // 9120
                this.enableSubmitButton();                                                                             // 9121
            }                                                                                                          // 9122
        },                                                                                                             // 9123
                                                                                                                       // 9124
        /**                                                                                                            // 9125
         * Responsible for fetching any templates needed so as to render the                                           // 9126
         * current mode for this field.                                                                                // 9127
         *                                                                                                             // 9128
         * Once completed, the onSuccess method is called.                                                             // 9129
         *                                                                                                             // 9130
         * @param {Object} parentEl Field container.                                                                   // 9131
         * @param {Function} onSuccess onSuccess callback.                                                             // 9132
         */                                                                                                            // 9133
        processRender: function(parentEl, onSuccess) {                                                                 // 9134
            var _this = this;                                                                                          // 9135
                                                                                                                       // 9136
            // lookup the template we should use to render                                                             // 9137
            var templateDescriptor = this.getTemplateDescriptor();                                                     // 9138
                                                                                                                       // 9139
            var context = {                                                                                            // 9140
                id: this.getId(),                                                                                      // 9141
                options: this.options,                                                                                 // 9142
                view: this.view                                                                                        // 9143
            };                                                                                                         // 9144
            var renderedDomElement = _this.view.tmpl(templateDescriptor, context, {});                                 // 9145
            renderedDomElement.appendTo(parentEl);                                                                     // 9146
                                                                                                                       // 9147
            this.outerEl = renderedDomElement;                                                                         // 9148
                                                                                                                       // 9149
            if (Alpaca.isEmpty(this.outerEl.attr("id"))) {                                                             // 9150
                this.outerEl.attr("id", this.getId() + "-form-outer");                                                 // 9151
            }                                                                                                          // 9152
            if (Alpaca.isEmpty(this.outerEl.attr("alpaca-field-id"))) {                                                // 9153
                this.outerEl.attr("alpaca-field-id", this.getId());                                                    // 9154
            }                                                                                                          // 9155
                                                                                                                       // 9156
            // get container for forms                                                                                 // 9157
            if ($('.alpaca-form-fields-container', this.outerEl)) {                                                    // 9158
                this.formFieldsContainer = $('.alpaca-form-fields-container', this.outerEl);                           // 9159
            } else {                                                                                                   // 9160
                this.formFieldsContainer = this.outerEl;                                                               // 9161
            }                                                                                                          // 9162
                                                                                                                       // 9163
            // the form field                                                                                          // 9164
            this.field = $('form', this.container);                                                                    // 9165
            if (this.field)                                                                                            // 9166
            {                                                                                                          // 9167
                // add all provided attributes                                                                         // 9168
                this.field.attr(this.attributes);                                                                      // 9169
            }                                                                                                          // 9170
                                                                                                                       // 9171
            // populate the buttons as well                                                                            // 9172
            this.buttons = {};                                                                                         // 9173
            $.each($('.alpaca-form-button', this.container),function(k,v) {                                            // 9174
                                                                                                                       // 9175
                // TODO: this is technically wrong since we only want to trap for left-mousedown...                    // 9176
                $(v).mousedown(function() {                                                                            // 9177
                    var _this = $(this);                                                                               // 9178
                    _this.attr("button-pushed","true");                                                                // 9179
                    setTimeout(function() {                                                                            // 9180
                        if (_this.attr("button-pushed") && _this.attr("button-pushed") == "true" ) {                   // 9181
                            _this.click();                                                                             // 9182
                        }                                                                                              // 9183
                    }, 150);                                                                                           // 9184
                });                                                                                                    // 9185
                $(v).click(function() {                                                                                // 9186
                    $(this).removeAttr("button-pushed");                                                               // 9187
                });                                                                                                    // 9188
                _this.buttons[$(v).attr('data-key')] = $(v);                                                           // 9189
            });                                                                                                        // 9190
                                                                                                                       // 9191
            onSuccess();                                                                                               // 9192
        },                                                                                                             // 9193
                                                                                                                       // 9194
        /**                                                                                                            // 9195
         * Retrieve the form container.                                                                                // 9196
         *                                                                                                             // 9197
         * @returns {Object} Form container.                                                                           // 9198
         */                                                                                                            // 9199
        getEl: function() {                                                                                            // 9200
            return this.outerEl;                                                                                       // 9201
        },                                                                                                             // 9202
                                                                                                                       // 9203
        /**                                                                                                            // 9204
         * Returns the id of the form.                                                                                 // 9205
         *                                                                                                             // 9206
         * @returns {String} Form id                                                                                   // 9207
         */                                                                                                            // 9208
        getId: function() {                                                                                            // 9209
            return this.id;                                                                                            // 9210
        },                                                                                                             // 9211
                                                                                                                       // 9212
        /**                                                                                                            // 9213
         * Returns form type.                                                                                          // 9214
         *                                                                                                             // 9215
         * @returns {String} Form type.                                                                                // 9216
         */                                                                                                            // 9217
        getType: function() {                                                                                          // 9218
            return this.type;                                                                                          // 9219
        },                                                                                                             // 9220
                                                                                                                       // 9221
        /**                                                                                                            // 9222
         * Returns this form's parent.                                                                                 // 9223
         *                                                                                                             // 9224
         * @returns {Object} Form parent.                                                                              // 9225
         */                                                                                                            // 9226
        getParent: function() {                                                                                        // 9227
            return this.parent;                                                                                        // 9228
        },                                                                                                             // 9229
                                                                                                                       // 9230
        /**                                                                                                            // 9231
         * Returns the value of the JSON rendered by this form.                                                        // 9232
         *                                                                                                             // 9233
         * @returns {Any} Value of the JSON rendered by this form.                                                     // 9234
         */                                                                                                            // 9235
        getValue: function() {                                                                                         // 9236
            return this.topControl.getValue();                                                                         // 9237
        },                                                                                                             // 9238
                                                                                                                       // 9239
        /**                                                                                                            // 9240
         * Sets the value of the JSON to be rendered by this form.                                                     // 9241
         *                                                                                                             // 9242
         * @param {Any} value Value to be set.                                                                         // 9243
         */                                                                                                            // 9244
        setValue: function(value) {                                                                                    // 9245
            this.topControl.setValue(value);                                                                           // 9246
        },                                                                                                             // 9247
                                                                                                                       // 9248
        /**                                                                                                            // 9249
         * Initializes events handling (Form Submission) for this form.                                                // 9250
         */                                                                                                            // 9251
        initEvents: function() {                                                                                       // 9252
            var _this = this;                                                                                          // 9253
            if (this.field) {                                                                                          // 9254
                var v = this.getValue();                                                                               // 9255
                $(this.field).submit(v, function(e) {                                                                  // 9256
                                                                                                                       // 9257
                    return _this.onSubmit(e, _this);                                                                   // 9258
                });                                                                                                    // 9259
            }                                                                                                          // 9260
                                                                                                                       // 9261
            // listen for fieldupdates and determine whether the form is valid.                                        // 9262
            // if so, enable the submit button...                                                                      // 9263
            // otherwise, disable it                                                                                   // 9264
            if (this.options.toggleSubmitValidState)                                                                   // 9265
            {                                                                                                          // 9266
                $(_this.topControl.getEl()).bind("fieldupdate", function() {                                           // 9267
                    _this.adjustSubmitButtonState();                                                                   // 9268
                });                                                                                                    // 9269
                                                                                                                       // 9270
                this.adjustSubmitButtonState();                                                                        // 9271
            }                                                                                                          // 9272
        },                                                                                                             // 9273
                                                                                                                       // 9274
        /**                                                                                                            // 9275
         * Handles form submit events.                                                                                 // 9276
         *                                                                                                             // 9277
         * @param {Object} e Submit event.                                                                             // 9278
         * @param {Object} form the form                                                                               // 9279
         */                                                                                                            // 9280
        onSubmit: function(e, form) {                                                                                  // 9281
            if (this.submitHandler) {                                                                                  // 9282
                e.stopPropagation();                                                                                   // 9283
                                                                                                                       // 9284
                var v = this.submitHandler(e, form);                                                                   // 9285
                if (Alpaca.isUndefined(v)) {                                                                           // 9286
                    v = false;                                                                                         // 9287
                }                                                                                                      // 9288
                                                                                                                       // 9289
                return v;                                                                                              // 9290
                                                                                                                       // 9291
            }                                                                                                          // 9292
        },                                                                                                             // 9293
                                                                                                                       // 9294
        /**                                                                                                            // 9295
         * Registers a custom submit handler.                                                                          // 9296
         *                                                                                                             // 9297
         * @param {Object} func Submit handler to be registered.                                                       // 9298
         */                                                                                                            // 9299
        registerSubmitHandler: function (func) {                                                                       // 9300
            if (Alpaca.isFunction(func)) {                                                                             // 9301
                this.submitHandler = func;                                                                             // 9302
            }                                                                                                          // 9303
        },                                                                                                             // 9304
                                                                                                                       // 9305
        /**                                                                                                            // 9306
         * Displays validation information of all fields of this form.                                                 // 9307
         *                                                                                                             // 9308
         * @param {Boolean} checkChildren whether to render validation state for child fields                          // 9309
         *                                                                                                             // 9310
         * @returns {Object} Form validation state.                                                                    // 9311
         */                                                                                                            // 9312
        renderValidationState: function(checkChildren) {                                                               // 9313
            this.topControl.renderValidationState(checkChildren);                                                      // 9314
        },                                                                                                             // 9315
                                                                                                                       // 9316
        /**                                                                                                            // 9317
         * Disables this form.                                                                                         // 9318
         */                                                                                                            // 9319
        disable: function() {                                                                                          // 9320
            this.topControl.disable();                                                                                 // 9321
        },                                                                                                             // 9322
                                                                                                                       // 9323
        /**                                                                                                            // 9324
         * Enables this form.                                                                                          // 9325
         */                                                                                                            // 9326
        enable: function() {                                                                                           // 9327
            this.topControl.enable();                                                                                  // 9328
        },                                                                                                             // 9329
                                                                                                                       // 9330
        /**                                                                                                            // 9331
         * Focuses on this form.                                                                                       // 9332
         */                                                                                                            // 9333
        focus: function() {                                                                                            // 9334
            this.topControl.focus();                                                                                   // 9335
        },                                                                                                             // 9336
                                                                                                                       // 9337
        /**                                                                                                            // 9338
         * Purge any event listeners and remove the form from the DOM.                                                 // 9339
         *                                                                                                             // 9340
         * @param [Boolean] skipParent when true, the form cleans up without traversing through parent child controls  // 9341
         */                                                                                                            // 9342
        destroy: function(skipParent) {                                                                                // 9343
                                                                                                                       // 9344
            this.getEl().remove();                                                                                     // 9345
                                                                                                                       // 9346
            // we allow form.destroy() which tells parent control to destroy                                           // 9347
            // if skipParent == true, then we do not call up (invoked from container)                                  // 9348
            if (!skipParent && this.parent)                                                                            // 9349
            {                                                                                                          // 9350
                this.parent.destroy();                                                                                 // 9351
            }                                                                                                          // 9352
        },                                                                                                             // 9353
                                                                                                                       // 9354
        /**                                                                                                            // 9355
         * Shows the form.                                                                                             // 9356
         */                                                                                                            // 9357
        show: function() {                                                                                             // 9358
            this.getEl().css({                                                                                         // 9359
                "display": ""                                                                                          // 9360
            });                                                                                                        // 9361
        },                                                                                                             // 9362
                                                                                                                       // 9363
        /**                                                                                                            // 9364
         * Hides the form.                                                                                             // 9365
         */                                                                                                            // 9366
        hide: function() {                                                                                             // 9367
            this.getEl().css({                                                                                         // 9368
                "display": "none"                                                                                      // 9369
            });                                                                                                        // 9370
        },                                                                                                             // 9371
                                                                                                                       // 9372
        /**                                                                                                            // 9373
         * Clears the form and resets values of its fields.                                                            // 9374
         *                                                                                                             // 9375
         * @param stopUpdateTrigger If false, triggers the update event of this event.                                 // 9376
         */                                                                                                            // 9377
        clear: function(stopUpdateTrigger) {                                                                           // 9378
            this.topControl.clear(stopUpdateTrigger);                                                                  // 9379
        },                                                                                                             // 9380
                                                                                                                       // 9381
        /**                                                                                                            // 9382
         * Checks if form is empty.                                                                                    // 9383
         *                                                                                                             // 9384
         * @returns {Boolean} True if the form is empty, false otherwise.                                              // 9385
         */                                                                                                            // 9386
        isEmpty: function() {                                                                                          // 9387
            return this.topControl.isEmpty();                                                                          // 9388
        },                                                                                                             // 9389
                                                                                                                       // 9390
        /**                                                                                                            // 9391
         * Returns the form template.                                                                                  // 9392
         *                                                                                                             // 9393
         * @returns {Object|String} template Form template.                                                            // 9394
         */                                                                                                            // 9395
        getTemplateDescriptor: function() {                                                                            // 9396
            return this.templateDescriptor;                                                                            // 9397
        },                                                                                                             // 9398
                                                                                                                       // 9399
        /**                                                                                                            // 9400
         * Sets the form template.                                                                                     // 9401
         *                                                                                                             // 9402
         * @param {String} templateDescriptor Template to be set                                                       // 9403
         */                                                                                                            // 9404
        setTemplateDescriptor: function(templateDescriptor) {                                                          // 9405
            this.templateDescriptor = templateDescriptor;                                                              // 9406
        }                                                                                                              // 9407
                                                                                                                       // 9408
    });                                                                                                                // 9409
                                                                                                                       // 9410
})(jQuery);                                                                                                            // 9411
(function($) {                                                                                                         // 9412
                                                                                                                       // 9413
    var Alpaca = $.alpaca;                                                                                             // 9414
                                                                                                                       // 9415
    Alpaca.Fields.TextField = Alpaca.ControlField.extend(                                                              // 9416
    /**                                                                                                                // 9417
     * @lends Alpaca.Fields.TextField.prototype                                                                        // 9418
     */                                                                                                                // 9419
    {                                                                                                                  // 9420
        /**                                                                                                            // 9421
         * @constructs                                                                                                 // 9422
         * @augments Alpaca.ControlField                                                                               // 9423
         *                                                                                                             // 9424
         * @class Basic control for general text.                                                                      // 9425
         *                                                                                                             // 9426
         * @param {Object} container Field container.                                                                  // 9427
         * @param {Any} data Field data.                                                                               // 9428
         * @param {Object} options Field options.                                                                      // 9429
         * @param {Object} schema Field schema.                                                                        // 9430
         * @param {Object|String} view Field view.                                                                     // 9431
         * @param {Alpaca.Connector} connector Field connector.                                                        // 9432
         * @param {Function} errorCallback Error callback.                                                             // 9433
         */                                                                                                            // 9434
        constructor: function(container, data, options, schema, view, connector, errorCallback) {                      // 9435
            this.base(container, data, options, schema, view, connector, errorCallback);                               // 9436
        },                                                                                                             // 9437
                                                                                                                       // 9438
        /**                                                                                                            // 9439
         * @see Alpaca.Field#setup                                                                                     // 9440
         */                                                                                                            // 9441
        setup: function() {                                                                                            // 9442
            this.base();                                                                                               // 9443
                                                                                                                       // 9444
            if (!this.options.size) {                                                                                  // 9445
                this.options.size = 40;                                                                                // 9446
            }                                                                                                          // 9447
                                                                                                                       // 9448
            this.controlFieldTemplateDescriptor = this.view.getTemplateDescriptor("controlFieldText");                 // 9449
        },                                                                                                             // 9450
                                                                                                                       // 9451
        /**                                                                                                            // 9452
         * @see Alpaca.Field#destroy                                                                                   // 9453
         */                                                                                                            // 9454
        destroy: function() {                                                                                          // 9455
                                                                                                                       // 9456
            this.base();                                                                                               // 9457
                                                                                                                       // 9458
            // clean up typeahead                                                                                      // 9459
            if ( this.field && this.field.typeahead && this.options.typeahead) {                                       // 9460
                $(this.field).typeahead('destroy');                                                                    // 9461
            }                                                                                                          // 9462
        },                                                                                                             // 9463
                                                                                                                       // 9464
        /**                                                                                                            // 9465
         * @see Alpaca.ControlField#renderField                                                                        // 9466
         */                                                                                                            // 9467
        renderField: function(onSuccess) {                                                                             // 9468
                                                                                                                       // 9469
            var _this = this;                                                                                          // 9470
                                                                                                                       // 9471
            if (this.controlFieldTemplateDescriptor) {                                                                 // 9472
                                                                                                                       // 9473
                this.field = _this.view.tmpl(this.controlFieldTemplateDescriptor, {                                    // 9474
                    "id": this.getId(),                                                                                // 9475
                    "name": this.name,                                                                                 // 9476
                    "options": this.options                                                                            // 9477
                });                                                                                                    // 9478
                this.injectField(this.field);                                                                          // 9479
            }                                                                                                          // 9480
                                                                                                                       // 9481
            if (onSuccess) {                                                                                           // 9482
                onSuccess();                                                                                           // 9483
            }                                                                                                          // 9484
        },                                                                                                             // 9485
                                                                                                                       // 9486
        /**                                                                                                            // 9487
         * @see Alpaca.ControlField#postRender                                                                         // 9488
         */                                                                                                            // 9489
        postRender: function(callback) {                                                                               // 9490
                                                                                                                       // 9491
            var self = this;                                                                                           // 9492
                                                                                                                       // 9493
            this.base(function() {                                                                                     // 9494
                                                                                                                       // 9495
                if (self.field)                                                                                        // 9496
                {                                                                                                      // 9497
                    // mask it                                                                                         // 9498
                    if ( self.field && self.field.mask && self.options.maskString) {                                   // 9499
                        self.field.mask(self.options.maskString);                                                      // 9500
                    }                                                                                                  // 9501
                                                                                                                       // 9502
                    // typeahead?                                                                                      // 9503
                    if ( self.field && self.field.typeahead && self.options.typeahead) {                               // 9504
                                                                                                                       // 9505
                        var tconfig = {};                                                                              // 9506
                        for (var k in self.options.typeahead) {                                                        // 9507
                            tconfig[k] = self.options.typeahead[k];                                                    // 9508
                        }                                                                                              // 9509
                                                                                                                       // 9510
                        if (!tconfig.name) {                                                                           // 9511
                            tconfig.name = self.getId();                                                               // 9512
                        }                                                                                              // 9513
                                                                                                                       // 9514
                        $(self.field).typeahead(tconfig);                                                              // 9515
                                                                                                                       // 9516
                        // listen for "autocompleted" event and set the value of the field                             // 9517
                        $(self.field).on("typeahead:autocompleted", function(event, datum) {                           // 9518
                            self.setValue(datum.value);                                                                // 9519
                        });                                                                                            // 9520
                                                                                                                       // 9521
                        // listen for "selected" event and set the value of the field                                  // 9522
                        $(self.field).on("typeahead:selected", function(event, datum) {                                // 9523
                            self.setValue(datum.value);                                                                // 9524
                        });                                                                                            // 9525
                                                                                                                       // 9526
                        // custom events                                                                               // 9527
                        if (tconfig.events)                                                                            // 9528
                        {                                                                                              // 9529
                            if (tconfig.events.autocompleted) {                                                        // 9530
                                $(self.field).on("typeahead:autocompleted", function(event, datum) {                   // 9531
                                    tconfig.events.autocompleted(event, datum);                                        // 9532
                                });                                                                                    // 9533
                            }                                                                                          // 9534
                            if (tconfig.events.selected) {                                                             // 9535
                                $(self.field).on("typeahead:selected", function(event, datum) {                        // 9536
                                    tconfig.events.selected(event, datum);                                             // 9537
                                });                                                                                    // 9538
                            }                                                                                          // 9539
                        }                                                                                              // 9540
                                                                                                                       // 9541
                        // when the input value changes, change the query in typeahead                                 // 9542
                        // this is to keep the typeahead control sync'd with the actual dom value                      // 9543
                        // only do this if the query doesn't already match                                             // 9544
                        var fi = $(self.field);                                                                        // 9545
                        $(self.field).change(function() {                                                              // 9546
                                                                                                                       // 9547
                            var value = $(this).val();                                                                 // 9548
                            var currentQuery = $(fi).typeahead('getQuery');                                            // 9549
                            if (currentQuery != value)                                                                 // 9550
                            {                                                                                          // 9551
                                $(fi).typeahead('setQuery', value);                                                    // 9552
                            }                                                                                          // 9553
                                                                                                                       // 9554
                        });                                                                                            // 9555
                    }                                                                                                  // 9556
                                                                                                                       // 9557
                    if (self.fieldContainer) {                                                                         // 9558
                        self.fieldContainer.addClass('alpaca-controlfield-text');                                      // 9559
                    }                                                                                                  // 9560
                }                                                                                                      // 9561
                                                                                                                       // 9562
                callback();                                                                                            // 9563
            });                                                                                                        // 9564
                                                                                                                       // 9565
        },                                                                                                             // 9566
                                                                                                                       // 9567
        /**                                                                                                            // 9568
         * @see Alpaca.Field#getValue                                                                                  // 9569
         */                                                                                                            // 9570
        getValue: function() {                                                                                         // 9571
            var value = null;                                                                                          // 9572
            if (this.field) {                                                                                          // 9573
                value = this.field.val();                                                                              // 9574
            } else {                                                                                                   // 9575
                value = this.base();                                                                                   // 9576
            }                                                                                                          // 9577
                                                                                                                       // 9578
            return value;                                                                                              // 9579
        },                                                                                                             // 9580
                                                                                                                       // 9581
        /**                                                                                                            // 9582
         * @see Alpaca.Field#setValue                                                                                  // 9583
         */                                                                                                            // 9584
        setValue: function(value) {                                                                                    // 9585
                                                                                                                       // 9586
            if (this.field)                                                                                            // 9587
            {                                                                                                          // 9588
                if (Alpaca.isEmpty(value)) {                                                                           // 9589
                    this.field.val("");                                                                                // 9590
                } else {                                                                                               // 9591
                    this.field.val(value);                                                                             // 9592
                }                                                                                                      // 9593
            }                                                                                                          // 9594
                                                                                                                       // 9595
            // be sure to call into base method                                                                        // 9596
            this.base(value);                                                                                          // 9597
        },                                                                                                             // 9598
                                                                                                                       // 9599
        /**                                                                                                            // 9600
         * @see Alpaca.ControlField#handleValidate                                                                     // 9601
         */                                                                                                            // 9602
        handleValidate: function() {                                                                                   // 9603
            var baseStatus = this.base();                                                                              // 9604
                                                                                                                       // 9605
            var valInfo = this.validation;                                                                             // 9606
			                                                                                                                    // 9607
			var status =  this._validatePattern();                                                                              // 9608
            valInfo["invalidPattern"] = {                                                                              // 9609
                "message": status ? "" : Alpaca.substituteTokens(this.view.getMessage("invalidPattern"), [this.schema.pattern]),
                "status": status                                                                                       // 9611
            };                                                                                                         // 9612
                                                                                                                       // 9613
            status = this._validateMaxLength();                                                                        // 9614
			valInfo["stringTooLong"] = {                                                                                        // 9615
                "message": status ? "" : Alpaca.substituteTokens(this.view.getMessage("stringTooLong"), [this.schema.maxLength]),
                "status": status                                                                                       // 9617
            };                                                                                                         // 9618
                                                                                                                       // 9619
            status = this._validateMinLength();                                                                        // 9620
			valInfo["stringTooShort"] = {                                                                                       // 9621
                "message": status ? "" : Alpaca.substituteTokens(this.view.getMessage("stringTooShort"), [this.schema.minLength]),
                "status": status                                                                                       // 9623
            };                                                                                                         // 9624
                                                                                                                       // 9625
            return baseStatus && valInfo["invalidPattern"]["status"] && valInfo["stringTooLong"]["status"] && valInfo["stringTooShort"]["status"];
        },                                                                                                             // 9627
                                                                                                                       // 9628
        /**                                                                                                            // 9629
         * Validates against the schema pattern property.                                                              // 9630
         *                                                                                                             // 9631
         * @returns {Boolean} True if it matches the pattern, false otherwise.                                         // 9632
         */                                                                                                            // 9633
        _validatePattern: function() {                                                                                 // 9634
            if (this.schema.pattern) {                                                                                 // 9635
                var val = this.getValue();                                                                             // 9636
                if (val === "" && this.options.allowOptionalEmpty && !this.schema.required) {                          // 9637
                    return true;                                                                                       // 9638
                }                                                                                                      // 9639
                if (Alpaca.isEmpty(val)) {                                                                             // 9640
                    val = "";                                                                                          // 9641
                }                                                                                                      // 9642
                if (!val.match(this.schema.pattern)) {                                                                 // 9643
                    return false;                                                                                      // 9644
                }                                                                                                      // 9645
            }                                                                                                          // 9646
                                                                                                                       // 9647
            return true;                                                                                               // 9648
        },                                                                                                             // 9649
                                                                                                                       // 9650
        /**                                                                                                            // 9651
         * Validates against the schema minLength property.                                                            // 9652
         *                                                                                                             // 9653
         * @returns {Boolean} True if its size is greater than minLength, false otherwise.                             // 9654
         */                                                                                                            // 9655
        _validateMinLength: function() {                                                                               // 9656
			if (!Alpaca.isEmpty(this.schema.minLength)) {                                                                       // 9657
				var val = this.getValue();                                                                                         // 9658
                if (val === "" && this.options.allowOptionalEmpty && !this.schema.required) {                          // 9659
                    return true;                                                                                       // 9660
                }                                                                                                      // 9661
                if (Alpaca.isEmpty(val)) {                                                                             // 9662
                    val = "";                                                                                          // 9663
                }                                                                                                      // 9664
                if (val.length < this.schema.minLength) {                                                              // 9665
                    return false;                                                                                      // 9666
                }                                                                                                      // 9667
			}                                                                                                                   // 9668
			return true;                                                                                                        // 9669
		},                                                                                                                   // 9670
                                                                                                                       // 9671
        /**                                                                                                            // 9672
         * Validates against the schema maxLength property.                                                            // 9673
         *                                                                                                             // 9674
         * @returns {Boolean} True if its size is less than maxLength , false otherwise.                               // 9675
         */                                                                                                            // 9676
        _validateMaxLength: function() {                                                                               // 9677
			if (!Alpaca.isEmpty(this.schema.maxLength)) {                                                                       // 9678
				var val = this.getValue();                                                                                         // 9679
                if (val === "" && this.options.allowOptionalEmpty && !this.schema.required) {                          // 9680
                    return true;                                                                                       // 9681
                }                                                                                                      // 9682
                if (Alpaca.isEmpty(val)) {                                                                             // 9683
                    val = "";                                                                                          // 9684
                }                                                                                                      // 9685
                if (val.length > this.schema.maxLength) {                                                              // 9686
                    return false;                                                                                      // 9687
                }                                                                                                      // 9688
			}                                                                                                                   // 9689
            return true;                                                                                               // 9690
        },                                                                                                             // 9691
                                                                                                                       // 9692
        /**                                                                                                            // 9693
         * @see Alpaca.Field#disable                                                                                   // 9694
         */                                                                                                            // 9695
        disable: function() {                                                                                          // 9696
            if (this.field)                                                                                            // 9697
            {                                                                                                          // 9698
                this.field.disabled = true;                                                                            // 9699
            }                                                                                                          // 9700
        },                                                                                                             // 9701
                                                                                                                       // 9702
        /**                                                                                                            // 9703
         * @see Alpaca.Field#enable                                                                                    // 9704
         */                                                                                                            // 9705
        enable: function() {                                                                                           // 9706
            if (this.field)                                                                                            // 9707
            {                                                                                                          // 9708
                this.field.disabled = false;                                                                           // 9709
            }                                                                                                          // 9710
        },                                                                                                             // 9711
                                                                                                                       // 9712
        /**                                                                                                            // 9713
         * @see Alpaca.Field#focus                                                                                     // 9714
         */                                                                                                            // 9715
        focus: function() {                                                                                            // 9716
            if (this.field)                                                                                            // 9717
            {                                                                                                          // 9718
                this.field.focus();                                                                                    // 9719
            }                                                                                                          // 9720
        }                                                                                                              // 9721
                                                                                                                       // 9722
    });                                                                                                                // 9723
                                                                                                                       // 9724
    Alpaca.registerTemplate("controlFieldText", '<input type="text" id="${id}" {{if options.placeholder}}placeholder="${options.placeholder}"{{/if}} {{if options.size}}size="${options.size}"{{/if}} {{if options.readonly}}readonly="readonly"{{/if}} {{if name}}name="${name}"{{/if}} {{each(i,v) options.data}}data-${i}="${v}"{{/each}}/>');
    Alpaca.registerMessages({                                                                                          // 9726
        "invalidPattern": "This field should have pattern {0}",                                                        // 9727
        "stringTooShort": "This field should contain at least {0} numbers or characters",                              // 9728
        "stringTooLong": "This field should contain at most {0} numbers or characters"                                 // 9729
    });                                                                                                                // 9730
    Alpaca.registerFieldClass("text", Alpaca.Fields.TextField);                                                        // 9731
    Alpaca.registerDefaultSchemaFieldMapping("string", "text");                                                        // 9732
})(jQuery);                                                                                                            // 9733
(function($) {                                                                                                         // 9734
                                                                                                                       // 9735
    var Alpaca = $.alpaca;                                                                                             // 9736
                                                                                                                       // 9737
    Alpaca.Fields.TextAreaField = Alpaca.Fields.TextField.extend(                                                      // 9738
    /**                                                                                                                // 9739
     * @lends Alpaca.Fields.TextAreaField.prototype                                                                    // 9740
     */                                                                                                                // 9741
    {                                                                                                                  // 9742
        /**                                                                                                            // 9743
         * @constructs                                                                                                 // 9744
         * @augments Alpaca.Fields.TextField                                                                           // 9745
         *                                                                                                             // 9746
         * @class Textarea control for chunk of text.                                                                  // 9747
         *                                                                                                             // 9748
         * @param {Object} container Field container.                                                                  // 9749
         * @param {Any} data Field data.                                                                               // 9750
         * @param {Object} options Field options.                                                                      // 9751
         * @param {Object} schema Field schema.                                                                        // 9752
         * @param {Object|String} view Field view.                                                                     // 9753
         * @param {Alpaca.Connector} connector Field connector.                                                        // 9754
         * @param {Function} errorCallback Error callback.                                                             // 9755
         */                                                                                                            // 9756
        constructor: function(container, data, options, schema, view, connector, errorCallback) {                      // 9757
            this.base(container, data, options, schema, view, connector, errorCallback);                               // 9758
        },                                                                                                             // 9759
                                                                                                                       // 9760
        /**                                                                                                            // 9761
         * @see Alpaca.Fields.TextField#setup                                                                          // 9762
         */                                                                                                            // 9763
        setup: function() {                                                                                            // 9764
            this.base();                                                                                               // 9765
                                                                                                                       // 9766
            if (!this.options.rows) {                                                                                  // 9767
                this.options.rows = 5;                                                                                 // 9768
            }                                                                                                          // 9769
                                                                                                                       // 9770
            if (!this.options.cols) {                                                                                  // 9771
                this.options.cols = 40;                                                                                // 9772
            }                                                                                                          // 9773
                                                                                                                       // 9774
            this.controlFieldTemplateDescriptor = this.view.getTemplateDescriptor("controlFieldTextarea");             // 9775
        },                                                                                                             // 9776
                                                                                                                       // 9777
        /**                                                                                                            // 9778
         * @see Alpaca.Fields.TextField#postRender                                                                     // 9779
         */                                                                                                            // 9780
        postRender: function(callback) {                                                                               // 9781
                                                                                                                       // 9782
            var self = this;                                                                                           // 9783
                                                                                                                       // 9784
            this.base(function() {                                                                                     // 9785
                                                                                                                       // 9786
                if (self.fieldContainer) {                                                                             // 9787
                    self.fieldContainer.addClass('alpaca-controlfield-textarea');                                      // 9788
                }                                                                                                      // 9789
                                                                                                                       // 9790
                callback();                                                                                            // 9791
            });                                                                                                        // 9792
        },                                                                                                             // 9793
                                                                                                                       // 9794
        /**                                                                                                            // 9795
         * @see Alpaca.ControlField#handleValidate                                                                     // 9796
         */                                                                                                            // 9797
        handleValidate: function() {                                                                                   // 9798
            var baseStatus = this.base();                                                                              // 9799
                                                                                                                       // 9800
            var valInfo = this.validation;                                                                             // 9801
                                                                                                                       // 9802
            var status =  this._validateWordCount();                                                                   // 9803
            valInfo["wordLimitExceeded"] = {                                                                           // 9804
                "message": status ? "" : Alpaca.substituteTokens(this.view.getMessage("wordLimitExceeded"), [this.options.wordlimit]),
                "status": status                                                                                       // 9806
            };                                                                                                         // 9807
                                                                                                                       // 9808
            return baseStatus && valInfo["wordLimitExceeded"]["status"];                                               // 9809
        },                                                                                                             // 9810
                                                                                                                       // 9811
        /**                                                                                                            // 9812
         * Validate for word limit.                                                                                    // 9813
         *                                                                                                             // 9814
         * @returns {Boolean} True if the number of words is equal to or less than the word limit.                     // 9815
         */                                                                                                            // 9816
        _validateWordCount: function() {                                                                               // 9817
                                                                                                                       // 9818
            if (this.options.wordlimit && this.options.wordlimit > -1)                                                 // 9819
            {                                                                                                          // 9820
                var val = this.data;                                                                                   // 9821
                                                                                                                       // 9822
                if (val)                                                                                               // 9823
                {                                                                                                      // 9824
                    var wordcount = val.split(" ").length;                                                             // 9825
                    if (wordcount > this.options.wordlimit)                                                            // 9826
                    {                                                                                                  // 9827
                        return false;                                                                                  // 9828
                    }                                                                                                  // 9829
                }                                                                                                      // 9830
            }                                                                                                          // 9831
                                                                                                                       // 9832
            return true;                                                                                               // 9833
        },                                                                                                             // 9834
                                                                                                                       // 9835
                                                                                                                       // 9836
        /**                                                                                                            // 9837
         *@see Alpaca.Fields.TextField#setValue                                                                        // 9838
         */                                                                                                            // 9839
        setValue: function(value) {                                                                                    // 9840
            $(this.field).val(value);                                                                                  // 9841
                                                                                                                       // 9842
            // be sure to call into base method                                                                        // 9843
            this.base(value);                                                                                          // 9844
        },                                                                                                             // 9845
                                                                                                                       // 9846
        /**                                                                                                            // 9847
         * @see Alpaca.Fields.TextField#getValue                                                                       // 9848
         */                                                                                                            // 9849
        getValue: function() {                                                                                         // 9850
            return $(this.field).val();                                                                                // 9851
        }                                                                                                              // 9852
                                                                                                                       // 9853
    });                                                                                                                // 9854
                                                                                                                       // 9855
    Alpaca.registerMessages({                                                                                          // 9856
        "wordLimitExceeded": "The maximum word limit of {0} has been exceeded."                                        // 9857
    });                                                                                                                // 9858
                                                                                                                       // 9859
    Alpaca.registerTemplate("controlFieldTextarea", '<textarea id="${id}" {{if options.placeholder}}placeholder="${options.placeholder}"{{/if}} {{if options.rows}}rows="${options.rows}"{{/if}} {{if options.cols}}cols="${options.cols}"{{/if}} {{if options.readonly}}readonly="readonly"{{/if}} {{if name}}name="${name}"{{/if}} {{each options.data}}data-${fieldId}="${value}"{{/each}}/>');
    Alpaca.registerFieldClass("textarea", Alpaca.Fields.TextAreaField);                                                // 9861
                                                                                                                       // 9862
})(jQuery);                                                                                                            // 9863
(function($) {                                                                                                         // 9864
                                                                                                                       // 9865
    var Alpaca = $.alpaca;                                                                                             // 9866
                                                                                                                       // 9867
    Alpaca.Fields.CheckBoxField = Alpaca.ControlField.extend(                                                          // 9868
        /**                                                                                                            // 9869
         * @lends Alpaca.Fields.CheckBoxField.prototype                                                                // 9870
         */                                                                                                            // 9871
        {                                                                                                              // 9872
            /**                                                                                                        // 9873
             * @constructs                                                                                             // 9874
             * @augments Alpaca.ControlField                                                                           // 9875
             *                                                                                                         // 9876
             * @class Checkbox control for JSON schema boolean type.                                                   // 9877
             *                                                                                                         // 9878
             * @param {Object} container Field container.                                                              // 9879
             * @param {Any} data Field data.                                                                           // 9880
             * @param {Object} options Field options.                                                                  // 9881
             * @param {Object} schema Field schema.                                                                    // 9882
             * @param {Object|String} view Field view.                                                                 // 9883
             * @param {Alpaca.Connector} connector Field connector.                                                    // 9884
             * @param {Function} errorCallback Error callback.                                                         // 9885
             */                                                                                                        // 9886
            constructor: function(container, data, options, schema, view, connector, errorCallback) {                  // 9887
                this.base(container, data, options, schema, view, connector, errorCallback);                           // 9888
            },                                                                                                         // 9889
                                                                                                                       // 9890
            /**                                                                                                        // 9891
             * @see Alpaca.Field#setup                                                                                 // 9892
             */                                                                                                        // 9893
            setup: function() {                                                                                        // 9894
                this.base();                                                                                           // 9895
                                                                                                                       // 9896
                if (!this.options.rightLabel) {                                                                        // 9897
                    this.options.rightLabel = "";                                                                      // 9898
                }                                                                                                      // 9899
            },                                                                                                         // 9900
                                                                                                                       // 9901
            /**                                                                                                        // 9902
             * Handler for the event that the checkbox is clicked.                                                     // 9903
             *                                                                                                         // 9904
             * @param e Event.                                                                                         // 9905
             */                                                                                                        // 9906
            onClick: function(e) {                                                                                     // 9907
                this.renderValidationState();                                                                          // 9908
            },                                                                                                         // 9909
                                                                                                                       // 9910
            /**                                                                                                        // 9911
             * @see Alpaca.ControlField#renderField                                                                    // 9912
             */                                                                                                        // 9913
            renderField: function(onSuccess) {                                                                         // 9914
                                                                                                                       // 9915
                var _this = this;                                                                                      // 9916
                                                                                                                       // 9917
                var controlFieldTemplateDescriptor = this.view.getTemplateDescriptor("controlFieldCheckbox");          // 9918
                                                                                                                       // 9919
                if (controlFieldTemplateDescriptor) {                                                                  // 9920
                    this.field = _this.view.tmpl(controlFieldTemplateDescriptor, {                                     // 9921
                        "id": this.getId(),                                                                            // 9922
                        "name": this.name,                                                                             // 9923
                        "options": this.options                                                                        // 9924
                    });                                                                                                // 9925
                    this.injectField(this.field);                                                                      // 9926
                    this.field = $('input[id="' + this.getId() + '"]', this.field);                                    // 9927
                                                                                                                       // 9928
                    // do this little trick so that if we have a default value, it gets set during first render        // 9929
                    // this causes the checked state of the control to update                                          // 9930
                    if (this.data) {                                                                                   // 9931
                        this.setValue(true);                                                                           // 9932
                    }                                                                                                  // 9933
                }                                                                                                      // 9934
                                                                                                                       // 9935
                if (onSuccess) {                                                                                       // 9936
                    onSuccess();                                                                                       // 9937
                }                                                                                                      // 9938
            },                                                                                                         // 9939
                                                                                                                       // 9940
            /**                                                                                                        // 9941
             * @see Alpaca.ControlField#postRender                                                                     // 9942
             */                                                                                                        // 9943
            postRender: function(callback) {                                                                           // 9944
                                                                                                                       // 9945
                var self = this;                                                                                       // 9946
                                                                                                                       // 9947
                this.base(function() {                                                                                 // 9948
                                                                                                                       // 9949
                    if (self.fieldContainer) {                                                                         // 9950
                        self.fieldContainer.addClass('alpaca-controlfield-checkbox');                                  // 9951
                    }                                                                                                  // 9952
                                                                                                                       // 9953
                    callback();                                                                                        // 9954
                });                                                                                                    // 9955
            },                                                                                                         // 9956
                                                                                                                       // 9957
            /**                                                                                                        // 9958
             * @see Alpaca.Field#getValue                                                                              // 9959
             */                                                                                                        // 9960
            getValue: function() {                                                                                     // 9961
                //return this.field.attr("checked") ? true : false;                                                    // 9962
                return Alpaca.checked(this.field);                                                                     // 9963
            },                                                                                                         // 9964
                                                                                                                       // 9965
            /**                                                                                                        // 9966
             * @see Alpaca.Field#setValue                                                                              // 9967
             */                                                                                                        // 9968
            setValue: function(value) {                                                                                // 9969
                // convert string value to boolean                                                                     // 9970
                if (Alpaca.isString(value)) {                                                                          // 9971
                    value = (value === "true");                                                                        // 9972
                }                                                                                                      // 9973
                                                                                                                       // 9974
                Alpaca.checked(this.field, value);                                                                     // 9975
                                                                                                                       // 9976
                // be sure to call into base method                                                                    // 9977
                this.base(value);                                                                                      // 9978
            },                                                                                                         // 9979
                                                                                                                       // 9980
            /**                                                                                                        // 9981
             * @see Alpaca.Field#disable                                                                               // 9982
             */                                                                                                        // 9983
            disable: function() {                                                                                      // 9984
                this.field.disabled = true;                                                                            // 9985
            },                                                                                                         // 9986
                                                                                                                       // 9987
            /**                                                                                                        // 9988
             * @see Alpaca.Field#enable                                                                                // 9989
             */                                                                                                        // 9990
            enable: function() {                                                                                       // 9991
                this.field.disabled = false;                                                                           // 9992
            }                                                                                                          // 9993
                                                                                                                       // 9994
        });                                                                                                            // 9995
                                                                                                                       // 9996
    Alpaca.registerTemplate("controlFieldCheckbox", '<span><input type="checkbox" id="${id}" {{if options.readonly}}readonly="readonly"{{/if}} {{if name}}name="${name}"{{/if}} {{each(i,v) options.data}}data-${i}="${v}"{{/each}}/>{{if options.rightLabel}}<label for="${id}">${options.rightLabel}</label>{{/if}}</span>');
                                                                                                                       // 9998
    Alpaca.registerFieldClass("checkbox", Alpaca.Fields.CheckBoxField);                                                // 9999
    Alpaca.registerDefaultSchemaFieldMapping("boolean", "checkbox");                                                   // 10000
})(jQuery);                                                                                                            // 10001
(function($) {                                                                                                         // 10002
                                                                                                                       // 10003
    var Alpaca = $.alpaca;                                                                                             // 10004
                                                                                                                       // 10005
    Alpaca.Fields.FileField = Alpaca.Fields.TextField.extend(                                                          // 10006
    /**                                                                                                                // 10007
     * @lends Alpaca.Fields.FileField.prototype                                                                        // 10008
     */                                                                                                                // 10009
    {                                                                                                                  // 10010
        /**                                                                                                            // 10011
         * @constructs                                                                                                 // 10012
         * @augments Alpaca.Fields.TextField                                                                           // 10013
         *                                                                                                             // 10014
         * @class File control with nice custom styles.                                                                // 10015
         *                                                                                                             // 10016
         * @param {Object} container Field container.                                                                  // 10017
         * @param {Any} data Field data.                                                                               // 10018
         * @param {Object} options Field options.                                                                      // 10019
         * @param {Object} schema Field schema.                                                                        // 10020
         * @param {Object|String} view Field view.                                                                     // 10021
         * @param {Alpaca.Connector} connector Field connector.                                                        // 10022
         * @param {Function} errorCallback Error callback.                                                             // 10023
         */                                                                                                            // 10024
        constructor: function(container, data, options, schema, view, connector, errorCallback) {                      // 10025
            this.base(container, data, options, schema, view, connector, errorCallback);                               // 10026
        },                                                                                                             // 10027
                                                                                                                       // 10028
        /**                                                                                                            // 10029
         * @see Alpaca.Fields.TextField#setup                                                                          // 10030
         */                                                                                                            // 10031
        setup: function() {                                                                                            // 10032
            this.base();                                                                                               // 10033
            this.controlFieldTemplateDescriptor = this.view.getTemplateDescriptor("controlFieldFile");                 // 10034
        },                                                                                                             // 10035
                                                                                                                       // 10036
        /**                                                                                                            // 10037
         * @see Alpaca.Fields.TextField#setValue                                                                       // 10038
         */                                                                                                            // 10039
        setValue: function(value) {                                                                                    // 10040
            // be sure to call into base method                                                                        // 10041
            // We won't be able to actually set the value for file input field so we use the mask input                // 10042
            var tmp = this.field;                                                                                      // 10043
            this.field = $('.alpaca-filefield-control',this.fieldContainer);                                           // 10044
            this.base(value);                                                                                          // 10045
                                                                                                                       // 10046
            // switch it back to actual file input                                                                     // 10047
            this.field = tmp;                                                                                          // 10048
        },                                                                                                             // 10049
                                                                                                                       // 10050
        onChange: function(e)                                                                                          // 10051
        {                                                                                                              // 10052
            this.base(e);                                                                                              // 10053
                                                                                                                       // 10054
            if (this.options.selectionHandler)                                                                         // 10055
            {                                                                                                          // 10056
                this.processSelectionHandler(e.target.files);                                                          // 10057
            }                                                                                                          // 10058
        },                                                                                                             // 10059
                                                                                                                       // 10060
        processSelectionHandler: function(files)                                                                       // 10061
        {                                                                                                              // 10062
            if (files && files.length > 0)                                                                             // 10063
            {                                                                                                          // 10064
                // if the browser supports HTML5 FileReader, we can pull in the stream for preview                     // 10065
                if (typeof(FileReader) !== "undefined")                                                                // 10066
                {                                                                                                      // 10067
                    // clear out previous loaded data                                                                  // 10068
                    var loadedData = [];                                                                               // 10069
                    var loadCount = 0;                                                                                 // 10070
                                                                                                                       // 10071
                    var fileReader = new FileReader();                                                                 // 10072
                    fileReader.onload = (function() {                                                                  // 10073
                        var field = this;                                                                              // 10074
                        return function(event)                                                                         // 10075
                        {                                                                                              // 10076
                            var dataUri = event.target.result;                                                         // 10077
                                                                                                                       // 10078
                            loadedData.push(dataUri);                                                                  // 10079
                            loadCount++;                                                                               // 10080
                                                                                                                       // 10081
                            if (loadCount === files.length)                                                            // 10082
                            {                                                                                          // 10083
                                field.options.selectionHandler.call(field, files, loadedData);                         // 10084
                            }                                                                                          // 10085
                        }                                                                                              // 10086
                    }).call(this);                                                                                     // 10087
                                                                                                                       // 10088
                    for (var i = 0; i < files.length; i++)                                                             // 10089
                    {                                                                                                  // 10090
                        fileReader.readAsDataURL(files[i]);                                                            // 10091
                    }                                                                                                  // 10092
                }                                                                                                      // 10093
            }                                                                                                          // 10094
        },                                                                                                             // 10095
                                                                                                                       // 10096
                                                                                                                       // 10097
        /**                                                                                                            // 10098
         * @see Alpaca.Fields.TextField#postRender                                                                     // 10099
         */                                                                                                            // 10100
        postRender: function(callback) {                                                                               // 10101
                                                                                                                       // 10102
            var self = this;                                                                                           // 10103
                                                                                                                       // 10104
            this.base(function() {                                                                                     // 10105
                                                                                                                       // 10106
                // apply additional css                                                                                // 10107
                if (self.fieldContainer) {                                                                             // 10108
                    self.fieldContainer.addClass("alpaca-controlfield-file");                                          // 10109
                }                                                                                                      // 10110
                                                                                                                       // 10111
                callback();                                                                                            // 10112
            });                                                                                                        // 10113
                                                                                                                       // 10114
            // listen for change events on the field                                                                   // 10115
        }                                                                                                              // 10116
    });                                                                                                                // 10117
                                                                                                                       // 10118
    Alpaca.registerTemplate("controlFieldFile", '<input type="file" id="${id}" {{if options.size}}size="${options.size}"{{/if}} {{if options.readonly}}readonly="readonly"{{/if}} {{if name}}name="${name}"{{/if}} {{each(i,v) options.data}}data-${i}="${v}"{{/each}}/>');
    Alpaca.registerFieldClass("file", Alpaca.Fields.FileField);                                                        // 10120
})(jQuery);                                                                                                            // 10121
(function($) {                                                                                                         // 10122
                                                                                                                       // 10123
    var Alpaca = $.alpaca;                                                                                             // 10124
                                                                                                                       // 10125
    Alpaca.Fields.ListField = Alpaca.ControlField.extend(                                                              // 10126
    /**                                                                                                                // 10127
     * @lends Alpaca.Fields.ListField.prototype                                                                        // 10128
     */                                                                                                                // 10129
    {                                                                                                                  // 10130
        /**                                                                                                            // 10131
         * @constructs                                                                                                 // 10132
         * @augments Alpaca.ControlField                                                                               // 10133
         *                                                                                                             // 10134
         * @class Abstract class for list-type controls.                                                               // 10135
         *                                                                                                             // 10136
         * @param {Object} container Field container.                                                                  // 10137
         * @param {Any} data Field data.                                                                               // 10138
         * @param {Object} options Field options.                                                                      // 10139
         * @param {Object} schema Field schema.                                                                        // 10140
         * @param {Object|String} view Field view.                                                                     // 10141
         * @param {Alpaca.Connector} connector Field connector.                                                        // 10142
         * @param {Function} errorCallback Error callback.                                                             // 10143
         */                                                                                                            // 10144
        constructor: function(container, data, options, schema, view, connector, errorCallback) {                      // 10145
            this.base(container, data, options, schema, view, connector, errorCallback);                               // 10146
        },                                                                                                             // 10147
                                                                                                                       // 10148
        /**                                                                                                            // 10149
         * @see Alpaca.Field#setup                                                                                     // 10150
         */                                                                                                            // 10151
        setup: function() {                                                                                            // 10152
            var _this = this;                                                                                          // 10153
            _this.base();                                                                                              // 10154
            _this.selectOptions = [];                                                                                  // 10155
            if (_this.getEnum()) {                                                                                     // 10156
                $.each(_this.getEnum(), function(index, value) {                                                       // 10157
                    var text = value;                                                                                  // 10158
                    if (_this.options.optionLabels) {                                                                  // 10159
                        if (!Alpaca.isEmpty(_this.options.optionLabels[index])) {                                      // 10160
                            text = _this.options.optionLabels[index];                                                  // 10161
                        } else if (!Alpaca.isEmpty(_this.options.optionLabels[value])) {                               // 10162
                            text = _this.options.optionLabels[value];                                                  // 10163
                        }                                                                                              // 10164
                    }                                                                                                  // 10165
                    _this.selectOptions.push({                                                                         // 10166
                        "value": value,                                                                                // 10167
                        "text": text                                                                                   // 10168
                    });                                                                                                // 10169
                });                                                                                                    // 10170
            }                                                                                                          // 10171
        },                                                                                                             // 10172
                                                                                                                       // 10173
        /**                                                                                                            // 10174
         * Gets schema enum property.                                                                                  // 10175
         *                                                                                                             // 10176
         * @returns {Array|String} Field schema enum property.                                                         // 10177
         */                                                                                                            // 10178
        getEnum: function() {                                                                                          // 10179
            if (this.schema && this.schema["enum"]) {                                                                  // 10180
                return this.schema["enum"];                                                                            // 10181
            }                                                                                                          // 10182
        },                                                                                                             // 10183
                                                                                                                       // 10184
        /**                                                                                                            // 10185
         * @see Alpaca.Field#getValue                                                                                  // 10186
         */                                                                                                            // 10187
        getValue: function(val) {                                                                                      // 10188
            var _this = this;                                                                                          // 10189
            if (Alpaca.isArray(val)) {                                                                                 // 10190
                $.each(val, function(index, itemVal) {                                                                 // 10191
                    $.each(_this.selectOptions, function(index2, selectOption) {                                       // 10192
                        if (selectOption.value == itemVal) {                                                           // 10193
                            val[index] = selectOption.value;                                                           // 10194
                        }                                                                                              // 10195
                    });                                                                                                // 10196
                });                                                                                                    // 10197
            } else {                                                                                                   // 10198
                $.each(this.selectOptions, function(index, selectOption) {                                             // 10199
                    if (selectOption.value == val) {                                                                   // 10200
                        val = selectOption.value;                                                                      // 10201
                    }                                                                                                  // 10202
                });                                                                                                    // 10203
            }                                                                                                          // 10204
            return val;                                                                                                // 10205
        },                                                                                                             // 10206
                                                                                                                       // 10207
        /**                                                                                                            // 10208
         * @see Alpaca.ControlField#renderField                                                                        // 10209
         */                                                                                                            // 10210
        renderField: function(onSuccess) {                                                                             // 10211
            var _this = this;                                                                                          // 10212
            if (this.options.dataSource) {                                                                             // 10213
                if (Alpaca.isFunction(this.options.dataSource)) {                                                      // 10214
                    this.options.dataSource(this, function() {                                                         // 10215
                        _this._renderField(onSuccess);                                                                 // 10216
                    });                                                                                                // 10217
                } else {                                                                                               // 10218
                    if (Alpaca.isUri(this.options.dataSource)) {                                                       // 10219
                        $.ajax({                                                                                       // 10220
                            url: this.options.dataSource,                                                              // 10221
                            type: "get",                                                                               // 10222
                            dataType: "json",                                                                          // 10223
                            success: function(jsonDocument) {                                                          // 10224
                                var ds = jsonDocument;                                                                 // 10225
                                if (_this.options.dsTransformer && Alpaca.isFunction(_this.options.dsTransformer)) {   // 10226
                                    ds = _this.options.dsTransformer(ds);                                              // 10227
                                }                                                                                      // 10228
                                if (ds) {                                                                              // 10229
                                    if (Alpaca.isArray(ds)) {                                                          // 10230
                                        $.each(ds, function(index, value) {                                            // 10231
                                            _this.selectOptions.push({                                                 // 10232
                                                "value": value,                                                        // 10233
                                                "text": value                                                          // 10234
                                            });                                                                        // 10235
                                        });                                                                            // 10236
                                    }                                                                                  // 10237
                                    if (Alpaca.isObject(ds)) {                                                         // 10238
                                        $.each(ds, function(index, value) {                                            // 10239
                                            _this.selectOptions.push({                                                 // 10240
                                                "value": index,                                                        // 10241
                                                "text": value                                                          // 10242
                                            });                                                                        // 10243
                                        });                                                                            // 10244
                                    }                                                                                  // 10245
                                }                                                                                      // 10246
                                                                                                                       // 10247
                                _this._renderField(onSuccess);                                                         // 10248
                            },                                                                                         // 10249
                            "error": function(jqXHR, textStatus, errorThrown) {                                        // 10250
                                _this.errorCallback({                                                                  // 10251
                                    "message":"Unable to load data from uri : " + _this.options.dataSource,            // 10252
                                    "stage": "DATASOURCE_LOADING_ERROR",                                               // 10253
                                    "details": {                                                                       // 10254
                                        "jqXHR" : jqXHR,                                                               // 10255
                                        "textStatus" : textStatus,                                                     // 10256
                                        "errorThrown" : errorThrown                                                    // 10257
                                    }                                                                                  // 10258
                                });                                                                                    // 10259
                            }                                                                                          // 10260
                        });                                                                                            // 10261
                    } else {                                                                                           // 10262
                        var ds = this.options.dataSource;                                                              // 10263
                        if (_this.options.dsTransformer && Alpaca.isFunction(_this.options.dsTransformer)) {           // 10264
                            ds = _this.options.dsTransformer(ds);                                                      // 10265
                        }                                                                                              // 10266
                        if (ds) {                                                                                      // 10267
                            if (Alpaca.isArray(ds)) {                                                                  // 10268
                                $.each(ds, function(index, value) {                                                    // 10269
                                    _this.selectOptions.push({                                                         // 10270
                                        "value": value,                                                                // 10271
                                        "text": value                                                                  // 10272
                                    });                                                                                // 10273
                                });                                                                                    // 10274
                            }                                                                                          // 10275
                            if (Alpaca.isObject(ds)) {                                                                 // 10276
                                for (var index in ds) {                                                                // 10277
                                    _this.selectOptions.push({                                                         // 10278
                                        "value": index,                                                                // 10279
                                        "text": ds[index]                                                              // 10280
                                    });                                                                                // 10281
                                }                                                                                      // 10282
                            }                                                                                          // 10283
                            _this._renderField(onSuccess);                                                             // 10284
                        }                                                                                              // 10285
                    }                                                                                                  // 10286
                }                                                                                                      // 10287
            } else {                                                                                                   // 10288
                this._renderField(onSuccess);                                                                          // 10289
            }                                                                                                          // 10290
        }                                                                                                              // 10291
    });                                                                                                                // 10292
})(jQuery);                                                                                                            // 10293
(function($){                                                                                                          // 10294
                                                                                                                       // 10295
    var Alpaca = $.alpaca;                                                                                             // 10296
                                                                                                                       // 10297
    Alpaca.Fields.RadioField = Alpaca.Fields.ListField.extend(                                                         // 10298
    /**                                                                                                                // 10299
     * @lends Alpaca.Fields.RadioField.prototype                                                                       // 10300
     */                                                                                                                // 10301
    {                                                                                                                  // 10302
        /**                                                                                                            // 10303
         * @constructs                                                                                                 // 10304
         * @augments Alpaca.Fields.ListField                                                                           // 10305
         *                                                                                                             // 10306
         * @class Radio group control for list type.                                                                   // 10307
         *                                                                                                             // 10308
         * @param {Object} container Field container.                                                                  // 10309
         * @param {Any} data Field data.                                                                               // 10310
         * @param {Object} options Field options.                                                                      // 10311
         * @param {Object} schema Field schema.                                                                        // 10312
         * @param {Object|String} view Field view.                                                                     // 10313
         * @param {Alpaca.Connector} connector Field connector.                                                        // 10314
         * @param {Function} errorCallback Error callback.                                                             // 10315
         */                                                                                                            // 10316
        constructor: function(container, data, options, schema, view, connector, errorCallback) {                      // 10317
            this.base(container, data, options, schema, view, connector, errorCallback);                               // 10318
        },                                                                                                             // 10319
                                                                                                                       // 10320
        /**                                                                                                            // 10321
         * @see Alpaca.Fields.ListField#setup                                                                          // 10322
         */                                                                                                            // 10323
        setup: function(){                                                                                             // 10324
            this.base();                                                                                               // 10325
                                                                                                                       // 10326
            if (this.options.name) {                                                                                   // 10327
				this.name = this.options.name;                                                                                     // 10328
			}                                                                                                                   // 10329
			else if (!this.name) {                                                                                              // 10330
				this.name = this.getId()+"-name";                                                                                  // 10331
			}                                                                                                                   // 10332
                                                                                                                       // 10333
            // empty select first to false by default                                                                  // 10334
            if (Alpaca.isUndefined(this.options.emptySelectFirst))                                                     // 10335
            {                                                                                                          // 10336
                this.options.emptySelectFirst = false;                                                                 // 10337
            }                                                                                                          // 10338
        },                                                                                                             // 10339
                                                                                                                       // 10340
        /**                                                                                                            // 10341
         * @see Alpaca.Field#getValue                                                                                  // 10342
         */                                                                                                            // 10343
        getValue: function(){                                                                                          // 10344
            var val = this.base($('input:radio[name='+this.name+']:checked',this.field).val());                        // 10345
            $.each(this.selectOptions,function() {                                                                     // 10346
                if (String(this['value']) ==  val) {                                                                   // 10347
                    val = this['value'];                                                                               // 10348
                }                                                                                                      // 10349
            });                                                                                                        // 10350
            return val;                                                                                                // 10351
        },                                                                                                             // 10352
                                                                                                                       // 10353
        /**                                                                                                            // 10354
         * @see Alpaca.Field#setValue                                                                                  // 10355
         */                                                                                                            // 10356
        setValue: function(val){                                                                                       // 10357
            if (val != this.getValue()) {                                                                              // 10358
                $.each($('input:radio[name='+this.name+']',this.field),function() {                                    // 10359
                    if ($(this).val() == val) {                                                                        // 10360
                        $(this).attr('checked','checked');                                                             // 10361
                    } else {                                                                                           // 10362
                        $(this).removeAttr('checked');                                                                 // 10363
                    }                                                                                                  // 10364
                });                                                                                                    // 10365
                                                                                                                       // 10366
                if (this.options.emptySelectFirst) {                                                                   // 10367
                    if ($("input:radio:checked",this.field).length === 0) {                                            // 10368
                        $("input:radio:first",this.field).attr("checked","checked");                                   // 10369
                    }                                                                                                  // 10370
                }                                                                                                      // 10371
                                                                                                                       // 10372
                this.base(val);                                                                                        // 10373
            }                                                                                                          // 10374
        },                                                                                                             // 10375
                                                                                                                       // 10376
        /**                                                                                                            // 10377
         * @private                                                                                                    // 10378
         */                                                                                                            // 10379
        _renderField: function(onSuccess){                                                                             // 10380
                                                                                                                       // 10381
            var _this = this;                                                                                          // 10382
                                                                                                                       // 10383
            var controlFieldTemplateDescriptor = this.view.getTemplateDescriptor("controlFieldRadio");                 // 10384
            if (controlFieldTemplateDescriptor) {                                                                      // 10385
                this.field = _this.view.tmpl(controlFieldTemplateDescriptor, {                                         // 10386
                    "id": this.getId(),                                                                                // 10387
                    "options": this.options,                                                                           // 10388
                    "selectOptions": this.selectOptions,                                                               // 10389
                    "required":this.schema.required,                                                                   // 10390
					"name": this.name,                                                                                                // 10391
                    "data": this.data                                                                                  // 10392
                });                                                                                                    // 10393
                                                                                                                       // 10394
                // if emptySelectFirst and nothing currently checked, then pick first item in the value list           // 10395
                // set data and visually select it                                                                     // 10396
                if (this.options.emptySelectFirst && this.selectOptions && this.selectOptions.length > 0) {            // 10397
                                                                                                                       // 10398
                    this.data = this.selectOptions[0].value;                                                           // 10399
                                                                                                                       // 10400
                    if ($("input:radio:checked",this.field).length === 0) {                                            // 10401
                        $("input:radio:first",this.field).attr("checked","checked");                                   // 10402
                    }                                                                                                  // 10403
                }                                                                                                      // 10404
                                                                                                                       // 10405
                // stack radio selectors vertically                                                                    // 10406
                if (this.options.vertical)                                                                             // 10407
                {                                                                                                      // 10408
                    $(".alpaca-controlfield-radio-item", this.field).css("display", "block");                          // 10409
                }                                                                                                      // 10410
                                                                                                                       // 10411
                this.injectField(this.field);                                                                          // 10412
            }                                                                                                          // 10413
                                                                                                                       // 10414
            if (onSuccess) {                                                                                           // 10415
                onSuccess();                                                                                           // 10416
            }                                                                                                          // 10417
        },                                                                                                             // 10418
                                                                                                                       // 10419
        /**                                                                                                            // 10420
         * @see Alpaca.ControlField#postRender                                                                         // 10421
         */                                                                                                            // 10422
        postRender: function(callback) {                                                                               // 10423
                                                                                                                       // 10424
            var self = this;                                                                                           // 10425
                                                                                                                       // 10426
            this.base(function() {                                                                                     // 10427
                                                                                                                       // 10428
                if (self.fieldContainer) {                                                                             // 10429
                    self.fieldContainer.addClass('alpaca-controlfield-radio');                                         // 10430
                }                                                                                                      // 10431
                                                                                                                       // 10432
                callback();                                                                                            // 10433
            });                                                                                                        // 10434
        },                                                                                                             // 10435
                                                                                                                       // 10436
        /**                                                                                                            // 10437
         * @see Alpaca.ControlField#onClick                                                                            // 10438
         */                                                                                                            // 10439
        onClick: function(e){                                                                                          // 10440
            this.base(e);                                                                                              // 10441
                                                                                                                       // 10442
            var _this = this;                                                                                          // 10443
                                                                                                                       // 10444
            Alpaca.later(25, this, function(){                                                                         // 10445
                var v = _this.getValue();                                                                              // 10446
                _this.setValue(v);                                                                                     // 10447
                _this.renderValidationState();                                                                         // 10448
            });                                                                                                        // 10449
        }                                                                                                              // 10450
                                                                                                                       // 10451
    });                                                                                                                // 10452
                                                                                                                       // 10453
    Alpaca.registerTemplate("controlFieldRadio", '<div id="${id}" class="alpaca-controlfield-radio">{{if !required}}<span class="alpaca-controlfield-radio-item"><input type="radio" {{if options.readonly}}readonly="readonly"{{/if}} name="${name}" value=""/><span class="alpaca-controlfield-radio-label">None</span></span>{{/if}}{{each selectOptions}}<span class="alpaca-controlfield-radio-item"><input type="radio" {{if options.readonly}}readonly="readonly"{{/if}} name="${name}" value="${value}" {{if value == data}}checked="checked"{{/if}}/><span class="alpaca-controlfield-radio-label">${text}</span></span>{{/each}}</div>');
    Alpaca.registerFieldClass("radio", Alpaca.Fields.RadioField);                                                      // 10455
                                                                                                                       // 10456
})(jQuery);                                                                                                            // 10457
(function($) {                                                                                                         // 10458
                                                                                                                       // 10459
    var Alpaca = $.alpaca;                                                                                             // 10460
                                                                                                                       // 10461
    Alpaca.Fields.SelectField = Alpaca.Fields.ListField.extend(                                                        // 10462
    /**                                                                                                                // 10463
     * @lends Alpaca.Fields.SelectField.prototype                                                                      // 10464
     */                                                                                                                // 10465
    {                                                                                                                  // 10466
        /**                                                                                                            // 10467
         * @constructs                                                                                                 // 10468
         * @augments Alpaca.Fields.ListField                                                                           // 10469
         *                                                                                                             // 10470
         * @class Dropdown list control for list type.                                                                 // 10471
         *                                                                                                             // 10472
         * @param {Object} container Field container.                                                                  // 10473
         * @param {Any} data Field data.                                                                               // 10474
         * @param {Object} options Field options.                                                                      // 10475
         * @param {Object} schema Field schema.                                                                        // 10476
         * @param {Object|String} view Field view.                                                                     // 10477
         * @param {Alpaca.Connector} connector Field connector.                                                        // 10478
         * @param {Function} errorCallback Error callback.                                                             // 10479
         */                                                                                                            // 10480
        constructor: function(container, data, options, schema, view, connector, errorCallback) {                      // 10481
            this.base(container, data, options, schema, view, connector, errorCallback);                               // 10482
        },                                                                                                             // 10483
                                                                                                                       // 10484
        /**                                                                                                            // 10485
         * @see Alpaca.Fields.ListField#setup                                                                          // 10486
         */                                                                                                            // 10487
        setup: function(){                                                                                             // 10488
            this.base();                                                                                               // 10489
                                                                                                                       // 10490
            // empty select first to false by default                                                                  // 10491
            if (Alpaca.isUndefined(this.options.emptySelectFirst))                                                     // 10492
            {                                                                                                          // 10493
                this.options.emptySelectFirst = false;                                                                 // 10494
            }                                                                                                          // 10495
        },                                                                                                             // 10496
                                                                                                                       // 10497
        /**                                                                                                            // 10498
         * @see Alpaca.Field#getValue                                                                                  // 10499
         */                                                                                                            // 10500
        getValue: function()                                                                                           // 10501
        {                                                                                                              // 10502
            if (this.field) {                                                                                          // 10503
                var val = this.field.val();                                                                            // 10504
                if (!val)                                                                                              // 10505
                {                                                                                                      // 10506
                    val = this.data;                                                                                   // 10507
                }                                                                                                      // 10508
                                                                                                                       // 10509
                return this.base(val);                                                                                 // 10510
            }                                                                                                          // 10511
        },                                                                                                             // 10512
                                                                                                                       // 10513
        /**                                                                                                            // 10514
         * @see Alpaca.Field#setValue                                                                                  // 10515
         */                                                                                                            // 10516
        setValue: function(val) {                                                                                      // 10517
            if (Alpaca.isArray(val)) {                                                                                 // 10518
                if (!Alpaca.compareArrayContent(val, this.getValue())) {                                               // 10519
                    if (!Alpaca.isEmpty(val) && this.field) {                                                          // 10520
                        this.field.val(val);                                                                           // 10521
                    }                                                                                                  // 10522
                    this.base(val);                                                                                    // 10523
                }                                                                                                      // 10524
            } else {                                                                                                   // 10525
                if (val != this.getValue()) {                                                                          // 10526
                    if (!Alpaca.isEmpty(val) && this.field) {                                                          // 10527
                        this.field.val(val);                                                                           // 10528
                    }                                                                                                  // 10529
                    this.base(val);                                                                                    // 10530
                }                                                                                                      // 10531
            }                                                                                                          // 10532
        },                                                                                                             // 10533
                                                                                                                       // 10534
        /**                                                                                                            // 10535
         * @see Alpaca.ListField#getEnum                                                                               // 10536
         */                                                                                                            // 10537
        getEnum: function() {                                                                                          // 10538
            if (this.schema) {                                                                                         // 10539
                if (this.schema["enum"]) {                                                                             // 10540
                    return this.schema["enum"];                                                                        // 10541
                } else if (this.schema["type"] && this.schema["type"] == "array" && this.schema["items"] && this.schema["items"]["enum"]) {
                    return this.schema["items"]["enum"];                                                               // 10543
                }                                                                                                      // 10544
            }                                                                                                          // 10545
        },                                                                                                             // 10546
                                                                                                                       // 10547
        /**                                                                                                            // 10548
         * @private                                                                                                    // 10549
         */                                                                                                            // 10550
        _renderField: function(onSuccess) {                                                                            // 10551
                                                                                                                       // 10552
            var _this = this;                                                                                          // 10553
                                                                                                                       // 10554
            if (this.schema["type"] && this.schema["type"] == "array") {                                               // 10555
                this.options.multiple = true;                                                                          // 10556
            }                                                                                                          // 10557
                                                                                                                       // 10558
            var controlFieldTemplateDescriptor;                                                                        // 10559
            if (this.options.multiple && Alpaca.isArray(this.data)) {                                                  // 10560
                controlFieldTemplateDescriptor = this.view.getTemplateDescriptor("controlFieldSelectMultiple");        // 10561
            } else {                                                                                                   // 10562
                controlFieldTemplateDescriptor = this.view.getTemplateDescriptor("controlFieldSelect");                // 10563
            }                                                                                                          // 10564
                                                                                                                       // 10565
            if (controlFieldTemplateDescriptor) {                                                                      // 10566
                this.field = _this.view.tmpl(controlFieldTemplateDescriptor, {                                         // 10567
                    "id": this.getId(),                                                                                // 10568
                    "options": this.options,                                                                           // 10569
                    "required": this.schema.required,                                                                  // 10570
                    "selectOptions": this.selectOptions,                                                               // 10571
                    "name": this.name,                                                                                 // 10572
                    "data": this.data                                                                                  // 10573
                });                                                                                                    // 10574
                                                                                                                       // 10575
                // if emptySelectFirst and nothing currently checked, then pick first item in the value list           // 10576
                // set data and visually select it                                                                     // 10577
                if (Alpaca.isUndefined(this.data) && this.options.emptySelectFirst && this.selectOptions && this.selectOptions.length > 0) {
                                                                                                                       // 10579
                    this.data = this.selectOptions[0].value;                                                           // 10580
                                                                                                                       // 10581
                    //$("select",this.field).val("0");                                                                 // 10582
                }                                                                                                      // 10583
                                                                                                                       // 10584
                this.injectField(this.field);                                                                          // 10585
                                                                                                                       // 10586
                // do this little trick so that if we have a default value, it gets set during first render            // 10587
                // this causes the state of the control                                                                // 10588
                if (this.data) {                                                                                       // 10589
                    this.setValue(this.data);                                                                          // 10590
                }                                                                                                      // 10591
            }                                                                                                          // 10592
                                                                                                                       // 10593
            if (onSuccess) {                                                                                           // 10594
                onSuccess();                                                                                           // 10595
            }                                                                                                          // 10596
        },                                                                                                             // 10597
                                                                                                                       // 10598
        /**                                                                                                            // 10599
         * @see Alpaca.ControlField#postRender                                                                         // 10600
         */                                                                                                            // 10601
        postRender: function(callback) {                                                                               // 10602
                                                                                                                       // 10603
            var self = this;                                                                                           // 10604
                                                                                                                       // 10605
            this.base(function() {                                                                                     // 10606
                                                                                                                       // 10607
                if (self.fieldContainer) {                                                                             // 10608
                    self.fieldContainer.addClass('alpaca-controlfield-select');                                        // 10609
                }                                                                                                      // 10610
                                                                                                                       // 10611
                callback();                                                                                            // 10612
            })                                                                                                         // 10613
        },                                                                                                             // 10614
                                                                                                                       // 10615
        /**                                                                                                            // 10616
         * Validate against enum property.                                                                             // 10617
         *                                                                                                             // 10618
         * @returns {Boolean} True if the element value is part of the enum list, false otherwise.                     // 10619
         */                                                                                                            // 10620
        _validateEnum: function() {                                                                                    // 10621
            if (this.schema["enum"]) {                                                                                 // 10622
                var val = this.data;                                                                                   // 10623
                if (!this.schema.required && Alpaca.isValEmpty(val)) {                                                 // 10624
                    return true;                                                                                       // 10625
                }                                                                                                      // 10626
                if (this.options.multiple) {                                                                           // 10627
                    var isValid = true;                                                                                // 10628
                    var _this = this;                                                                                  // 10629
                    $.each(val, function(i,v) {                                                                        // 10630
                        if ($.inArray(v, _this.schema["enum"]) <= -1) {                                                // 10631
                            isValid = false;                                                                           // 10632
                            return false;                                                                              // 10633
                        }                                                                                              // 10634
                    });                                                                                                // 10635
                    return isValid;                                                                                    // 10636
                } else {                                                                                               // 10637
                    return ($.inArray(val, this.schema["enum"]) > -1);                                                 // 10638
                }                                                                                                      // 10639
            } else {                                                                                                   // 10640
                return true;                                                                                           // 10641
            }                                                                                                          // 10642
        },                                                                                                             // 10643
                                                                                                                       // 10644
        /**                                                                                                            // 10645
         * @see Alpaca.Field#onChange                                                                                  // 10646
         */                                                                                                            // 10647
        onChange: function(e) {                                                                                        // 10648
            this.base(e);                                                                                              // 10649
                                                                                                                       // 10650
            var _this = this;                                                                                          // 10651
                                                                                                                       // 10652
            Alpaca.later(25, this, function() {                                                                        // 10653
                var v = _this.getValue();                                                                              // 10654
                _this.setValue(v);                                                                                     // 10655
                _this.renderValidationState();                                                                         // 10656
            });                                                                                                        // 10657
        },                                                                                                             // 10658
                                                                                                                       // 10659
        /**                                                                                                            // 10660
         * Validates if number of items has been less than minItems.                                                   // 10661
         * @returns {Boolean} true if number of items has been less than minItems                                      // 10662
         */                                                                                                            // 10663
        _validateMinItems: function() {                                                                                // 10664
            if (this.schema.items && this.schema.items.minItems) {                                                     // 10665
                if ($(":selected",this.field).length < this.schema.items.minItems) {                                   // 10666
                    return false;                                                                                      // 10667
                }                                                                                                      // 10668
            }                                                                                                          // 10669
            return true;                                                                                               // 10670
        },                                                                                                             // 10671
                                                                                                                       // 10672
        /**                                                                                                            // 10673
         * Validates if number of items has been over maxItems.                                                        // 10674
         * @returns {Boolean} true if number of items has been over maxItems                                           // 10675
         */                                                                                                            // 10676
        _validateMaxItems: function() {                                                                                // 10677
            if (this.schema.items && this.schema.items.maxItems) {                                                     // 10678
                if ($(":selected",this.field).length > this.schema.items.maxItems) {                                   // 10679
                    return false;                                                                                      // 10680
                }                                                                                                      // 10681
            }                                                                                                          // 10682
            return true;                                                                                               // 10683
        },                                                                                                             // 10684
                                                                                                                       // 10685
        /**                                                                                                            // 10686
         * @see Alpaca.ContainerField#handleValidate                                                                   // 10687
         */                                                                                                            // 10688
        handleValidate: function() {                                                                                   // 10689
            var baseStatus = this.base();                                                                              // 10690
                                                                                                                       // 10691
            var valInfo = this.validation;                                                                             // 10692
                                                                                                                       // 10693
            var status = this._validateMaxItems();                                                                     // 10694
            valInfo["tooManyItems"] = {                                                                                // 10695
                "message": status ? "" : Alpaca.substituteTokens(this.view.getMessage("tooManyItems"), [this.schema.items.maxItems]),
                "status": status                                                                                       // 10697
            };                                                                                                         // 10698
                                                                                                                       // 10699
            status = this._validateMinItems();                                                                         // 10700
            valInfo["notEnoughItems"] = {                                                                              // 10701
                "message": status ? "" : Alpaca.substituteTokens(this.view.getMessage("notEnoughItems"), [this.schema.items.minItems]),
                "status": status                                                                                       // 10703
            };                                                                                                         // 10704
                                                                                                                       // 10705
            return baseStatus && valInfo["tooManyItems"]["status"] && valInfo["notEnoughItems"]["status"];             // 10706
        }                                                                                                              // 10707
                                                                                                                       // 10708
    });                                                                                                                // 10709
                                                                                                                       // 10710
    Alpaca.registerTemplate("controlFieldSelect", '<select id="${id}" {{if options.readonly}}readonly="readonly"{{/if}} {{if options.multiple}}multiple{{/if}} {{if options.size}}size="${options.size}"{{/if}} {{if name}}name="${name}"{{/if}}>{{if !required}}<option value="">None</option>{{/if}}{{each(i,value) selectOptions}}<option value="${value}" {{if value == data}}selected="selected"{{/if}}>${text}</option>{{/each}}</select>');
    Alpaca.registerTemplate("controlFieldSelectMultiple", '<select id="${id}" {{if options.readonly}}readonly="readonly"{{/if}} {{if options.multiple}}multiple="multiple"{{/if}} {{if options.size}}size="${options.size}"{{/if}} {{if name}}name="${name}"{{/if}}>{{if !required}}<option value="">None</option>{{/if}}{{each(i,value) selectOptions}}<option value="${value}" {{each(j,val) data}}{{if value == val}}selected="selected"{{/if}}{{/each}}>${text}</option>{{/each}}</select>');
    Alpaca.registerFieldClass("select", Alpaca.Fields.SelectField);                                                    // 10713
                                                                                                                       // 10714
})(jQuery);                                                                                                            // 10715
(function($) {                                                                                                         // 10716
                                                                                                                       // 10717
    var Alpaca = $.alpaca;                                                                                             // 10718
                                                                                                                       // 10719
    Alpaca.Fields.NumberField = Alpaca.Fields.TextField.extend(                                                        // 10720
    /**                                                                                                                // 10721
     * @lends Alpaca.Fields.NumberField.prototype                                                                      // 10722
     */                                                                                                                // 10723
    {                                                                                                                  // 10724
        /**                                                                                                            // 10725
         * @constructs                                                                                                 // 10726
         * @augments Alpaca.Fields.TextField                                                                           // 10727
         *                                                                                                             // 10728
         * @class Control for JSON schema number type.                                                                 // 10729
         *                                                                                                             // 10730
         * @param {Object} container Field container.                                                                  // 10731
         * @param {Any} data Field data.                                                                               // 10732
         * @param {Object} options Field options.                                                                      // 10733
         * @param {Object} schema Field schema.                                                                        // 10734
         * @param {Object|String} view Field view.                                                                     // 10735
         * @param {Alpaca.Connector} connector Field connector.                                                        // 10736
         * @param {Function} errorCallback Error callback.                                                             // 10737
         */                                                                                                            // 10738
        constructor: function(container, data, options, schema, view, connector, errorCallback) {                      // 10739
            this.base(container, data, options, schema, view, connector, errorCallback);                               // 10740
        },                                                                                                             // 10741
                                                                                                                       // 10742
        /**                                                                                                            // 10743
         * @see Alpaca.Fields.TextField#getValue                                                                       // 10744
         */                                                                                                            // 10745
        getValue: function() {                                                                                         // 10746
            var textValue = this.field.val();                                                                          // 10747
            if (Alpaca.isValEmpty(textValue)) {                                                                        // 10748
                return -1;                                                                                             // 10749
            } else {                                                                                                   // 10750
                return parseFloat(textValue);                                                                          // 10751
            }                                                                                                          // 10752
        },                                                                                                             // 10753
                                                                                                                       // 10754
        /**                                                                                                            // 10755
         * @see Alpaca.Fields.TextField#postRender                                                                     // 10756
         */                                                                                                            // 10757
        postRender: function(callback) {                                                                               // 10758
                                                                                                                       // 10759
            var self = this;                                                                                           // 10760
                                                                                                                       // 10761
            this.base(function() {                                                                                     // 10762
                                                                                                                       // 10763
                if (self.fieldContainer) {                                                                             // 10764
                    self.fieldContainer.addClass('alpaca-controlfield-number');                                        // 10765
                }                                                                                                      // 10766
                                                                                                                       // 10767
                callback();                                                                                            // 10768
            });                                                                                                        // 10769
        },                                                                                                             // 10770
				                                                                                                                   // 10771
        /**                                                                                                            // 10772
         * @see Alpaca.Fields.TextField#handleValidate                                                                 // 10773
         */                                                                                                            // 10774
        handleValidate: function() {                                                                                   // 10775
            var baseStatus = this.base();                                                                              // 10776
                                                                                                                       // 10777
            var valInfo = this.validation;                                                                             // 10778
			                                                                                                                    // 10779
			var status = this._validateNumber();                                                                                // 10780
            valInfo["stringNotANumber"] = {                                                                            // 10781
                "message": status ? "" : this.view.getMessage("stringNotANumber"),                                     // 10782
                "status": status                                                                                       // 10783
            };                                                                                                         // 10784
                                                                                                                       // 10785
            status = this._validateDivisibleBy();                                                                      // 10786
			valInfo["stringDivisibleBy"] = {                                                                                    // 10787
                "message": status ? "" : Alpaca.substituteTokens(this.view.getMessage("stringDivisibleBy"), [this.schema.divisibleBy]),
                "status": status                                                                                       // 10789
            };                                                                                                         // 10790
                                                                                                                       // 10791
            status = this._validateMaximum();                                                                          // 10792
			valInfo["stringValueTooLarge"] = {                                                                                  // 10793
                "message": "",                                                                                         // 10794
                "status": status                                                                                       // 10795
            };                                                                                                         // 10796
            if (!status) {                                                                                             // 10797
                if (this.schema.exclusiveMaximum) {                                                                    // 10798
                    valInfo["stringValueTooLarge"]["message"] = Alpaca.substituteTokens(this.view.getMessage("stringValueTooLargeExclusive"), [this.schema.maximum]);
                } else {                                                                                               // 10800
                    valInfo["stringValueTooLarge"]["message"] = Alpaca.substituteTokens(this.view.getMessage("stringValueTooLarge"), [this.schema.maximum]);
                }                                                                                                      // 10802
            }                                                                                                          // 10803
			                                                                                                                    // 10804
			status = this._validateMinimum();                                                                                   // 10805
            valInfo["stringValueTooSmall"] = {                                                                         // 10806
                "message": "",                                                                                         // 10807
                "status": status                                                                                       // 10808
            };                                                                                                         // 10809
            if (!status) {                                                                                             // 10810
                if (this.schema.exclusiveMinimum) {                                                                    // 10811
                    valInfo["stringValueTooSmall"]["message"] = Alpaca.substituteTokens(this.view.getMessage("stringValueTooSmallExclusive"), [this.schema.minimum]);
                } else {                                                                                               // 10813
                    valInfo["stringValueTooSmall"]["message"] = Alpaca.substituteTokens(this.view.getMessage("stringValueTooSmall"), [this.schema.minimum]);
                }                                                                                                      // 10815
            }                                                                                                          // 10816
            return baseStatus && valInfo["stringNotANumber"]["status"] && valInfo["stringDivisibleBy"]["status"] && valInfo["stringValueTooLarge"]["status"] && valInfo["stringValueTooSmall"]["status"];
        },                                                                                                             // 10818
                                                                                                                       // 10819
        /**                                                                                                            // 10820
         * Validates if it is a float number.                                                                          // 10821
         * @returns {Boolean} true if it is a float number                                                             // 10822
         */                                                                                                            // 10823
        _validateNumber: function() {                                                                                  // 10824
            var textValue = this.field.val();                                                                          // 10825
            // allow null                                                                                              // 10826
            if (Alpaca.isValEmpty(textValue)) {                                                                        // 10827
                return true;                                                                                           // 10828
            }                                                                                                          // 10829
            var floatValue = this.getValue();                                                                          // 10830
                                                                                                                       // 10831
            // quick check to see if what they entered was a number                                                    // 10832
            if (isNaN(floatValue)) {                                                                                   // 10833
                return false;                                                                                          // 10834
            }                                                                                                          // 10835
                                                                                                                       // 10836
            // check if valid number format                                                                            // 10837
            if (!textValue.match(Alpaca.regexps.number)) {                                                             // 10838
                return false;                                                                                          // 10839
            }                                                                                                          // 10840
                                                                                                                       // 10841
            return true;                                                                                               // 10842
        },                                                                                                             // 10843
                                                                                                                       // 10844
        /**                                                                                                            // 10845
         * Validates divisibleBy constraint.                                                                           // 10846
         * @returns {Boolean} true if it passes the divisibleBy constraint.                                            // 10847
         */                                                                                                            // 10848
        _validateDivisibleBy: function() {                                                                             // 10849
            var floatValue = this.getValue();                                                                          // 10850
            if (!Alpaca.isEmpty(this.schema.divisibleBy)) {                                                            // 10851
                                                                                                                       // 10852
                // mod                                                                                                 // 10853
                if (floatValue % this.schema.divisibleBy !== 0)                                                        // 10854
                {                                                                                                      // 10855
                    return false;                                                                                      // 10856
                }                                                                                                      // 10857
            }                                                                                                          // 10858
            return true;                                                                                               // 10859
        },                                                                                                             // 10860
                                                                                                                       // 10861
        /**                                                                                                            // 10862
         * Validates maximum constraint.                                                                               // 10863
         * @returns {Boolean} true if it passes the maximum constraint.                                                // 10864
         */                                                                                                            // 10865
        _validateMaximum: function() {                                                                                 // 10866
            var floatValue = this.getValue();                                                                          // 10867
                                                                                                                       // 10868
            if (!Alpaca.isEmpty(this.schema.maximum)) {                                                                // 10869
                if (floatValue > this.schema.maximum) {                                                                // 10870
                    return false;                                                                                      // 10871
                }                                                                                                      // 10872
                                                                                                                       // 10873
                if (!Alpaca.isEmpty(this.schema.exclusiveMaximum)) {                                                   // 10874
                    if (floatValue == this.schema.maximum && this.schema.exclusiveMaximum) {                           // 10875
                        return false;                                                                                  // 10876
                    }                                                                                                  // 10877
                }                                                                                                      // 10878
            }                                                                                                          // 10879
                                                                                                                       // 10880
            return true;                                                                                               // 10881
        },                                                                                                             // 10882
                                                                                                                       // 10883
        /**                                                                                                            // 10884
         * Validates maximum constraint.                                                                               // 10885
         * @returns {Boolean} true if it passes the minimum constraint.                                                // 10886
         */                                                                                                            // 10887
        _validateMinimum: function() {                                                                                 // 10888
            var floatValue = this.getValue();                                                                          // 10889
                                                                                                                       // 10890
            if (!Alpaca.isEmpty(this.schema.minimum)) {                                                                // 10891
                if (floatValue < this.schema.minimum) {                                                                // 10892
                    return false;                                                                                      // 10893
                }                                                                                                      // 10894
                                                                                                                       // 10895
                if (!Alpaca.isEmpty(this.schema.exclusiveMinimum)) {                                                   // 10896
                    if (floatValue == this.schema.minimum && this.schema.exclusiveMinimum) {                           // 10897
                        return false;                                                                                  // 10898
                    }                                                                                                  // 10899
                }                                                                                                      // 10900
            }                                                                                                          // 10901
                                                                                                                       // 10902
            return true;                                                                                               // 10903
        }                                                                                                              // 10904
    });                                                                                                                // 10905
                                                                                                                       // 10906
    // Additional Registrations                                                                                        // 10907
    Alpaca.registerMessages({                                                                                          // 10908
        "stringValueTooSmall": "The minimum value for this field is {0}",                                              // 10909
        "stringValueTooLarge": "The maximum value for this field is {0}",                                              // 10910
        "stringValueTooSmallExclusive": "Value of this field must be greater than {0}",                                // 10911
        "stringValueTooLargeExclusive": "Value of this field must be less than {0}",                                   // 10912
        "stringDivisibleBy": "The value must be divisible by {0}",                                                     // 10913
        "stringNotANumber": "This value is not a number."                                                              // 10914
    });                                                                                                                // 10915
    Alpaca.registerFieldClass("number", Alpaca.Fields.NumberField);                                                    // 10916
    Alpaca.registerDefaultSchemaFieldMapping("number", "number");                                                      // 10917
})(jQuery);                                                                                                            // 10918
/*jshint -W083 */ // inline functions are used safely                                                                  // 10919
(function($) {                                                                                                         // 10920
                                                                                                                       // 10921
    var Alpaca = $.alpaca;                                                                                             // 10922
                                                                                                                       // 10923
    Alpaca.Fields.ArrayField = Alpaca.ContainerField.extend(                                                           // 10924
    /**                                                                                                                // 10925
     * @lends Alpaca.Fields.ArrayField.prototype                                                                       // 10926
     */                                                                                                                // 10927
    {                                                                                                                  // 10928
        /**                                                                                                            // 10929
         * @constructs                                                                                                 // 10930
         * @augments Alpaca.ContainerField                                                                             // 10931
         *                                                                                                             // 10932
         * @class Default control for the treatment of a JSON array.                                                   // 10933
         *                                                                                                             // 10934
         * @param {Object} container Field container.                                                                  // 10935
         * @param {Any} data Field data.                                                                               // 10936
         * @param {Object} options Field options.                                                                      // 10937
         * @param {Object} schema Field schema.                                                                        // 10938
         * @param {Object|String} view Field view.                                                                     // 10939
         * @param {Alpaca.Connector} connector Field connector.                                                        // 10940
         * @param {Function} errorCallback Error callback.                                                             // 10941
         */                                                                                                            // 10942
        constructor: function(container, data, options, schema, view, connector, errorCallback) {                      // 10943
            this.base(container, data, options, schema, view, connector, errorCallback);                               // 10944
        },                                                                                                             // 10945
                                                                                                                       // 10946
        /**                                                                                                            // 10947
         * @see Alpaca.ContainerField#setup                                                                            // 10948
         */                                                                                                            // 10949
        setup: function() {                                                                                            // 10950
            this.base();                                                                                               // 10951
                                                                                                                       // 10952
            this.options.toolbarStyle = Alpaca.isEmpty(this.view.toolbarStyle) ? "button" : this.view.toolbarStyle;    // 10953
                                                                                                                       // 10954
            if (!this.options.items) {                                                                                 // 10955
                this.options.items = {};                                                                               // 10956
            }                                                                                                          // 10957
                                                                                                                       // 10958
            var toolbarSticky = false;                                                                                 // 10959
                                                                                                                       // 10960
            if (!Alpaca.isEmpty(this.view.toolbarSticky)) {                                                            // 10961
                toolbarSticky = this.view.toolbarSticky;                                                               // 10962
            }                                                                                                          // 10963
                                                                                                                       // 10964
            if (!Alpaca.isEmpty(this.options.toolbarSticky)) {                                                         // 10965
                toolbarSticky = this.options.toolbarSticky;                                                            // 10966
            }                                                                                                          // 10967
                                                                                                                       // 10968
            if (Alpaca.isEmpty(this.options.items.showMoveUpItemButton)) {                                             // 10969
                this.options.items.showMoveUpItemButton = true;                                                        // 10970
            }                                                                                                          // 10971
                                                                                                                       // 10972
            if (Alpaca.isEmpty(this.options.items.showMoveDownItemButton)) {                                           // 10973
                this.options.items.showMoveDownItemButton = true;                                                      // 10974
            }                                                                                                          // 10975
                                                                                                                       // 10976
            this.options.toolbarSticky = toolbarSticky;                                                                // 10977
                                                                                                                       // 10978
            // Enable forceRevalidation option so that any change in children will trigger parent's revalidation.      // 10979
            if (this.schema.items && this.schema.uniqueItems) {                                                        // 10980
                Alpaca.mergeObject(this.options, {                                                                     // 10981
                    "forceRevalidation" : true                                                                         // 10982
                });                                                                                                    // 10983
            }                                                                                                          // 10984
                                                                                                                       // 10985
            if (Alpaca.isEmpty(this.data)) {                                                                           // 10986
                return;                                                                                                // 10987
            }                                                                                                          // 10988
            if (!Alpaca.isArray(this.data)) {                                                                          // 10989
                if (!Alpaca.isString(this.data)) {                                                                     // 10990
                    return;                                                                                            // 10991
                } else {                                                                                               // 10992
                    try {                                                                                              // 10993
                        this.data = Alpaca.parseJSON(this.data);                                                       // 10994
                        if (!Alpaca.isArray(this.data)) {                                                              // 10995
                            Alpaca.logWarn("ArrayField parsed data but it was not an array: " + JSON.stringify(this.data));
                            return;                                                                                    // 10997
                        }                                                                                              // 10998
                    } catch (e) {                                                                                      // 10999
                        this.data = [this.data];                                                                       // 11000
                    }                                                                                                  // 11001
                }                                                                                                      // 11002
            }                                                                                                          // 11003
        },                                                                                                             // 11004
                                                                                                                       // 11005
        /**                                                                                                            // 11006
         * Picks apart the array and set onto child fields.                                                            // 11007
         * @see Alpaca.ContainerField#setup                                                                            // 11008
         */                                                                                                            // 11009
        setValue: function(data) {                                                                                     // 11010
                                                                                                                       // 11011
            var _this = this;                                                                                          // 11012
                                                                                                                       // 11013
            if (!data || !Alpaca.isArray(data)) {                                                                      // 11014
                return;                                                                                                // 11015
            }                                                                                                          // 11016
                                                                                                                       // 11017
            // set fields                                                                                              // 11018
            for (var i = 0; i < this.children.length; i++) {                                                           // 11019
                var childField = this.children[i];                                                                     // 11020
                if (data.length > i) {                                                                                 // 11021
                    childField.setValue(data[i]);                                                                      // 11022
                } else {                                                                                               // 11023
                    this.removeItem(childField.id); //remove child items if there are more children than in data       // 11024
                }                                                                                                      // 11025
            }                                                                                                          // 11026
                                                                                                                       // 11027
            _this.resolveItemSchemaOptions(function(schema, options) {                                                 // 11028
                                                                                                                       // 11029
                // if the number of items in the data is greater than the number of existing child elements            // 11030
                while(i < data.length) {                                                                               // 11031
                    _this.addItem(i, schema, options, data[i]);                                                        // 11032
                    i++;                                                                                               // 11033
                };                                                                                                     // 11034
                                                                                                                       // 11035
            });                                                                                                        // 11036
                                                                                                                       // 11037
        },                                                                                                             // 11038
                                                                                                                       // 11039
        /**                                                                                                            // 11040
         * @see Alpaca.ContainerField#getValue                                                                         // 11041
         */                                                                                                            // 11042
        getValue: function() {                                                                                         // 11043
                                                                                                                       // 11044
            // if we're empty and we're also not required, then we hand back undefined                                 // 11045
            if (this.children.length === 0 && !this.schema.required)                                                   // 11046
            {                                                                                                          // 11047
                return;                                                                                                // 11048
            }                                                                                                          // 11049
                                                                                                                       // 11050
            // otherwise, construct an array and had it back                                                           // 11051
            var o = [];                                                                                                // 11052
            for (var i = 0; i < this.children.length; i++)                                                             // 11053
            {                                                                                                          // 11054
                var v = this.children[i].getValue();                                                                   // 11055
                                                                                                                       // 11056
                if (typeof(v) !== "undefined")                                                                         // 11057
                {                                                                                                      // 11058
                    o.push(v);                                                                                         // 11059
                }                                                                                                      // 11060
            }                                                                                                          // 11061
            return o;                                                                                                  // 11062
        },                                                                                                             // 11063
                                                                                                                       // 11064
        /**                                                                                                            // 11065
         * Returns number of children.                                                                                 // 11066
         */                                                                                                            // 11067
        getSize: function() {                                                                                          // 11068
            return this.children.length;                                                                               // 11069
        },                                                                                                             // 11070
                                                                                                                       // 11071
        /**                                                                                                            // 11072
         * Recursive function for Update child field path and name.                                                    // 11073
         */                                                                                                            // 11074
        updateChildrenPathAndName: function(parent) {                                                                  // 11075
            var _this = this;                                                                                          // 11076
            if (parent.children) {                                                                                     // 11077
                $.each(parent.children, function(i, v) {                                                               // 11078
                    if (parent.prePath && Alpaca.startsWith(v.path,parent.prePath)) {                                  // 11079
                        v.prePath = v.path;                                                                            // 11080
                        v.path = v.path.replace(parent.prePath,parent.path);                                           // 11081
                    }                                                                                                  // 11082
                    // re-calculate name                                                                               // 11083
                    if (parent.preName && Alpaca.startsWith(v.name, parent.preName)) {                                 // 11084
                        v.preName = v.name;                                                                            // 11085
                        v.name = v.name.replace(parent.preName, parent.name);                                          // 11086
                        if (v.field) {                                                                                 // 11087
                            $(v.field).attr('name', v.name);                                                           // 11088
                        }                                                                                              // 11089
                    }                                                                                                  // 11090
                    _this.updateChildrenPathAndName(v);                                                                // 11091
                });                                                                                                    // 11092
            }                                                                                                          // 11093
        },                                                                                                             // 11094
                                                                                                                       // 11095
        /**                                                                                                            // 11096
         * Update field path and name when an array item is removed, inserted or switched.                             // 11097
         */                                                                                                            // 11098
        updatePathAndName: function() {                                                                                // 11099
            var _this = this;                                                                                          // 11100
            if (this.children) {                                                                                       // 11101
                $.each(this.children,function(i,v) {                                                                   // 11102
                    var idx = v.path.lastIndexOf('/');                                                                 // 11103
                    var lastSegment = v.path.substring(idx+1);                                                         // 11104
                    if (lastSegment.indexOf("[") != -1 && lastSegment.indexOf("]") != -1) {                            // 11105
                        lastSegment = lastSegment.substring(lastSegment.indexOf("[") + 1, lastSegment.indexOf("]"));   // 11106
                    }                                                                                                  // 11107
                    if (lastSegment != i) {                                                                            // 11108
                        v.prePath = v.path;                                                                            // 11109
                        v.path = v.path.substring(0, idx) + "/[" + i + "]";                                            // 11110
                                                                                                                       // 11111
                    }                                                                                                  // 11112
                    // re-calculate name                                                                               // 11113
                    if (v.nameCalculated) {                                                                            // 11114
                        v.preName = v.name;                                                                            // 11115
                        if (v.parent && v.parent.name && v.path) {                                                     // 11116
                            v.name = v.parent.name + "_" + i;                                                          // 11117
                        } else {                                                                                       // 11118
                            if (v.path) {                                                                              // 11119
                                v.name = v.path.replace(/\//g, "").replace(/\[/g, "_").replace(/\]/g, "");             // 11120
                            }                                                                                          // 11121
                        }                                                                                              // 11122
                        $(v.field).attr('name', v.name);                                                               // 11123
                    }                                                                                                  // 11124
                    if (!v.prePath) {                                                                                  // 11125
                        v.prePath = v.path;                                                                            // 11126
                    }                                                                                                  // 11127
                    _this.updateChildrenPathAndName(v);                                                                // 11128
                });                                                                                                    // 11129
            }                                                                                                          // 11130
        },                                                                                                             // 11131
                                                                                                                       // 11132
        /**                                                                                                            // 11133
         * Moves child up or down                                                                                      // 11134
         * @param {String} fromId Id of the child to be moved.                                                         // 11135
         * @param {Boolean} isUp true if the moving is upwards                                                         // 11136
         */                                                                                                            // 11137
        moveItem: function(fromId, isUp) {                                                                             // 11138
            var _this = this;                                                                                          // 11139
            if (this.childrenById[fromId]) {                                                                           // 11140
                // do the loop                                                                                         // 11141
                $.each(this.children, function(index, val) {                                                           // 11142
                    if (val.getId() == fromId) {                                                                       // 11143
                        var toIndex;                                                                                   // 11144
                        if (isUp === true) {                                                                           // 11145
                            toIndex = index - 1;                                                                       // 11146
                            if (toIndex < 0) {                                                                         // 11147
                                toIndex = _this.children.length - 1;                                                   // 11148
                            }                                                                                          // 11149
                        } else {                                                                                       // 11150
                            toIndex = index + 1;                                                                       // 11151
                            if (toIndex >= _this.children.length) {                                                    // 11152
                                toIndex = 0;                                                                           // 11153
                            }                                                                                          // 11154
                        }                                                                                              // 11155
                        if (_this.children[toIndex]) {                                                                 // 11156
                            var toId = _this.children[toIndex].getId();                                                // 11157
                            var fromContainer = $('#' + fromId + '-item-container');                                   // 11158
                            var toContainer = $('#' + toId + '-item-container');                                       // 11159
                            _this.reRenderItem(_this.children[index], toContainer);                                    // 11160
                            _this.reRenderItem(_this.children[toIndex], fromContainer);                                // 11161
                            var tmp = _this.children[index];                                                           // 11162
                            _this.children[index] = _this.children[toIndex];                                           // 11163
                            _this.children[toIndex] = tmp;                                                             // 11164
                            _this.updatePathAndName();                                                                 // 11165
                            return false;                                                                              // 11166
                        }                                                                                              // 11167
                    }                                                                                                  // 11168
                });                                                                                                    // 11169
            }                                                                                                          // 11170
        },                                                                                                             // 11171
                                                                                                                       // 11172
        /**                                                                                                            // 11173
         * Removes child                                                                                               // 11174
         * @param {String} id Id of the child to be removed                                                            // 11175
         */                                                                                                            // 11176
        removeItem: function(id) {                                                                                     // 11177
            if (this._validateEqualMinItems()) {                                                                       // 11178
                this.children = $.grep(this.children, function(val, index) {                                           // 11179
                    return (val.getId() != id);                                                                        // 11180
                });                                                                                                    // 11181
                delete this.childrenById[id];                                                                          // 11182
                $('#' + id + "-item-container", this.outerEl).remove();                                                // 11183
                this.renderValidationState();                                                                          // 11184
                this.updateToolbarItemsStatus();                                                                       // 11185
                this.updatePathAndName();                                                                              // 11186
                                                                                                                       // 11187
                // trigger update handler                                                                              // 11188
                this.triggerUpdate();                                                                                  // 11189
            }                                                                                                          // 11190
        },                                                                                                             // 11191
                                                                                                                       // 11192
        /**                                                                                                            // 11193
         * Updates status of toolbar items.                                                                            // 11194
         */                                                                                                            // 11195
        updateToolbarItemsStatus: function() {                                                                         // 11196
            var _this = this;                                                                                          // 11197
            // add actions to toolbar buttons                                                                          // 11198
            if (_this._validateEqualMaxItems()) {                                                                      // 11199
                $('.alpaca-fieldset-array-item-toolbar-add', this.outerEl).each(function(index) {                      // 11200
                    $(this).removeClass('alpaca-fieldset-array-item-toolbar-disabled');                                // 11201
                });                                                                                                    // 11202
            } else {                                                                                                   // 11203
                $('.alpaca-fieldset-array-item-toolbar-add', this.outerEl).each(function(index) {                      // 11204
                    $(this).addClass('alpaca-fieldset-array-item-toolbar-disabled');                                   // 11205
                });                                                                                                    // 11206
            }                                                                                                          // 11207
            if (_this._validateEqualMinItems()) {                                                                      // 11208
                $('.alpaca-fieldset-array-item-toolbar-remove', this.outerEl).each(function(index) {                   // 11209
                    $(this).removeClass('alpaca-fieldset-array-item-toolbar-disabled');                                // 11210
                });                                                                                                    // 11211
            } else {                                                                                                   // 11212
                $('.alpaca-fieldset-array-item-toolbar-remove', this.outerEl).each(function(index) {                   // 11213
                    $(this).addClass('alpaca-fieldset-array-item-toolbar-disabled');                                   // 11214
                });                                                                                                    // 11215
            }                                                                                                          // 11216
            if (this.getSize() === 0) {                                                                                // 11217
                this.renderArrayToolbar(this.outerEl);                                                                 // 11218
            } else {                                                                                                   // 11219
                if (this.arrayToolbar) {                                                                               // 11220
                    this.arrayToolbar.remove();                                                                        // 11221
                }                                                                                                      // 11222
            }                                                                                                          // 11223
            // update counter                                                                                          // 11224
            $('.alpaca-item-label-counter', this.outerEl).each(function(index) {                                       // 11225
                $(this).html(index + 1);                                                                               // 11226
            });                                                                                                        // 11227
        },                                                                                                             // 11228
                                                                                                                       // 11229
        /**                                                                                                            // 11230
         * Renders array item toolbar.                                                                                 // 11231
         *                                                                                                             // 11232
         * @param {Object} containerElem Toolbar container.                                                            // 11233
         */                                                                                                            // 11234
        renderToolbar: function(containerElem) {                                                                       // 11235
            var _this = this;                                                                                          // 11236
                                                                                                                       // 11237
            if (!this.options.readonly) {                                                                              // 11238
                var id = containerElem.attr('alpaca-id');                                                              // 11239
                var fieldControl = this.childrenById[id];                                                              // 11240
                var itemToolbarTemplateDescriptor = this.view.getTemplateDescriptor("arrayItemToolbar");               // 11241
                if (itemToolbarTemplateDescriptor) {                                                                   // 11242
                                                                                                                       // 11243
                    // Base buttons : add & remove                                                                     // 11244
                    var buttonsDef = [                                                                                 // 11245
                        {                                                                                              // 11246
                            feature: "add",                                                                            // 11247
                            icon: _this.addIcon,                                                                       // 11248
                            label: (_this.options.items && _this.options.items.addItemLabel) ? _this.options.items.addItemLabel : "Add Item",
                            clickCallback: function(id, arrayField) {                                                  // 11250
                                                                                                                       // 11251
                                _this.resolveItemSchemaOptions(function(schema, options) {                             // 11252
                                                                                                                       // 11253
                                    var newContainerElem = arrayField.addItem(containerElem.index() + 1, schema, options, null, id, true);
                                    arrayField.enrichElements(newContainerElem);                                       // 11255
                                                                                                                       // 11256
                                });                                                                                    // 11257
                                                                                                                       // 11258
                                return false;                                                                          // 11259
                            }                                                                                          // 11260
                        },                                                                                             // 11261
                        {                                                                                              // 11262
                            feature: "remove",                                                                         // 11263
                            icon: _this.removeIcon,                                                                    // 11264
                            label: (_this.options.items && _this.options.items.removeItemLabel) ? _this.options.items.removeItemLabel : "Remove Item",
                            clickCallback: function(id, arrayField) {                                                  // 11266
                                arrayField.removeItem(id);                                                             // 11267
                            }                                                                                          // 11268
                        }                                                                                              // 11269
                    ];                                                                                                 // 11270
                                                                                                                       // 11271
                    // Optional buttons : up & down                                                                    // 11272
                    if ((_this.options.items && _this.options.items.showMoveUpItemButton)) {                           // 11273
                        buttonsDef.push({                                                                              // 11274
                            feature: "up",                                                                             // 11275
                            icon: _this.upIcon,                                                                        // 11276
                            label: (_this.options.items && _this.options.items.moveUpItemLabel) ? _this.options.items.moveUpItemLabel : "Move Up",
                            clickCallback: function(id, arrayField) {                                                  // 11278
                                arrayField.moveItem(id, true);                                                         // 11279
                            }                                                                                          // 11280
                        });                                                                                            // 11281
                    }                                                                                                  // 11282
                                                                                                                       // 11283
                    if ((_this.options.items && _this.options.items.showMoveDownItemButton)) {                         // 11284
                        buttonsDef.push({                                                                              // 11285
                            feature: "down",                                                                           // 11286
                            icon: _this.downIcon,                                                                      // 11287
                            label: (_this.options.items && _this.options.items.moveDownItemLabel) ? _this.options.items.moveDownItemLabel : "Move Down",
                            clickCallback: function(id, arrayField) {                                                  // 11289
                                arrayField.moveItem(id, false);                                                        // 11290
                            }                                                                                          // 11291
                        });                                                                                            // 11292
                    }                                                                                                  // 11293
                                                                                                                       // 11294
                    // Extra buttons : user-defined                                                                    // 11295
                    if (_this.options.items && _this.options.items.extraToolbarButtons) {                              // 11296
                        buttonsDef = $.merge(buttonsDef,_this.options.items.extraToolbarButtons);                      // 11297
                    }                                                                                                  // 11298
                                                                                                                       // 11299
                    var toolbarElem = _this.view.tmpl(itemToolbarTemplateDescriptor, {                                 // 11300
                        "id": id,                                                                                      // 11301
                        "buttons": buttonsDef                                                                          // 11302
                    });                                                                                                // 11303
                    if (toolbarElem.attr("id") === null) {                                                             // 11304
                        toolbarElem.attr("id", id + "-item-toolbar");                                                  // 11305
                    }                                                                                                  // 11306
                                                                                                                       // 11307
                    // Process all buttons                                                                             // 11308
                    for (var i in buttonsDef) {                                                                        // 11309
                        (function(def) { // closure to prevent "def" leaking                                           // 11310
                            var el = toolbarElem.find('.alpaca-fieldset-array-item-toolbar-'+def.feature);             // 11311
                            el.click(function(e) {return def.clickCallback(id, _this, e);});                           // 11312
                            if (_this.buttonBeautifier) {                                                              // 11313
                                _this.buttonBeautifier.call(_this,el, def.icon);                                       // 11314
                            }                                                                                          // 11315
                        })(buttonsDef[i]);                                                                             // 11316
                    }                                                                                                  // 11317
                                                                                                                       // 11318
                    if (this.options.toolbarSticky) {                                                                  // 11319
                        toolbarElem.prependTo(containerElem);                                                          // 11320
                    } else {                                                                                           // 11321
                        toolbarElem.hide().prependTo(containerElem);                                                   // 11322
                        containerElem.hover(function() {                                                               // 11323
                            $('.alpaca-fieldset-array-item-toolbar', this).show();                                     // 11324
                        }, function() {                                                                                // 11325
                            $('.alpaca-fieldset-array-item-toolbar', this).hide();                                     // 11326
                        });                                                                                            // 11327
                    }                                                                                                  // 11328
                                                                                                                       // 11329
                }                                                                                                      // 11330
            }                                                                                                          // 11331
        },                                                                                                             // 11332
                                                                                                                       // 11333
        /**                                                                                                            // 11334
         * Renders array toolbar.                                                                                      // 11335
         * @param {Object} containerElem Array toolbar container.                                                      // 11336
         */                                                                                                            // 11337
        renderArrayToolbar: function(containerElem) {                                                                  // 11338
            var _this = this;                                                                                          // 11339
            var id = containerElem.attr('alpaca-id');                                                                  // 11340
            var itemToolbarTemplateDescriptor = this.view.getTemplateDescriptor("arrayToolbar");                       // 11341
            if (itemToolbarTemplateDescriptor) {                                                                       // 11342
                var toolbarElem = _this.view.tmpl(itemToolbarTemplateDescriptor, {                                     // 11343
                    "id": id,                                                                                          // 11344
                    "addItemLabel": (_this.options.items && _this.options.items.addItemLabel) ? _this.options.items.addItemLabel : "Add Item"
                });                                                                                                    // 11346
                if (toolbarElem.attr("id") === null) {                                                                 // 11347
                    toolbarElem.attr("id", id + "-array-toolbar");                                                     // 11348
                }                                                                                                      // 11349
                                                                                                                       // 11350
                // add actions to toolbar buttons                                                                      // 11351
                if (this.options.toolbarStyle == "link") {                                                             // 11352
                    $('.alpaca-fieldset-array-toolbar-add', toolbarElem).click(function() {                            // 11353
                                                                                                                       // 11354
                        _this.resolveItemSchemaOptions(function(schema, options) {                                     // 11355
                                                                                                                       // 11356
                            var newContainerElem = _this.addItem(0, schema, options, "", id, true);                    // 11357
                            _this.enrichElements(newContainerElem);                                                    // 11358
                                                                                                                       // 11359
                        });                                                                                            // 11360
                    });                                                                                                // 11361
                } else {                                                                                               // 11362
                    var toolbarElemAdd = $('.alpaca-fieldset-array-toolbar-add', toolbarElem);                         // 11363
                    if (_this.buttonBeautifier) {                                                                      // 11364
                        _this.buttonBeautifier.call(_this, toolbarElemAdd, _this.addIcon, true);                       // 11365
                    }                                                                                                  // 11366
                    toolbarElemAdd.click(function() {                                                                  // 11367
                                                                                                                       // 11368
                        _this.resolveItemSchemaOptions(function(schema, options) {                                     // 11369
                            _this.addItem(0, schema, options, "", id, true);                                           // 11370
                        });                                                                                            // 11371
                                                                                                                       // 11372
                        return false;                                                                                  // 11373
                    }).wrap('<small></small>');                                                                        // 11374
                                                                                                                       // 11375
                }                                                                                                      // 11376
                toolbarElem.appendTo(containerElem);                                                                   // 11377
                this.arrayToolbar = toolbarElem;                                                                       // 11378
            }                                                                                                          // 11379
        },                                                                                                             // 11380
                                                                                                                       // 11381
        /**                                                                                                            // 11382
         * Re-renders item.                                                                                            // 11383
         *                                                                                                             // 11384
         * @param {Object} fieldControl Item control to be re-rendered                                                 // 11385
         *                                                                                                             // 11386
         * @param {Object} newContainer New field container.                                                           // 11387
         */                                                                                                            // 11388
        reRenderItem: function(fieldControl, newContainer) {                                                           // 11389
            fieldControl.container = newContainer;                                                                     // 11390
            fieldControl.render();                                                                                     // 11391
                                                                                                                       // 11392
            newContainer.attr("id", fieldControl.getId() + "-item-container");                                         // 11393
            newContainer.attr("alpaca-id", fieldControl.getId());                                                      // 11394
            newContainer.addClass("alpaca-item-container");                                                            // 11395
                                                                                                                       // 11396
            $(".alpaca-fieldset-array-item-toolbar", newContainer).remove();                                           // 11397
            this.renderToolbar(newContainer);                                                                          // 11398
            this.enrichElements(newContainer);                                                                         // 11399
        },                                                                                                             // 11400
                                                                                                                       // 11401
        /**                                                                                                            // 11402
         * Adds item.                                                                                                  // 11403
         *                                                                                                             // 11404
         * @param {String} index Index of the item                                                                     // 11405
         * @param {Object} itemSchema field schema                                                                     // 11406
         * @param {Object} itemOptions field options                                                                   // 11407
         * @param {Any} itemData field data                                                                            // 11408
         * @param {String} insertAfterId Where the item will be inserted                                               // 11409
         * @param [Boolean] isDynamicSubItem whether this item is being dynamically created (after first render)       // 11410
         * @param [Function] postRenderCallback called after the child is added                                        // 11411
         */                                                                                                            // 11412
        addItem: function(index, itemSchema, itemOptions, itemData, insertAfterId, isDynamicSubItem, postRenderCallback) {
            return this._addItem(index, itemSchema, itemOptions, itemData, insertAfterId, isDynamicSubItem, postRenderCallback);
        },                                                                                                             // 11415
                                                                                                                       // 11416
        /**                                                                                                            // 11417
         * Workhorse method for addItem.                                                                               // 11418
         *                                                                                                             // 11419
         * @param index                                                                                                // 11420
         * @param itemSchema                                                                                           // 11421
         * @param itemOptions                                                                                          // 11422
         * @param itemData                                                                                             // 11423
         * @param insertAfterId                                                                                        // 11424
         * @param isDynamicSubItem                                                                                     // 11425
         * @param postRenderCallback                                                                                   // 11426
         * @return {*}                                                                                                 // 11427
         * @private                                                                                                    // 11428
         */                                                                                                            // 11429
        _addItem: function(index, itemSchema, itemOptions, itemData, insertAfterId, isDynamicSubItem, postRenderCallback) {
            var _this = this;                                                                                          // 11431
            if (_this._validateEqualMaxItems()) {                                                                      // 11432
                                                                                                                       // 11433
                if (itemOptions === null && _this.options && _this.options.fields && _this.options.fields["item"]) {   // 11434
                    itemOptions = _this.options.fields["item"];                                                        // 11435
                }                                                                                                      // 11436
                                                                                                                       // 11437
                var containerElem = _this.renderItemContainer(insertAfterId);                                          // 11438
                containerElem.alpaca({                                                                                 // 11439
                    "data" : itemData,                                                                                 // 11440
                    "options": itemOptions,                                                                            // 11441
                    "schema" : itemSchema,                                                                             // 11442
                    "view" : this.view.id ? this.view.id : this.view,                                                  // 11443
                    "connector": this.connector,                                                                       // 11444
                    "error": function(err)                                                                             // 11445
                    {                                                                                                  // 11446
                        _this.destroy();                                                                               // 11447
                                                                                                                       // 11448
                        _this.errorCallback.call(_this, err);                                                          // 11449
                    },                                                                                                 // 11450
                    "notTopLevel":true,                                                                                // 11451
                    "isDynamicCreation": (isDynamicSubItem || this.isDynamicCreation),                                 // 11452
                    "render" : function(fieldControl, cb) {                                                            // 11453
                        // render                                                                                      // 11454
                        fieldControl.parent = _this;                                                                   // 11455
                        // setup item path                                                                             // 11456
                        fieldControl.path = _this.path + "[" + index + "]";                                            // 11457
                        fieldControl.nameCalculated = true;                                                            // 11458
                        fieldControl.render(null, function() {                                                         // 11459
                                                                                                                       // 11460
                            containerElem.attr("id", fieldControl.getId() + "-item-container");                        // 11461
                            containerElem.attr("alpaca-id", fieldControl.getId());                                     // 11462
                            containerElem.addClass("alpaca-item-container");                                           // 11463
                            // render item label if needed                                                             // 11464
                            if (_this.options && _this.options.itemLabel) {                                            // 11465
                                var itemLabelTemplateDescriptor = _this.view.getTemplateDescriptor("itemLabel");       // 11466
                                var itemLabelElem = _this.view.tmpl(itemLabelTemplateDescriptor, {                     // 11467
                                    "options": _this.options,                                                          // 11468
                                    "index": index ? index + 1 : 1,                                                    // 11469
                                    "id": _this.id                                                                     // 11470
                                });                                                                                    // 11471
                                itemLabelElem.prependTo(containerElem);                                                // 11472
                            }                                                                                          // 11473
                            // remember the control                                                                    // 11474
                            _this.addChild(fieldControl, index);                                                       // 11475
                            _this.renderToolbar(containerElem);                                                        // 11476
                            _this.renderValidationState();                                                             // 11477
                            _this.updatePathAndName();                                                                 // 11478
                                                                                                                       // 11479
                            // trigger update on the parent array                                                      // 11480
                            _this.triggerUpdate();                                                                     // 11481
                                                                                                                       // 11482
                            // if not empty, mark the "last" and "first" dom elements in the list                      // 11483
                            if ($(containerElem).siblings().addBack().length > 0)                                      // 11484
                            {                                                                                          // 11485
                                $(containerElem).parent().removeClass("alpaca-fieldset-items-container-empty");        // 11486
                                                                                                                       // 11487
                                $(containerElem).siblings().addBack().removeClass("alpaca-item-container-first");      // 11488
                                $(containerElem).siblings().addBack().removeClass("alpaca-item-container-last");       // 11489
                                $(containerElem).siblings().addBack().first().addClass("alpaca-item-container-first"); // 11490
                                $(containerElem).siblings().addBack().last().addClass("alpaca-item-container-last");   // 11491
                            }                                                                                          // 11492
                                                                                                                       // 11493
                            // store key on dom element                                                                // 11494
                            $(containerElem).attr("data-alpaca-item-container-item-key", index);                       // 11495
                                                                                                                       // 11496
                            if (cb)                                                                                    // 11497
                            {                                                                                          // 11498
                                cb();                                                                                  // 11499
                            }                                                                                          // 11500
                        });                                                                                            // 11501
                    },                                                                                                 // 11502
                    "postRender": function(control)                                                                    // 11503
                    {                                                                                                  // 11504
                        if (postRenderCallback)                                                                        // 11505
                        {                                                                                              // 11506
                            postRenderCallback(control);                                                               // 11507
                        }                                                                                              // 11508
                    }                                                                                                  // 11509
                });                                                                                                    // 11510
                                                                                                                       // 11511
                this.updateToolbarItemsStatus(this.outerEl);                                                           // 11512
                return containerElem;                                                                                  // 11513
            }                                                                                                          // 11514
        },                                                                                                             // 11515
                                                                                                                       // 11516
        /**                                                                                                            // 11517
         * Enriches styles for dynamic elements.                                                                       // 11518
         *                                                                                                             // 11519
         * @param {Object} containerElem Field container element.                                                      // 11520
         */                                                                                                            // 11521
        enrichElements: function(containerElem) {                                                                      // 11522
            this.getStyleInjection('array',containerElem);                                                             // 11523
        },                                                                                                             // 11524
                                                                                                                       // 11525
        /**                                                                                                            // 11526
         * Determines the schema and options to utilize for items within this array.                                   // 11527
         *                                                                                                             // 11528
         * @param callback                                                                                             // 11529
         */                                                                                                            // 11530
        resolveItemSchemaOptions: function(callback)                                                                   // 11531
        {                                                                                                              // 11532
            var _this = this;                                                                                          // 11533
                                                                                                                       // 11534
            var itemOptions;                                                                                           // 11535
            if (_this.options && _this.options.fields && _this.options.fields["item"]) {                               // 11536
                itemOptions = _this.options.fields["item"];                                                            // 11537
            }                                                                                                          // 11538
            var itemSchema;                                                                                            // 11539
            if (_this.schema && _this.schema.items) {                                                                  // 11540
                itemSchema = _this.schema.items;                                                                       // 11541
            }                                                                                                          // 11542
                                                                                                                       // 11543
            // handle $ref                                                                                             // 11544
            if (itemSchema && itemSchema["$ref"])                                                                      // 11545
            {                                                                                                          // 11546
                var referenceId = itemSchema["$ref"];                                                                  // 11547
                                                                                                                       // 11548
                var topField = this;                                                                                   // 11549
                var fieldChain = [topField];                                                                           // 11550
                while (topField.parent)                                                                                // 11551
                {                                                                                                      // 11552
                    topField = topField.parent;                                                                        // 11553
                    fieldChain.push(topField);                                                                         // 11554
                }                                                                                                      // 11555
                                                                                                                       // 11556
                Alpaca.loadRefSchemaOptions(topField, referenceId, function(itemSchema, itemOptions) {                 // 11557
                                                                                                                       // 11558
                    // walk the field chain to see if we have any circularity                                          // 11559
                    var refCount = 0;                                                                                  // 11560
                    for (var i = 0; i < fieldChain.length; i++)                                                        // 11561
                    {                                                                                                  // 11562
                        if (fieldChain[i].schema && fieldChain[i].schema.id === referenceId)                           // 11563
                        {                                                                                              // 11564
                            refCount++;                                                                                // 11565
                        }                                                                                              // 11566
                    }                                                                                                  // 11567
                                                                                                                       // 11568
                    var circular = (refCount > 1);                                                                     // 11569
                                                                                                                       // 11570
                    if (itemSchema)                                                                                    // 11571
                    {                                                                                                  // 11572
                        itemSchema = Alpaca.copyOf(itemSchema);                                                        // 11573
                        delete itemSchema.id;                                                                          // 11574
                    }                                                                                                  // 11575
                                                                                                                       // 11576
                    if (itemOptions)                                                                                   // 11577
                    {                                                                                                  // 11578
                        itemOptions = Alpaca.copyOf(itemOptions);                                                      // 11579
                    }                                                                                                  // 11580
                                                                                                                       // 11581
                    callback(itemSchema, itemOptions, circular);                                                       // 11582
                });                                                                                                    // 11583
            }                                                                                                          // 11584
            else                                                                                                       // 11585
            {                                                                                                          // 11586
                callback(itemSchema, itemOptions);                                                                     // 11587
            }                                                                                                          // 11588
        },                                                                                                             // 11589
                                                                                                                       // 11590
        /**                                                                                                            // 11591
         * @see Alpaca.ContainerField#renderItems                                                                      // 11592
         */                                                                                                            // 11593
        renderItems: function(onSuccess) {                                                                             // 11594
            var _this = this;                                                                                          // 11595
                                                                                                                       // 11596
            // mark field container as empty by default                                                                // 11597
            // the "addItem" method below gets the opportunity to unset this                                           // 11598
            $(this.fieldContainer).addClass("alpaca-fieldset-items-container-empty");                                  // 11599
                                                                                                                       // 11600
            if (this.data)                                                                                             // 11601
            {                                                                                                          // 11602
                // all items within the array have the same schema and options                                         // 11603
                // so we only need to load this once                                                                   // 11604
                _this.resolveItemSchemaOptions(function(schema, options) {                                             // 11605
                                                                                                                       // 11606
                    // workhorse function                                                                              // 11607
                    // adds an item and then recursively fires down from the callback until the end of the list is reached
                    var handleItem = function(index)                                                                   // 11609
                    {                                                                                                  // 11610
                        if (index === _this.data.length)                                                               // 11611
                        {                                                                                              // 11612
                            _this.updateToolbarItemsStatus();                                                          // 11613
                                                                                                                       // 11614
                            if (onSuccess)                                                                             // 11615
                            {                                                                                          // 11616
                                onSuccess();                                                                           // 11617
                            }                                                                                          // 11618
                                                                                                                       // 11619
                            return;                                                                                    // 11620
                        }                                                                                              // 11621
                                                                                                                       // 11622
                        var value = _this.data[index];                                                                 // 11623
                                                                                                                       // 11624
                        _this.addItem(index, schema, options, value, false, false, function() {                        // 11625
                            handleItem(index+1);                                                                       // 11626
                        });                                                                                            // 11627
                                                                                                                       // 11628
                    };                                                                                                 // 11629
                    handleItem(0);                                                                                     // 11630
                });                                                                                                    // 11631
            }                                                                                                          // 11632
            else                                                                                                       // 11633
            {                                                                                                          // 11634
                this.updateToolbarItemsStatus();                                                                       // 11635
                                                                                                                       // 11636
                if (onSuccess)                                                                                         // 11637
                {                                                                                                      // 11638
                    onSuccess();                                                                                       // 11639
                }                                                                                                      // 11640
            }                                                                                                          // 11641
        },                                                                                                             // 11642
                                                                                                                       // 11643
        /**                                                                                                            // 11644
         * Validates if the number of items has been reached to maxItems.                                              // 11645
         * @returns {Boolean} true if the number of items has been reached to maxItems                                 // 11646
         */                                                                                                            // 11647
        _validateEqualMaxItems: function() {                                                                           // 11648
            if (this.schema.items && this.schema.items.maxItems) {                                                     // 11649
                if (this.getSize() >= this.schema.items.maxItems) {                                                    // 11650
                    return false;                                                                                      // 11651
                }                                                                                                      // 11652
            }                                                                                                          // 11653
            return true;                                                                                               // 11654
        },                                                                                                             // 11655
                                                                                                                       // 11656
        /**                                                                                                            // 11657
         * Validates if the number of items has been reached to minItems.                                              // 11658
         * @returns {Boolean} true if number of items has been reached to minItems                                     // 11659
         */                                                                                                            // 11660
        _validateEqualMinItems: function() {                                                                           // 11661
            if (this.schema.items && this.schema.items.minItems) {                                                     // 11662
                if (this.getSize() <= this.schema.items.minItems) {                                                    // 11663
                    return false;                                                                                      // 11664
                }                                                                                                      // 11665
            }                                                                                                          // 11666
            return true;                                                                                               // 11667
        },                                                                                                             // 11668
                                                                                                                       // 11669
        /**                                                                                                            // 11670
         * Validates if number of items has been less than minItems.                                                   // 11671
         * @returns {Boolean} true if number of items has been less than minItems                                      // 11672
         */                                                                                                            // 11673
        _validateMinItems: function() {                                                                                // 11674
            if (this.schema.items && this.schema.items.minItems) {                                                     // 11675
                if (this.getSize() < this.schema.items.minItems) {                                                     // 11676
                    return false;                                                                                      // 11677
                }                                                                                                      // 11678
            }                                                                                                          // 11679
            return true;                                                                                               // 11680
        },                                                                                                             // 11681
                                                                                                                       // 11682
        /**                                                                                                            // 11683
         * Validates if number of items has been over maxItems.                                                        // 11684
         * @returns {Boolean} true if number of items has been over maxItems                                           // 11685
         */                                                                                                            // 11686
        _validateMaxItems: function() {                                                                                // 11687
            if (this.schema.items && this.schema.items.maxItems) {                                                     // 11688
                if (this.getSize() > this.schema.items.maxItems) {                                                     // 11689
                    return false;                                                                                      // 11690
                }                                                                                                      // 11691
            }                                                                                                          // 11692
            return true;                                                                                               // 11693
        },                                                                                                             // 11694
                                                                                                                       // 11695
        /**                                                                                                            // 11696
         * Validates if all items are unique.                                                                          // 11697
         * @returns {Boolean} true if all items are unique.                                                            // 11698
         */                                                                                                            // 11699
        _validateUniqueItems: function() {                                                                             // 11700
            if (this.schema.items && this.schema.uniqueItems) {                                                        // 11701
                var hash = {};                                                                                         // 11702
                for (var i = 0, l = this.children.length; i < l; ++i) {                                                // 11703
                    if (!hash.hasOwnProperty(this.children[i])) {                                                      // 11704
                        hash[this.children[i]] = true;                                                                 // 11705
                    } else {                                                                                           // 11706
                        return false;                                                                                  // 11707
                    }                                                                                                  // 11708
                }                                                                                                      // 11709
            }                                                                                                          // 11710
            return true;                                                                                               // 11711
        },                                                                                                             // 11712
                                                                                                                       // 11713
        /**                                                                                                            // 11714
         * @see Alpaca.ContainerField#handleValidate                                                                   // 11715
         */                                                                                                            // 11716
        handleValidate: function() {                                                                                   // 11717
            var baseStatus = this.base();                                                                              // 11718
                                                                                                                       // 11719
            var valInfo = this.validation;                                                                             // 11720
                                                                                                                       // 11721
            var status = this._validateUniqueItems();                                                                  // 11722
            valInfo["valueNotUnique"] = {                                                                              // 11723
                "message": status ? "" : this.view.getMessage("valueNotUnique"),                                       // 11724
                "status": status                                                                                       // 11725
            };                                                                                                         // 11726
                                                                                                                       // 11727
            status = this._validateMaxItems();                                                                         // 11728
            valInfo["tooManyItems"] = {                                                                                // 11729
                "message": status ? "" : Alpaca.substituteTokens(this.view.getMessage("tooManyItems"), [this.schema.items.maxItems]),
                "status": status                                                                                       // 11731
            };                                                                                                         // 11732
                                                                                                                       // 11733
            status = this._validateMinItems();                                                                         // 11734
            valInfo["notEnoughItems"] = {                                                                              // 11735
                "message": status ? "" : Alpaca.substituteTokens(this.view.getMessage("notEnoughItems"), [this.schema.items.minItems]),
                "status": status                                                                                       // 11737
            };                                                                                                         // 11738
                                                                                                                       // 11739
            return baseStatus && valInfo["valueNotUnique"]["status"] && valInfo["tooManyItems"]["status"] && valInfo["notEnoughItems"]["status"];
        }                                                                                                              // 11741
    });                                                                                                                // 11742
                                                                                                                       // 11743
    Alpaca.registerTemplate("itemLabel", '{{if options.itemLabel}}<div class="alpaca-controlfield-label"><div>${options.itemLabel}{{if index}} <span class="alpaca-item-label-counter">${index}</span>{{/if}}</div></div>{{/if}}');
    Alpaca.registerTemplate("arrayToolbar", '<span class="ui-widget ui-corner-all alpaca-fieldset-array-toolbar"><button class="alpaca-fieldset-array-toolbar-icon alpaca-fieldset-array-toolbar-add">${addItemLabel}</button></span>');
    Alpaca.registerTemplate("arrayItemToolbar", '<div class="ui-widget-header ui-corner-all alpaca-fieldset-array-item-toolbar">{{each(k,v) buttons}}<button class="alpaca-fieldset-array-item-toolbar-icon alpaca-fieldset-array-item-toolbar-${v.feature}">${v.label}</button>{{/each}}</div>');
    Alpaca.registerMessages({                                                                                          // 11747
        "notEnoughItems": "The minimum number of items is {0}",                                                        // 11748
        "tooManyItems": "The maximum number of items is {0}",                                                          // 11749
        "valueNotUnique": "Values are not unique",                                                                     // 11750
        "notAnArray": "This value is not an Array"                                                                     // 11751
    });                                                                                                                // 11752
    Alpaca.registerFieldClass("array", Alpaca.Fields.ArrayField);                                                      // 11753
    Alpaca.registerDefaultSchemaFieldMapping("array", "array");                                                        // 11754
                                                                                                                       // 11755
})(jQuery);                                                                                                            // 11756
/*jshint -W004 */ // duplicate variables                                                                               // 11757
/*jshint -W083 */ // inline functions are used safely                                                                  // 11758
(function($) {                                                                                                         // 11759
                                                                                                                       // 11760
    var Alpaca = $.alpaca;                                                                                             // 11761
                                                                                                                       // 11762
    Alpaca.Fields.ObjectField = Alpaca.ContainerField.extend(                                                          // 11763
        /**                                                                                                            // 11764
         * @lends Alpaca.Fields.ObjectField.prototype                                                                  // 11765
         */                                                                                                            // 11766
        {                                                                                                              // 11767
            /**                                                                                                        // 11768
             * @constructs                                                                                             // 11769
             * @augments Alpaca.ContainerField                                                                         // 11770
             *                                                                                                         // 11771
             * @class Control for JSON Schema object type.                                                             // 11772
             *                                                                                                         // 11773
             * @param {Object} container Field container.                                                              // 11774
             * @param {Any} data Field data.                                                                           // 11775
             * @param {Object} options Field options.                                                                  // 11776
             * @param {Object} schema Field schema.                                                                    // 11777
             * @param {Object|String} view Field view.                                                                 // 11778
             * @param {Alpaca.Connector} connector Field connector.                                                    // 11779
             * @param {Function} errorCallback Error callback.                                                         // 11780
             */                                                                                                        // 11781
            constructor: function(container, data, options, schema, view, connector, errorCallback) {                  // 11782
                this.base(container, data, options, schema, view, connector, errorCallback);                           // 11783
            },                                                                                                         // 11784
                                                                                                                       // 11785
            /**                                                                                                        // 11786
             * @see Alpaca.ContainerField#setup                                                                        // 11787
             */                                                                                                        // 11788
            setup: function() {                                                                                        // 11789
                this.base();                                                                                           // 11790
                                                                                                                       // 11791
                this.wizardPreIcon = "";                                                                               // 11792
                this.wizardNextIcon = "";                                                                              // 11793
                this.wizardDoneIcon= "";                                                                               // 11794
                                                                                                                       // 11795
                if (this.view.style && Alpaca.styleInjections[this.view.style]) {                                      // 11796
                    if (Alpaca.styleInjections[this.view.style]["wizardPreIcon"]) {                                    // 11797
                        this.wizardPreIcon = Alpaca.styleInjections[this.view.style]["wizardPreIcon"];                 // 11798
                    }                                                                                                  // 11799
                    if (Alpaca.styleInjections[this.view.style]["wizardNextIcon"]) {                                   // 11800
                        this.wizardNextIcon = Alpaca.styleInjections[this.view.style]["wizardNextIcon"];               // 11801
                    }                                                                                                  // 11802
                    if (Alpaca.styleInjections[this.view.style]["wizardDoneIcon"]) {                                   // 11803
                        this.wizardDoneIcon = Alpaca.styleInjections[this.view.style]["wizardDoneIcon"];               // 11804
                    }                                                                                                  // 11805
                }                                                                                                      // 11806
                                                                                                                       // 11807
                if (Alpaca.isEmpty(this.data)) {                                                                       // 11808
                    return;                                                                                            // 11809
                }                                                                                                      // 11810
                if (!Alpaca.isObject(this.data)) {                                                                     // 11811
                    if (!Alpaca.isString(this.data)) {                                                                 // 11812
                        return;                                                                                        // 11813
                    } else {                                                                                           // 11814
                        try {                                                                                          // 11815
                            this.data = Alpaca.parseJSON(this.data);                                                   // 11816
                            if (!Alpaca.isObject(this.data)) {                                                         // 11817
                                Alpaca.logWarn("ObjectField parsed data but it was not an object: " + JSON.stringify(this.data));
                                return;                                                                                // 11819
                            }                                                                                          // 11820
                        } catch (e) {                                                                                  // 11821
                            return;                                                                                    // 11822
                        }                                                                                              // 11823
                    }                                                                                                  // 11824
                }                                                                                                      // 11825
            },                                                                                                         // 11826
                                                                                                                       // 11827
            /**                                                                                                        // 11828
             * Picks apart the data object and set onto child fields.                                                  // 11829
             *                                                                                                         // 11830
             * @see Alpaca.Field#setValue                                                                              // 11831
             */                                                                                                        // 11832
            setValue: function(data) {                                                                                 // 11833
                if (!data || !Alpaca.isObject(data)) {                                                                 // 11834
                    return;                                                                                            // 11835
                }                                                                                                      // 11836
                // clear all controls                                                                                  // 11837
                //Alpaca.each(this.children, function() {                                                              // 11838
                //    this.clear();                                                                                    // 11839
                //});                                                                                                  // 11840
                                                                                                                       // 11841
                // set fields                                                                                          // 11842
                for (var fieldId in this.childrenById) {                                                               // 11843
                    var propertyId = this.childrenById[fieldId].propertyId;                                            // 11844
                    var _data = Alpaca.traverseObject(data, propertyId);                                               // 11845
                    if (!Alpaca.isEmpty(_data)) {                                                                      // 11846
                        var childField = this.childrenById[fieldId];                                                   // 11847
                        childField.setValue(_data);                                                                    // 11848
                    }                                                                                                  // 11849
                }                                                                                                      // 11850
            },                                                                                                         // 11851
                                                                                                                       // 11852
            /**                                                                                                        // 11853
             * Reconstructs the data object from the child fields.                                                     // 11854
             *                                                                                                         // 11855
             * @see Alpaca.Field#getValue                                                                              // 11856
             */                                                                                                        // 11857
            getValue: function() {                                                                                     // 11858
                                                                                                                       // 11859
                // if we don't have any children and we're not required, hand back undefined                           // 11860
                if (this.children.length === 0 && !this.schema.required)                                               // 11861
                {                                                                                                      // 11862
                    return;                                                                                            // 11863
                }                                                                                                      // 11864
                                                                                                                       // 11865
                // otherwise, hand back an object with our child properties in it                                      // 11866
                var o = {};                                                                                            // 11867
                                                                                                                       // 11868
                // walk through all of the properties object                                                           // 11869
                // for each property, we insert it into a JSON object that we'll hand back as the result               // 11870
                                                                                                                       // 11871
                // if the property has dependencies, then we evaluate those dependencies first to determine whether the
                // resulting property should be included                                                               // 11873
                                                                                                                       // 11874
                for (var i = 0; i < this.children.length; i++) {                                                       // 11875
                                                                                                                       // 11876
                    // the property key and vlaue                                                                      // 11877
                    var propertyId = this.children[i].propertyId;                                                      // 11878
                    var fieldValue = this.children[i].getValue();                                                      // 11879
                                                                                                                       // 11880
                    if (typeof(fieldValue) !== "undefined")                                                            // 11881
                    {                                                                                                  // 11882
                        if (this.determineAllDependenciesValid(propertyId))                                            // 11883
                        {                                                                                              // 11884
                            o[propertyId] = fieldValue;                                                                // 11885
                        }                                                                                              // 11886
                    }                                                                                                  // 11887
                }                                                                                                      // 11888
                                                                                                                       // 11889
                return o;                                                                                              // 11890
            },                                                                                                         // 11891
                                                                                                                       // 11892
            /**                                                                                                        // 11893
             * @see Alpaca.Field#postRender                                                                            // 11894
             */                                                                                                        // 11895
            postRender: function(callback) {                                                                           // 11896
                                                                                                                       // 11897
                var self = this;                                                                                       // 11898
                                                                                                                       // 11899
                this.base(function() {                                                                                 // 11900
                                                                                                                       // 11901
                    // Generates wizard if requested                                                                   // 11902
                    if (self.isTopLevel()) {                                                                           // 11903
                        if (self.view) {                                                                               // 11904
                            self.wizardConfigs = self.view.getWizard();                                                // 11905
                            if (self.wizardConfigs) {                                                                  // 11906
                                                                                                                       // 11907
                                // set up defaults for wizard                                                          // 11908
                                if (Alpaca.isUndefined(self.wizardConfigs.validation)) {                               // 11909
                                    self.wizardConfigs.validation = true;                                              // 11910
                                }                                                                                      // 11911
                                if (!self.wizardConfigs.buttons) {                                                     // 11912
                                    self.wizardConfigs.buttons = {};                                                   // 11913
                                }                                                                                      // 11914
                                                                                                                       // 11915
                                // done                                                                                // 11916
                                if (!self.wizardConfigs.buttons.done) {                                                // 11917
                                    self.wizardConfigs.buttons.done = {};                                              // 11918
                                }                                                                                      // 11919
                                if (Alpaca.isUndefined(self.wizardConfigs.buttons.done.validateOnClick)) {             // 11920
                                    self.wizardConfigs.buttons.done.validateOnClick = true;                            // 11921
                                }                                                                                      // 11922
                                                                                                                       // 11923
                                // prev                                                                                // 11924
                                if (!self.wizardConfigs.buttons.prev) {                                                // 11925
                                    self.wizardConfigs.buttons.prev = {};                                              // 11926
                                }                                                                                      // 11927
                                if (Alpaca.isUndefined(self.wizardConfigs.buttons.prev.validateOnClick)) {             // 11928
                                    self.wizardConfigs.buttons.prev.validateOnClick = true;                            // 11929
                                }                                                                                      // 11930
                                                                                                                       // 11931
                                // next                                                                                // 11932
                                if (!self.wizardConfigs.buttons.next) {                                                // 11933
                                    self.wizardConfigs.buttons.next = {};                                              // 11934
                                }                                                                                      // 11935
                                if (Alpaca.isUndefined(self.wizardConfigs.buttons.next.validateOnClick)) {             // 11936
                                    self.wizardConfigs.buttons.next.validateOnClick = true;                            // 11937
                                }                                                                                      // 11938
                            }                                                                                          // 11939
                            var layoutTemplateDescriptor = self.view.getLayout().templateDescriptor;                   // 11940
                            if (self.wizardConfigs && self.wizardConfigs.renderWizard) {                               // 11941
                                if (layoutTemplateDescriptor) {                                                        // 11942
                                    //Wizard based on layout                                                           // 11943
                                    self.wizard();                                                                     // 11944
                                } else {                                                                               // 11945
                                    //Wizard based on injections                                                       // 11946
                                    self.autoWizard();                                                                 // 11947
                                }                                                                                      // 11948
                            }                                                                                          // 11949
                        }                                                                                              // 11950
                    }                                                                                                  // 11951
                                                                                                                       // 11952
                    callback();                                                                                        // 11953
                });                                                                                                    // 11954
            },                                                                                                         // 11955
                                                                                                                       // 11956
            /**                                                                                                        // 11957
             * Gets child index.                                                                                       // 11958
             *                                                                                                         // 11959
             * @param {Object} propertyId Child field property ID.                                                     // 11960
             */                                                                                                        // 11961
            getIndex: function(propertyId) {                                                                           // 11962
                if (Alpaca.isEmpty(propertyId)) {                                                                      // 11963
                    return -1;                                                                                         // 11964
                }                                                                                                      // 11965
                for (var i = 0; i < this.children.length; i++) {                                                       // 11966
                    var pid = this.children[i].propertyId;                                                             // 11967
                    if (pid == propertyId) {                                                                           // 11968
                        return i;                                                                                      // 11969
                    }                                                                                                  // 11970
                }                                                                                                      // 11971
                return -1;                                                                                             // 11972
            },                                                                                                         // 11973
                                                                                                                       // 11974
            /**                                                                                                        // 11975
             * Determines the schema and options to utilize for sub-objects within this object.                        // 11976
             *                                                                                                         // 11977
             * @param propertyId                                                                                       // 11978
             * @param callback                                                                                         // 11979
             */                                                                                                        // 11980
            resolvePropertySchemaOptions: function(propertyId, callback)                                               // 11981
            {                                                                                                          // 11982
                var _this = this;                                                                                      // 11983
                                                                                                                       // 11984
                var propertySchema = null;                                                                             // 11985
                if (_this.schema && _this.schema.properties && _this.schema.properties[propertyId]) {                  // 11986
                    propertySchema = _this.schema.properties[propertyId];                                              // 11987
                }                                                                                                      // 11988
                var propertyOptions = {};                                                                              // 11989
                if (_this.options && _this.options.fields && _this.options.fields[propertyId]) {                       // 11990
                    propertyOptions = _this.options.fields[propertyId];                                                // 11991
                }                                                                                                      // 11992
                                                                                                                       // 11993
                // handle $ref                                                                                         // 11994
                if (propertySchema && propertySchema["$ref"])                                                          // 11995
                {                                                                                                      // 11996
                    var referenceId = propertySchema["$ref"];                                                          // 11997
                                                                                                                       // 11998
                    var topField = this;                                                                               // 11999
                    var fieldChain = [topField];                                                                       // 12000
                    while (topField.parent)                                                                            // 12001
                    {                                                                                                  // 12002
                        topField = topField.parent;                                                                    // 12003
                        fieldChain.push(topField);                                                                     // 12004
                    }                                                                                                  // 12005
                                                                                                                       // 12006
                    Alpaca.loadRefSchemaOptions(topField, referenceId, function(propertySchema, propertyOptions) {     // 12007
                                                                                                                       // 12008
                        // walk the field chain to see if we have any circularity                                      // 12009
                        var refCount = 0;                                                                              // 12010
                        for (var i = 0; i < fieldChain.length; i++)                                                    // 12011
                        {                                                                                              // 12012
                            if (fieldChain[i].schema && fieldChain[i].schema.id === referenceId)                       // 12013
                            {                                                                                          // 12014
                                refCount++;                                                                            // 12015
                            }                                                                                          // 12016
                        }                                                                                              // 12017
                                                                                                                       // 12018
                        var circular = (refCount > 1);                                                                 // 12019
                                                                                                                       // 12020
                        if (propertySchema)                                                                            // 12021
                        {                                                                                              // 12022
                            propertySchema = Alpaca.copyOf(propertySchema);                                            // 12023
                            delete propertySchema.id;                                                                  // 12024
                        }                                                                                              // 12025
                                                                                                                       // 12026
                        if (propertyOptions)                                                                           // 12027
                        {                                                                                              // 12028
                            propertyOptions = Alpaca.copyOf(propertyOptions);                                          // 12029
                        }                                                                                              // 12030
                                                                                                                       // 12031
                        callback(propertySchema, propertyOptions, circular);                                           // 12032
                    });                                                                                                // 12033
                }                                                                                                      // 12034
                else                                                                                                   // 12035
                {                                                                                                      // 12036
                    callback(propertySchema, propertyOptions);                                                         // 12037
                }                                                                                                      // 12038
            },                                                                                                         // 12039
                                                                                                                       // 12040
            /**                                                                                                        // 12041
             * Removes child                                                                                           // 12042
             *                                                                                                         // 12043
             * @param {String} id the alpaca field id of the field to be removed                                       // 12044
             */                                                                                                        // 12045
            removeItem: function(id)                                                                                   // 12046
            {                                                                                                          // 12047
                this.children = $.grep(this.children, function(val, index) {                                           // 12048
                    return (val.getId() != id);                                                                        // 12049
                });                                                                                                    // 12050
                                                                                                                       // 12051
                var childField = this.childrenById[id];                                                                // 12052
                                                                                                                       // 12053
                delete this.childrenById[id];                                                                          // 12054
                if (childField.propertyId)                                                                             // 12055
                {                                                                                                      // 12056
                    delete this.childrenByPropertyId[childField.propertyId];                                           // 12057
                }                                                                                                      // 12058
                                                                                                                       // 12059
                childField.destroy();                                                                                  // 12060
                                                                                                                       // 12061
                this.renderValidationState();                                                                          // 12062
                                                                                                                       // 12063
                // trigger update handler                                                                              // 12064
                this.triggerUpdate();                                                                                  // 12065
            },                                                                                                         // 12066
                                                                                                                       // 12067
            /**                                                                                                        // 12068
             * Adds a child item.                                                                                      // 12069
             *                                                                                                         // 12070
             * @param {String} propertyId Child field property ID.                                                     // 12071
             * @param {Object} itemSchema schema                                                                       // 12072
             * @param {Object} fieldOptions Child field options.                                                       // 12073
             * @param {Any} value Child field value                                                                    // 12074
             * @param {String} insertAfterId Location where the child item will be inserted.                           // 12075
             * @param [Boolean] isDynamicSubItem whether this item is being dynamically created (after first render)   // 12076
             * @param [Function} postRenderCallback called once the item has been added                                // 12077
             */                                                                                                        // 12078
            addItem: function(propertyId, itemSchema, itemOptions, itemData, insertAfterId, isDynamicSubItem, postRenderCallback) {
                var _this = this;                                                                                      // 12080
                                                                                                                       // 12081
                var containerElem = _this.renderItemContainer(insertAfterId, this, propertyId);                        // 12082
                containerElem.alpaca({                                                                                 // 12083
                    "data" : itemData,                                                                                 // 12084
                    "options": itemOptions,                                                                            // 12085
                    "schema" : itemSchema,                                                                             // 12086
                    "view" : this.view.id ? this.view.id : this.view,                                                  // 12087
                    "connector": this.connector,                                                                       // 12088
                    "error": function(err)                                                                             // 12089
                    {                                                                                                  // 12090
                        _this.destroy();                                                                               // 12091
                                                                                                                       // 12092
                        _this.errorCallback.call(_this, err);                                                          // 12093
                    },                                                                                                 // 12094
                    "notTopLevel":true,                                                                                // 12095
                    "isDynamicCreation": (isDynamicSubItem || this.isDynamicCreation),                                 // 12096
                    "render" : function(fieldControl, cb) {                                                            // 12097
                        // render                                                                                      // 12098
                        fieldControl.parent = _this;                                                                   // 12099
                        // add the property Id                                                                         // 12100
                        fieldControl.propertyId = propertyId;                                                          // 12101
                        // setup item path                                                                             // 12102
                        if (_this.path != "/") {                                                                       // 12103
                            fieldControl.path = _this.path + "/" + propertyId;                                         // 12104
                        } else {                                                                                       // 12105
                            fieldControl.path = _this.path + propertyId;                                               // 12106
                        }                                                                                              // 12107
                        fieldControl.render(null, function() {                                                         // 12108
                                                                                                                       // 12109
                            containerElem.attr("id", fieldControl.getId() + "-item-container");                        // 12110
                            containerElem.attr("alpaca-id", fieldControl.getId());                                     // 12111
                            containerElem.addClass("alpaca-fieldset-item-container");                                  // 12112
                            // remember the control                                                                    // 12113
                            if (Alpaca.isEmpty(insertAfterId)) {                                                       // 12114
                                _this.addChild(fieldControl);                                                          // 12115
                            } else {                                                                                   // 12116
                                var index = _this.getIndex(insertAfterId);                                             // 12117
                                if (index != -1) {                                                                     // 12118
                                    _this.addChild(fieldControl, index + 1);                                           // 12119
                                } else {                                                                               // 12120
                                    _this.addChild(fieldControl);                                                      // 12121
                                }                                                                                      // 12122
                            }                                                                                          // 12123
                            if (insertAfterId) {                                                                       // 12124
                                _this.renderValidationState();                                                         // 12125
                            }                                                                                          // 12126
                                                                                                                       // 12127
                            // if not empty, mark the "last" and "first" dom elements in the list                      // 12128
                            if ($(containerElem).siblings().addBack().length > 0)                                      // 12129
                            {                                                                                          // 12130
                                $(containerElem).parent().removeClass("alpaca-fieldset-items-container-empty");        // 12131
                                                                                                                       // 12132
                                $(containerElem).siblings().addBack().removeClass("alpaca-item-container-first");      // 12133
                                $(containerElem).siblings().addBack().removeClass("alpaca-item-container-last");       // 12134
                                $(containerElem).siblings().addBack().first().addClass("alpaca-item-container-first"); // 12135
                                $(containerElem).siblings().addBack().last().addClass("alpaca-item-container-last");   // 12136
                            }                                                                                          // 12137
                                                                                                                       // 12138
                            // store key on dom element                                                                // 12139
                            $(containerElem).attr("data-alpaca-item-container-item-key", propertyId);                  // 12140
                                                                                                                       // 12141
                            // trigger update on the parent array                                                      // 12142
                            _this.triggerUpdate();                                                                     // 12143
                                                                                                                       // 12144
                            if (cb)                                                                                    // 12145
                            {                                                                                          // 12146
                                cb();                                                                                  // 12147
                            }                                                                                          // 12148
                                                                                                                       // 12149
                        });                                                                                            // 12150
                    },                                                                                                 // 12151
                    "postRender": function(control) {                                                                  // 12152
                        if (postRenderCallback)                                                                        // 12153
                        {                                                                                              // 12154
                            postRenderCallback(control);                                                               // 12155
                        }                                                                                              // 12156
                    }                                                                                                  // 12157
                });                                                                                                    // 12158
            },                                                                                                         // 12159
                                                                                                                       // 12160
            /**                                                                                                        // 12161
             * @see Alpaca.ContainerField#renderItems                                                                  // 12162
             */                                                                                                        // 12163
            renderItems: function(onSuccess) {                                                                         // 12164
                                                                                                                       // 12165
                var _this = this;                                                                                      // 12166
                                                                                                                       // 12167
                // we keep a map of all of the properties in our original data object                                  // 12168
                // as we render elements out of the schema, we remove from the dataProperties map                      // 12169
                // whatever is leftover are the data properties that were NOT rendered because they were not part      // 12170
                // of the schema                                                                                       // 12171
                // we use this for debugging                                                                           // 12172
                var extraDataProperties = {};                                                                          // 12173
                for (var dataKey in _this.data) {                                                                      // 12174
                    extraDataProperties[dataKey] = dataKey;                                                            // 12175
                }                                                                                                      // 12176
                                                                                                                       // 12177
                var properties = _this.data;                                                                           // 12178
                if (_this.schema && _this.schema.properties) {                                                         // 12179
                    properties = _this.schema.properties;                                                              // 12180
                }                                                                                                      // 12181
                                                                                                                       // 12182
                var cf = function()                                                                                    // 12183
                {                                                                                                      // 12184
                    // If the schema and the data line up perfectly, then there will be no properties in the data that are
                    // not also in the schema, and thus, extraDataProperties will be empty.                            // 12186
                    //                                                                                                 // 12187
                    // On the other hand, if there are some properties in data that were not in schema, then they will // 12188
                    // remain in extraDataProperties and we can inform developers for debugging purposes               // 12189
                    //                                                                                                 // 12190
                    var extraDataKeys = [];                                                                            // 12191
                    for (var extraDataKey in extraDataProperties) {                                                    // 12192
                        extraDataKeys.push(extraDataKey);                                                              // 12193
                    }                                                                                                  // 12194
                    if (extraDataKeys.length > 0) {                                                                    // 12195
                        Alpaca.logDebug("There were " + extraDataKeys.length + " extra data keys that were not part of the schema " + JSON.stringify(extraDataKeys));
                    }                                                                                                  // 12197
                                                                                                                       // 12198
                    // support for dependencies                                                                        // 12199
                                                                                                                       // 12200
                    // walk through all properties and allow each to determine whether it should show based on its dependencies.
                    // if properties do not have dependencies, they show by default.                                   // 12202
                    for (var propertyId in properties)                                                                 // 12203
                    {                                                                                                  // 12204
                        _this.showOrHidePropertyBasedOnDependencies(propertyId);                                       // 12205
                    }                                                                                                  // 12206
                                                                                                                       // 12207
                    // bind event handlers to handle updates to field state                                            // 12208
                    for (var propertyId in properties)                                                                 // 12209
                    {                                                                                                  // 12210
                        _this.bindDependencyFieldUpdateEvent(propertyId);                                              // 12211
                    }                                                                                                  // 12212
                                                                                                                       // 12213
                    _this.renderValidationState();                                                                     // 12214
                                                                                                                       // 12215
                    if (onSuccess)                                                                                     // 12216
                    {                                                                                                  // 12217
                        onSuccess();                                                                                   // 12218
                    }                                                                                                  // 12219
                };                                                                                                     // 12220
                                                                                                                       // 12221
                // each property in the object can have a different schema and options so we need to process           // 12222
                // asynchronously and wait for all to complete                                                         // 12223
                                                                                                                       // 12224
                // figure out the total count of properties that we need to iterate through                            // 12225
                var total = 0;                                                                                         // 12226
                for (var propertyId in properties)                                                                     // 12227
                {                                                                                                      // 12228
                    total++;                                                                                           // 12229
                }                                                                                                      // 12230
                                                                                                                       // 12231
                // collect all the property ids since we'll churn through them by property key                         // 12232
                var propertyIds = [];                                                                                  // 12233
                for (var propertyId in properties)                                                                     // 12234
                {                                                                                                      // 12235
                    propertyIds.push(propertyId);                                                                      // 12236
                }                                                                                                      // 12237
                                                                                                                       // 12238
                // workhorse function for a single property                                                            // 12239
                var handleProperty = function(index)                                                                   // 12240
                {                                                                                                      // 12241
                    if (index === total)                                                                               // 12242
                    {                                                                                                  // 12243
                        // all done, fire completion function                                                          // 12244
                        cf();                                                                                          // 12245
                                                                                                                       // 12246
                        return;                                                                                        // 12247
                    }                                                                                                  // 12248
                                                                                                                       // 12249
                    var propertyId = propertyIds[index];                                                               // 12250
                                                                                                                       // 12251
                    var itemData = null;                                                                               // 12252
                    if (_this.data)                                                                                    // 12253
                    {                                                                                                  // 12254
                        itemData = _this.data[propertyId];                                                             // 12255
                    }                                                                                                  // 12256
                                                                                                                       // 12257
                    // only allow this if we have data, otherwise we end up with circular reference                    // 12258
                    _this.resolvePropertySchemaOptions(propertyId, function(schema, options, circular) {               // 12259
                                                                                                                       // 12260
                        // we only allow addition if the resolved schema isn't circularly referenced                   // 12261
                        // or the schema is optional                                                                   // 12262
                        if (circular)                                                                                  // 12263
                        {                                                                                              // 12264
                            return Alpaca.throwErrorWithCallback("Circular reference detected for schema: " + schema, _this.errorCallback);
                        }                                                                                              // 12266
                                                                                                                       // 12267
                        if (!schema)                                                                                   // 12268
                        {                                                                                              // 12269
                            Alpaca.logError("Unable to resolve schema for property: " + propertyId);                   // 12270
                        }                                                                                              // 12271
                                                                                                                       // 12272
                        _this.addItem(propertyId, schema, options, itemData, null, false, function(addedItemControl) { // 12273
                                                                                                                       // 12274
                            // remove from extraDataProperties helper                                                  // 12275
                            delete extraDataProperties[propertyId];                                                    // 12276
                                                                                                                       // 12277
                            handleProperty(index + 1);                                                                 // 12278
                        });                                                                                            // 12279
                    });                                                                                                // 12280
                };                                                                                                     // 12281
                handleProperty(0);                                                                                     // 12282
            },                                                                                                         // 12283
                                                                                                                       // 12284
                                                                                                                       // 12285
            ///////////////////////////////////////////////////////////////////////////////////////////////////////    // 12286
            //                                                                                                         // 12287
            // DEPENDENCIES                                                                                            // 12288
            //                                                                                                         // 12289
            ///////////////////////////////////////////////////////////////////////////////////////////////////////    // 12290
                                                                                                                       // 12291
            /**                                                                                                        // 12292
             * Shows or hides a property's field based on how its dependencies evaluate.                               // 12293
             * If a property doesn't have dependencies, this no-ops.                                                   // 12294
             *                                                                                                         // 12295
             * @param propertyId                                                                                       // 12296
             */                                                                                                        // 12297
            showOrHidePropertyBasedOnDependencies: function(propertyId)                                                // 12298
            {                                                                                                          // 12299
                var self = this;                                                                                       // 12300
                                                                                                                       // 12301
                var item = this.childrenByPropertyId[propertyId];                                                      // 12302
                if (!item)                                                                                             // 12303
                {                                                                                                      // 12304
                    return Alpaca.throwErrorWithCallback("Missing property: " + propertyId, self.errorCallback);       // 12305
                }                                                                                                      // 12306
                                                                                                                       // 12307
                var valid = this.determineAllDependenciesValid(propertyId);                                            // 12308
                if (valid)                                                                                             // 12309
                {                                                                                                      // 12310
                    item.show();                                                                                       // 12311
                                                                                                                       // 12312
                    item.onDependentReveal();                                                                          // 12313
                }                                                                                                      // 12314
                else                                                                                                   // 12315
                {                                                                                                      // 12316
                    item.hide();                                                                                       // 12317
                                                                                                                       // 12318
                    item.onDependentConceal();                                                                         // 12319
                }                                                                                                      // 12320
            },                                                                                                         // 12321
                                                                                                                       // 12322
            /**                                                                                                        // 12323
             * Determines whether the dependencies for a property pass.                                                // 12324
             *                                                                                                         // 12325
             * @param propertyId                                                                                       // 12326
             */                                                                                                        // 12327
            determineAllDependenciesValid: function(propertyId)                                                        // 12328
            {                                                                                                          // 12329
                var self = this;                                                                                       // 12330
                                                                                                                       // 12331
                var item = this.childrenByPropertyId[propertyId];                                                      // 12332
                if (!item)                                                                                             // 12333
                {                                                                                                      // 12334
                    return Alpaca.throwErrorWithCallback("Missing property: " + propertyId, self.errorCallback);       // 12335
                }                                                                                                      // 12336
                                                                                                                       // 12337
                var itemDependencies = item.schema.dependencies;                                                       // 12338
                if (!itemDependencies)                                                                                 // 12339
                {                                                                                                      // 12340
                    // no dependencies, so yes, we pass                                                                // 12341
                    return true;                                                                                       // 12342
                }                                                                                                      // 12343
                                                                                                                       // 12344
                var valid = true;                                                                                      // 12345
                if (Alpaca.isString(itemDependencies))                                                                 // 12346
                {                                                                                                      // 12347
                    valid = self.determineSingleDependencyValid(propertyId, itemDependencies);                         // 12348
                }                                                                                                      // 12349
                else if (Alpaca.isArray(itemDependencies))                                                             // 12350
                {                                                                                                      // 12351
                    $.each(itemDependencies, function(index, value) {                                                  // 12352
                        valid = valid && self.determineSingleDependencyValid(propertyId, value);                       // 12353
                    });                                                                                                // 12354
                }                                                                                                      // 12355
                                                                                                                       // 12356
                return valid;                                                                                          // 12357
            },                                                                                                         // 12358
                                                                                                                       // 12359
            /**                                                                                                        // 12360
             * Binds field updates to any field dependencies.                                                          // 12361
             *                                                                                                         // 12362
             * @param propertyId                                                                                       // 12363
             */                                                                                                        // 12364
            bindDependencyFieldUpdateEvent: function(propertyId)                                                       // 12365
            {                                                                                                          // 12366
                var self = this;                                                                                       // 12367
                                                                                                                       // 12368
                var item = this.childrenByPropertyId[propertyId];                                                      // 12369
                if (!item)                                                                                             // 12370
                {                                                                                                      // 12371
                    return Alpaca.throwErrorWithCallback("Missing property: " + propertyId, self.errorCallback);       // 12372
                }                                                                                                      // 12373
                                                                                                                       // 12374
                var itemDependencies = item.schema.dependencies;                                                       // 12375
                if (!itemDependencies)                                                                                 // 12376
                {                                                                                                      // 12377
                    // no dependencies, so simple return                                                               // 12378
                    return true;                                                                                       // 12379
                }                                                                                                      // 12380
                                                                                                                       // 12381
                // helper function                                                                                     // 12382
                var bindEvent = function(propertyId, dependencyPropertyId)                                             // 12383
                {                                                                                                      // 12384
                    var dependentField = self.childrenByPropertyId[dependencyPropertyId];                              // 12385
                    if (dependentField)                                                                                // 12386
                    {                                                                                                  // 12387
                        dependentField.getEl().bind("fieldupdate", function(event) {                                   // 12388
                                                                                                                       // 12389
                            // the property "dependencyPropertyId" changed and affects target property ("propertyId")  // 12390
                                                                                                                       // 12391
                            // update UI state for target property                                                     // 12392
                            self.showOrHidePropertyBasedOnDependencies(propertyId);                                    // 12393
                                                                                                                       // 12394
                            // look for any other sibling fields that depend on new state for target property          // 12395
                            for (var targetPropertyId in self.schema.properties)                                       // 12396
                            {                                                                                          // 12397
                                var def = self.schema.properties[targetPropertyId];                                    // 12398
                                if (def.dependencies)                                                                  // 12399
                                {                                                                                      // 12400
                                    var targetField = self.childrenByPropertyId[targetPropertyId];                     // 12401
                                                                                                                       // 12402
                                    if (Alpaca.isString(def.dependencies) && def.dependencies == propertyId)           // 12403
                                    {                                                                                  // 12404
                                        self.showOrHidePropertyBasedOnDependencies(targetPropertyId);                  // 12405
                                        targetField.triggerUpdate();                                                   // 12406
                                    }                                                                                  // 12407
                                    else if (Alpaca.isArray(def.dependencies))                                         // 12408
                                    {                                                                                  // 12409
                                        $.each(def.dependencies, function(index, value) {                              // 12410
                                            if (value == propertyId)                                                   // 12411
                                            {                                                                          // 12412
                                                self.showOrHidePropertyBasedOnDependencies(targetPropertyId);          // 12413
                                                targetField.triggerUpdate();                                           // 12414
                                            }                                                                          // 12415
                                        });                                                                            // 12416
                                    }                                                                                  // 12417
                                }                                                                                      // 12418
                            }                                                                                          // 12419
                        });                                                                                            // 12420
                    }                                                                                                  // 12421
                };                                                                                                     // 12422
                                                                                                                       // 12423
                if (Alpaca.isString(itemDependencies))                                                                 // 12424
                {                                                                                                      // 12425
                    bindEvent(propertyId, itemDependencies);                                                           // 12426
                }                                                                                                      // 12427
                else if (Alpaca.isArray(itemDependencies))                                                             // 12428
                {                                                                                                      // 12429
                    $.each(itemDependencies, function(index, value) {                                                  // 12430
                        bindEvent(propertyId, value);                                                                  // 12431
                    });                                                                                                // 12432
                }                                                                                                      // 12433
            },                                                                                                         // 12434
                                                                                                                       // 12435
            /**                                                                                                        // 12436
             * Checks whether a single property's dependency is satisfied or not.                                      // 12437
             *                                                                                                         // 12438
             * In order to be valid, the property's dependency must exist (JSON schema) and optionally must satisfy    // 12439
             * any dependency options (value matches using an AND).  Finally, the dependency field must be showing.    // 12440
             *                                                                                                         // 12441
             * @param {Object} propertyId Field property id.                                                           // 12442
             * @param {Object} dependentOnPropertyId Property id of the dependency field.                              // 12443
             *                                                                                                         // 12444
             * @returns {Boolean} True if all dependencies have been satisfied and the field needs to be shown,        // 12445
             * false otherwise.                                                                                        // 12446
             */                                                                                                        // 12447
            determineSingleDependencyValid: function(propertyId, dependentOnPropertyId)                                // 12448
            {                                                                                                          // 12449
                // checks to see if the referenced "dependent-on" property has a value                                 // 12450
                // basic JSON-schema supports this (if it has ANY value, it is considered valid                        // 12451
                // special consideration for boolean false                                                             // 12452
                var child = this.childrenByPropertyId[dependentOnPropertyId];                                          // 12453
                if (!child)                                                                                            // 12454
                {                                                                                                      // 12455
                    // no dependent-on field found, return false                                                       // 12456
                    return false;                                                                                      // 12457
                }                                                                                                      // 12458
                                                                                                                       // 12459
                // assume it isn't valid                                                                               // 12460
                var valid = false;                                                                                     // 12461
                                                                                                                       // 12462
                // go one of two directions depending on whether we have conditional dependencies or not               // 12463
                var conditionalDependencies = this.childrenByPropertyId[propertyId].options.dependencies;              // 12464
                if (!conditionalDependencies || conditionalDependencies.length === 0)                                  // 12465
                {                                                                                                      // 12466
                    //                                                                                                 // 12467
                    // BASIC DEPENENDENCY CHECKING (CORE JSON SCHEMA)                                                  // 12468
                    //                                                                                                 // 12469
                                                                                                                       // 12470
                    // special case: if the field is a boolean field and we have no conditional dependency checking,   // 12471
                    // then we set valid = false if the field data is a boolean false                                  // 12472
                    if (child.getType() === "boolean" && !this.childrenByPropertyId[propertyId].options.dependencies && !child.data)
                    {                                                                                                  // 12474
                        valid = false;                                                                                 // 12475
                    }                                                                                                  // 12476
                    else                                                                                               // 12477
                    {                                                                                                  // 12478
                        valid = !Alpaca.isValEmpty(child.data);                                                        // 12479
                    }                                                                                                  // 12480
                }                                                                                                      // 12481
                else                                                                                                   // 12482
                {                                                                                                      // 12483
                    //                                                                                                 // 12484
                    // CONDITIONAL DEPENDENCY CHECKING (ALPACA EXTENSION VIA OPTIONS)                                  // 12485
                    //                                                                                                 // 12486
                                                                                                                       // 12487
                    // Alpaca extends JSON schema by allowing dependencies to trigger only for specific values on the  // 12488
                    // dependent fields.  If options are specified to define this, we walk through and perform an      // 12489
                    // AND operation across any fields                                                                 // 12490
                                                                                                                       // 12491
                    // do some data sanity cleanup                                                                     // 12492
                    var dependentOnField = this.childrenByPropertyId[dependentOnPropertyId];                           // 12493
                    var dependentOnData = dependentOnField.data;                                                       // 12494
                    if (dependentOnField.getType() === "boolean" && !dependentOnData) {                                // 12495
                        dependentOnData = false                                                                        // 12496
                    }                                                                                                  // 12497
                                                                                                                       // 12498
                                                                                                                       // 12499
                    // if the option is a function, then evaluate the function to determine whether to show            // 12500
                    // the function evaluates regardless of whether the schema-based fallback determined we should show
                    if (!Alpaca.isEmpty(conditionalDependencies[dependentOnPropertyId]) && Alpaca.isFunction(conditionalDependencies[dependentOnPropertyId]))
                    {                                                                                                  // 12503
                        valid = conditionalDependencies[dependentOnPropertyId].call(this, dependentOnData);            // 12504
                    }                                                                                                  // 12505
                    else                                                                                               // 12506
                    {                                                                                                  // 12507
                        // assume true                                                                                 // 12508
                        valid = true;                                                                                  // 12509
                                                                                                                       // 12510
                        // the option is an array or an object                                                         // 12511
                        if (Alpaca.isArray(conditionalDependencies[dependentOnPropertyId])) {                          // 12512
                                                                                                                       // 12513
                            // check array value                                                                       // 12514
                            if (conditionalDependencies[dependentOnPropertyId] && $.inArray(dependentOnData, conditionalDependencies[dependentOnPropertyId]) == -1)
                            {                                                                                          // 12516
                                valid = false;                                                                         // 12517
                            }                                                                                          // 12518
                        }                                                                                              // 12519
                        else                                                                                           // 12520
                        {                                                                                              // 12521
                            // check object value                                                                      // 12522
                            if (!Alpaca.isEmpty(conditionalDependencies[dependentOnPropertyId]) && conditionalDependencies[dependentOnPropertyId] != dependentOnData)
                            {                                                                                          // 12524
                                valid = false;                                                                         // 12525
                            }                                                                                          // 12526
                        }                                                                                              // 12527
                    }                                                                                                  // 12528
                }                                                                                                      // 12529
                                                                                                                       // 12530
                //                                                                                                     // 12531
                // NESTED HIDDENS DEPENDENCY HIDES (ALPACA EXTENSION)                                                  // 12532
                //                                                                                                     // 12533
                                                                                                                       // 12534
                // final check: only set valid if the dependentOnPropertyId is showing                                 // 12535
                var dependencyProperty = this.childrenByPropertyId[dependentOnPropertyId];                             // 12536
                if (dependencyProperty && dependencyProperty.isHidden())                                               // 12537
                {                                                                                                      // 12538
                    valid = false;                                                                                     // 12539
                }                                                                                                      // 12540
                                                                                                                       // 12541
                return valid;                                                                                          // 12542
            },                                                                                                         // 12543
                                                                                                                       // 12544
                                                                                                                       // 12545
                                                                                                                       // 12546
                                                                                                                       // 12547
            ///////////////////////////////////////////////////////////////////////////////////////////////////////    // 12548
            //                                                                                                         // 12549
            // WIZARD                                                                                                  // 12550
            //                                                                                                         // 12551
            ///////////////////////////////////////////////////////////////////////////////////////////////////////    // 12552
                                                                                                                       // 12553
                                                                                                                       // 12554
                                                                                                                       // 12555
            /**                                                                                                        // 12556
             * Renders a template-based wizard.                                                                        // 12557
             */                                                                                                        // 12558
            wizard: function() {                                                                                       // 12559
                                                                                                                       // 12560
                var _this = this;                                                                                      // 12561
                                                                                                                       // 12562
                var element = this.outerEl;                                                                            // 12563
                var steps = $('.alpaca-wizard-step', element);                                                         // 12564
                var count = steps.size();                                                                              // 12565
                                                                                                                       // 12566
                this.totalSteps = count;                                                                               // 12567
                                                                                                                       // 12568
                var stepTitles = [];                                                                                   // 12569
                if (this.wizardConfigs.stepTitles) {                                                                   // 12570
                    stepTitles = this.wizardConfigs.stepTitles;                                                        // 12571
                } else {                                                                                               // 12572
                    // Prepare step titles                                                                             // 12573
                    steps.each(function(i) {                                                                           // 12574
                        var stepTitle = {                                                                              // 12575
                            "title": "",                                                                               // 12576
                            "description": ""                                                                          // 12577
                        };                                                                                             // 12578
                        if ($('.alpaca-wizard-step-title', this)) {                                                    // 12579
                            stepTitle.title = $('.alpaca-wizard-step-title', this).html();                             // 12580
                            $('.alpaca-wizard-step-title', this).hide();                                               // 12581
                        }                                                                                              // 12582
                        if ($('.alpaca-wizard-step-description', this)) {                                              // 12583
                            stepTitle.description = $('.alpaca-wizard-step-description', this).html();                 // 12584
                            $('.alpaca-wizard-step-description', this).hide();                                         // 12585
                        }                                                                                              // 12586
                        stepTitles.push(stepTitle);                                                                    // 12587
                    });                                                                                                // 12588
                }                                                                                                      // 12589
                var wizardStatusBarElement = this._renderWizardStatusBar(stepTitles);                                  // 12590
                if (wizardStatusBarElement) {                                                                          // 12591
                    $(element).before(wizardStatusBarElement);                                                         // 12592
                }                                                                                                      // 12593
                                                                                                                       // 12594
                steps.each(function(i) {                                                                               // 12595
                                                                                                                       // 12596
                    var wizardStepTargetId = $(this).attr("id");                                                       // 12597
                                                                                                                       // 12598
                    var stepId = 'step' + i;                                                                           // 12599
                    var wizardStepTemplateDescriptor = _this.view.getTemplateDescriptor("wizardStep");                 // 12600
                    if (wizardStepTemplateDescriptor) {                                                                // 12601
                        var wizardStepElement = _this.view.tmpl(wizardStepTemplateDescriptor, {});                     // 12602
                        wizardStepElement.attr("id", stepId);                                                          // 12603
                        $(this).wrap(wizardStepElement);                                                               // 12604
                    }                                                                                                  // 12605
                                                                                                                       // 12606
                    var navBarId = stepId + '-nav-bar';                                                                // 12607
                    var wizardNavBarTemplateDescriptor = _this.view.getTemplateDescriptor("wizardNavBar");             // 12608
                    if (wizardNavBarTemplateDescriptor) {                                                              // 12609
                        var wizardNavBarElement = _this.view.tmpl(wizardNavBarTemplateDescriptor, {});                 // 12610
                        wizardNavBarElement.attr("id", navBarId);                                                      // 12611
                        wizardNavBarElement.addClass('alpaca-wizard-nav-bar');                                         // 12612
                        $(this).append(wizardNavBarElement);                                                           // 12613
                    }                                                                                                  // 12614
                                                                                                                       // 12615
                    // collect all of the stepBindings for this step                                                   // 12616
                    var stepBindings = {};                                                                             // 12617
                    var bindings = _this.view.getLayout().bindings;                                                    // 12618
                    for (var fieldId in bindings)                                                                      // 12619
                    {                                                                                                  // 12620
                        var bindingTargetId = bindings[fieldId];                                                       // 12621
                                                                                                                       // 12622
                        if (bindingTargetId == wizardStepTargetId)                                                     // 12623
                        {                                                                                              // 12624
                            stepBindings[fieldId] = wizardStepTargetId;                                                // 12625
                        }                                                                                              // 12626
                    }                                                                                                  // 12627
                                                                                                                       // 12628
                    var vFunc = function(stepCount, stepBindings)                                                      // 12629
                    {                                                                                                  // 12630
                        return function() {                                                                            // 12631
                                                                                                                       // 12632
                            var valid = true;                                                                          // 12633
                                                                                                                       // 12634
                            if (_this.wizardConfigs && _this.wizardConfigs.validation) {                               // 12635
                                                                                                                       // 12636
                                // if auto-wizard, process bindings one at a time                                      // 12637
                                if (stepBindings) {                                                                    // 12638
                                    $.each(stepBindings, function(propertyId, step) {                                  // 12639
                                        valid = valid & _this.childrenByPropertyId[propertyId].validate();             // 12640
                                        _this.childrenByPropertyId[propertyId].renderValidationState();                // 12641
                                    });                                                                                // 12642
                                }                                                                                      // 12643
                                                                                                                       // 12644
                            }                                                                                          // 12645
                                                                                                                       // 12646
                            return valid;                                                                              // 12647
                        };                                                                                             // 12648
                    }(i, stepBindings);                                                                                // 12649
                                                                                                                       // 12650
                    if (i === 0) {                                                                                     // 12651
                        _this._createNextButton(i, true, vFunc);                                                       // 12652
                        _this._selectStep(i);                                                                          // 12653
                    } else if (i == count - 1) {                                                                       // 12654
                        $("#step" + i).hide();                                                                         // 12655
                        _this._createPrevButton(i, false);                                                             // 12656
                        _this._createDoneButton(i, true, vFunc);                                                       // 12657
                    } else {                                                                                           // 12658
                        $("#step" + i).hide();                                                                         // 12659
                        _this._createPrevButton(i, false);                                                             // 12660
                        _this._createNextButton(i, true, vFunc);                                                       // 12661
                    }                                                                                                  // 12662
                });                                                                                                    // 12663
            },                                                                                                         // 12664
                                                                                                                       // 12665
            /**                                                                                                        // 12666
             * Renders a configuration-based wizard without a layout template.                                         // 12667
             */                                                                                                        // 12668
            autoWizard: function() {                                                                                   // 12669
                                                                                                                       // 12670
                var _this = this;                                                                                      // 12671
                                                                                                                       // 12672
                var totalSteps = this.wizardConfigs.steps;                                                             // 12673
                                                                                                                       // 12674
                if (!totalSteps) {                                                                                     // 12675
                    totalSteps = 1;                                                                                    // 12676
                }                                                                                                      // 12677
                                                                                                                       // 12678
                this.totalSteps = totalSteps;                                                                          // 12679
                                                                                                                       // 12680
                var stepBindings = this.wizardConfigs.bindings;                                                        // 12681
                                                                                                                       // 12682
                if (!stepBindings) {                                                                                   // 12683
                    stepBindings = {};                                                                                 // 12684
                }                                                                                                      // 12685
                                                                                                                       // 12686
                for (var propertyId in this.childrenByPropertyId) {                                                    // 12687
                    if (!stepBindings.hasOwnProperty(propertyId)) {                                                    // 12688
                        stepBindings[propertyId] = 1;                                                                  // 12689
                    }                                                                                                  // 12690
                }                                                                                                      // 12691
                                                                                                                       // 12692
                for (var i = 0; i < totalSteps; i++) {                                                                 // 12693
                    var step = i + 1;                                                                                  // 12694
                    var tmpArray = [];                                                                                 // 12695
                    for (var propertyId in stepBindings) {                                                             // 12696
                        if (stepBindings[propertyId] == step) {                                                        // 12697
                            if (this.childrenByPropertyId && this.childrenByPropertyId[propertyId]) {                  // 12698
                                tmpArray.push("#" + this.childrenByPropertyId[propertyId].container.attr('id'));       // 12699
                            }                                                                                          // 12700
                        }                                                                                              // 12701
                    }                                                                                                  // 12702
                                                                                                                       // 12703
                    var stepId = 'step' + i;                                                                           // 12704
                    var wizardStepTemplateDescriptor = this.view.getTemplateDescriptor("wizardStep");                  // 12705
                    if (wizardStepTemplateDescriptor) {                                                                // 12706
                        var wizardStepElement = _this.view.tmpl(wizardStepTemplateDescriptor, {});                     // 12707
                        wizardStepElement.attr("id", stepId);                                                          // 12708
                        $(tmpArray.join(',')).wrapAll(wizardStepElement);                                              // 12709
                    }                                                                                                  // 12710
                                                                                                                       // 12711
                    var navBarId = stepId + '-nav-bar';                                                                // 12712
                    var wizardNavBarTemplateDescriptor = this.view.getTemplateDescriptor("wizardNavBar");              // 12713
                    if (wizardNavBarTemplateDescriptor) {                                                              // 12714
                        var wizardNavBarElement = _this.view.tmpl(wizardNavBarTemplateDescriptor, {});                 // 12715
                        wizardNavBarElement.attr("id", navBarId);                                                      // 12716
                        wizardNavBarElement.addClass('alpaca-wizard-nav-bar');                                         // 12717
                        $('#' + stepId, this.outerEl).append(wizardNavBarElement);                                     // 12718
                    }                                                                                                  // 12719
                }                                                                                                      // 12720
                                                                                                                       // 12721
                var wizardStatusBarElement = this._renderWizardStatusBar(this.wizardConfigs.stepTitles);               // 12722
                if (wizardStatusBarElement) {                                                                          // 12723
                    wizardStatusBarElement.prependTo(this.fieldContainer);                                             // 12724
                }                                                                                                      // 12725
                                                                                                                       // 12726
                for (var i = 0; i < totalSteps; i++) {                                                                 // 12727
                                                                                                                       // 12728
                    var vFunc = function(stepCount, stepBindings)                                                      // 12729
                    {                                                                                                  // 12730
                        return function() {                                                                            // 12731
                                                                                                                       // 12732
                            var valid = true;                                                                          // 12733
                                                                                                                       // 12734
                            if (_this.view && _this.wizardConfigs && _this.wizardConfigs.validation) {                 // 12735
                                                                                                                       // 12736
                                // if auto-wizard, process bindings one at a time                                      // 12737
                                if (stepBindings) {                                                                    // 12738
                                    $.each(stepBindings, function(propertyId, step) {                                  // 12739
                                        if (step == stepCount + 1 && valid) {                                          // 12740
                                            valid = _this.childrenByPropertyId[propertyId].validate();                 // 12741
                                            _this.childrenByPropertyId[propertyId].validate();                         // 12742
                                        }                                                                              // 12743
                                    });                                                                                // 12744
                                }                                                                                      // 12745
                            }                                                                                          // 12746
                                                                                                                       // 12747
                            return valid;                                                                              // 12748
                                                                                                                       // 12749
                        };                                                                                             // 12750
                    }(i, stepBindings);                                                                                // 12751
                                                                                                                       // 12752
                                                                                                                       // 12753
                    if (i === 0) {                                                                                     // 12754
                        _this._createNextButton(i, false, vFunc);                                                      // 12755
                        _this._selectStep(i);                                                                          // 12756
                    } else if (i == totalSteps - 1) {                                                                  // 12757
                        $("#step" + i).hide();                                                                         // 12758
                        _this._createPrevButton(i, false);                                                             // 12759
                        _this._createDoneButton(i, true, vFunc);                                                       // 12760
                    } else {                                                                                           // 12761
                        $("#step" + i).hide();                                                                         // 12762
                        _this._createPrevButton(i, false);                                                             // 12763
                        _this._createNextButton(i, false, vFunc);                                                      // 12764
                    }                                                                                                  // 12765
                }                                                                                                      // 12766
            },                                                                                                         // 12767
                                                                                                                       // 12768
            /**                                                                                                        // 12769
             * Renders wizard status bar.                                                                              // 12770
             *                                                                                                         // 12771
             * @param {Object} stepTitles Step titles.                                                                 // 12772
             */                                                                                                        // 12773
            _renderWizardStatusBar: function(stepTitles) {                                                             // 12774
                                                                                                                       // 12775
                var _this = this;                                                                                      // 12776
                                                                                                                       // 12777
                var wizardStatusBar = this.wizardConfigs.statusBar;                                                    // 12778
                if (wizardStatusBar && stepTitles) {                                                                   // 12779
                    var wizardStatusBarTemplateDescriptor = this.view.getTemplateDescriptor("wizardStatusBar");        // 12780
                    if (wizardStatusBarTemplateDescriptor) {                                                           // 12781
                        var wizardStatusBarElement = _this.view.tmpl(wizardStatusBarTemplateDescriptor, {              // 12782
                            "id": this.getId() + "-wizard-status-bar",                                                 // 12783
                            "titles": stepTitles                                                                       // 12784
                        });                                                                                            // 12785
                        wizardStatusBarElement.addClass("alpaca-wizard-status-bar");                                   // 12786
                        this.getStyleInjection("wizardStatusBar",wizardStatusBarElement);                              // 12787
                        return wizardStatusBarElement;                                                                 // 12788
                    }                                                                                                  // 12789
                }                                                                                                      // 12790
            },                                                                                                         // 12791
                                                                                                                       // 12792
            /**                                                                                                        // 12793
             * Creates an "prev" button.                                                                               // 12794
             *                                                                                                         // 12795
             * @param {Integer} i Step number.                                                                         // 12796
             * @param [boolean] whether to add a clear div at the end                                                  // 12797
             * @param [validationFunction] function test whether the button should be allowed to proceed               // 12798
             */                                                                                                        // 12799
            _createPrevButton: function(i, clear, validationFunction) {                                                // 12800
                                                                                                                       // 12801
                // only apply validation if configured to do so                                                        // 12802
                if (this.wizardConfigs.buttons && this.wizardConfigs.buttons.prev) {                                   // 12803
                    if (!this.wizardConfigs.buttons.prev.validateOnClick) {                                            // 12804
                        validationFunction = null;                                                                     // 12805
                    }                                                                                                  // 12806
                }                                                                                                      // 12807
                                                                                                                       // 12808
                var stepName = "step" + i;                                                                             // 12809
                var _this = this;                                                                                      // 12810
                                                                                                                       // 12811
                var wizardPreButtonTemplateDescriptor = this.view.getTemplateDescriptor("wizardPreButton");            // 12812
                if (wizardPreButtonTemplateDescriptor) {                                                               // 12813
                    var wizardPreButtonElement = _this.view.tmpl(wizardPreButtonTemplateDescriptor, {});               // 12814
                    wizardPreButtonElement.attr("id", stepName + '-button-pre');                                       // 12815
                    wizardPreButtonElement.addClass("alpaca-wizard-button-pre");                                       // 12816
                    if (_this.buttonBeautifier) {                                                                      // 12817
                        _this.buttonBeautifier.call(_this, wizardPreButtonElement, this.wizardPreIcon,true );          // 12818
                    }                                                                                                  // 12819
                                                                                                                       // 12820
                    // when they click "prev", run validation function first to make sure they're allowed to proceed   // 12821
                    wizardPreButtonElement.click(function(stepName, stepCount, validationFunction) {                   // 12822
                                                                                                                       // 12823
                        return function() {                                                                            // 12824
                            var valid = true;                                                                          // 12825
                                                                                                                       // 12826
                            if (validationFunction)                                                                    // 12827
                            {                                                                                          // 12828
                                valid = validationFunction(stepName, stepCount);                                       // 12829
                            }                                                                                          // 12830
                                                                                                                       // 12831
                            if (valid) {                                                                               // 12832
                                $("#" + stepName).hide();                                                              // 12833
                                $("#step" + (i - 1)).show();                                                           // 12834
                                _this._selectStep(i - 1);                                                              // 12835
                                                                                                                       // 12836
                                // TODO: fire click handler?                                                           // 12837
                                if (_this.wizardConfigs.buttons.prev && _this.wizardConfigs.buttons.prev.onClick) {    // 12838
                                    _this.wizardConfigs.buttons.prev.onClick();                                        // 12839
                                }                                                                                      // 12840
                            }                                                                                          // 12841
                                                                                                                       // 12842
                            return false;                                                                              // 12843
                        };                                                                                             // 12844
                    }(stepName, i, validationFunction));                                                               // 12845
                                                                                                                       // 12846
                    $("#" + stepName + "-nav-bar").append(wizardPreButtonElement);                                     // 12847
                    if (clear) {                                                                                       // 12848
                        $("#" + stepName + "-nav-bar").parent().append("<div style='clear:both'></div>");              // 12849
                    }                                                                                                  // 12850
                }                                                                                                      // 12851
                                                                                                                       // 12852
            },                                                                                                         // 12853
                                                                                                                       // 12854
            /**                                                                                                        // 12855
             * Creates a "next" button.                                                                                // 12856
             *                                                                                                         // 12857
             * @param {Integer} i Step number.                                                                         // 12858
             * @param [boolean] whether to add a clear div at the end                                                  // 12859
             * @param [validationFunction] function test whether the button should be allowed to proceed               // 12860
             */                                                                                                        // 12861
            _createNextButton: function(i, clear, validationFunction) {                                                // 12862
                                                                                                                       // 12863
                // only apply validation if configured to do so                                                        // 12864
                if (this.wizardConfigs.buttons && this.wizardConfigs.buttons.next) {                                   // 12865
                    if (!this.wizardConfigs.buttons.next.validateOnClick) {                                            // 12866
                        validationFunction = null;                                                                     // 12867
                    }                                                                                                  // 12868
                }                                                                                                      // 12869
                                                                                                                       // 12870
                var stepName = "step" + i;                                                                             // 12871
                var _this = this;                                                                                      // 12872
                                                                                                                       // 12873
                var wizardNextButtonTemplateDescriptor = this.view.getTemplateDescriptor("wizardNextButton");          // 12874
                if (wizardNextButtonTemplateDescriptor) {                                                              // 12875
                    var wizardNextButtonElement = _this.view.tmpl(wizardNextButtonTemplateDescriptor, {});             // 12876
                    wizardNextButtonElement.attr("id", stepName + '-button-next');                                     // 12877
                    wizardNextButtonElement.addClass("alpaca-wizard-button-next");                                     // 12878
                    if (_this.buttonBeautifier) {                                                                      // 12879
                        _this.buttonBeautifier.call(_this, wizardNextButtonElement, this.wizardNextIcon,true );        // 12880
                    }                                                                                                  // 12881
                                                                                                                       // 12882
                    // when they click "next", run validation function first to make sure they're allowed to proceed   // 12883
                    wizardNextButtonElement.click(function(stepName, stepCount, validationFunction) {                  // 12884
                                                                                                                       // 12885
                        return function() {                                                                            // 12886
                            var valid = true;                                                                          // 12887
                                                                                                                       // 12888
                            if (validationFunction)                                                                    // 12889
                            {                                                                                          // 12890
                                valid = validationFunction(stepName, stepCount);                                       // 12891
                            }                                                                                          // 12892
                                                                                                                       // 12893
                            if (valid) {                                                                               // 12894
                                $("#" + stepName).hide();                                                              // 12895
                                $("#step" + (stepCount + 1)).show();                                                   // 12896
                                _this._selectStep(stepCount + 1);                                                      // 12897
                                                                                                                       // 12898
                                // TODO: fire click handler?                                                           // 12899
                                if (_this.wizardConfigs.buttons.next && _this.wizardConfigs.buttons.next.onClick) {    // 12900
                                    _this.wizardConfigs.buttons.next.onClick();                                        // 12901
                                }                                                                                      // 12902
                            }                                                                                          // 12903
                                                                                                                       // 12904
                            return false;                                                                              // 12905
                        };                                                                                             // 12906
                    }(stepName, i, validationFunction));                                                               // 12907
                                                                                                                       // 12908
                    $("#" + stepName + "-nav-bar").append(wizardNextButtonElement);                                    // 12909
                    if (clear) {                                                                                       // 12910
                        $("#" + stepName + "-nav-bar").parent().append("<div style='clear:both'></div>");              // 12911
                    }                                                                                                  // 12912
                }                                                                                                      // 12913
            },                                                                                                         // 12914
                                                                                                                       // 12915
            /**                                                                                                        // 12916
             * Creates a "done" button.                                                                                // 12917
             *                                                                                                         // 12918
             * @param {Integer} i Step number.                                                                         // 12919
             * @param [boolean] whether to add a clear div at the end                                                  // 12920
             * @param [validationFunction] function test whether the button should be allowed to proceed               // 12921
             */                                                                                                        // 12922
            _createDoneButton: function(i, clear, validationFunction) {                                                // 12923
                                                                                                                       // 12924
                // only apply validation if configured to do so                                                        // 12925
                if (this.wizardConfigs.buttons && this.wizardConfigs.buttons.done) {                                   // 12926
                    if (!this.wizardConfigs.buttons.done.validateOnClick) {                                            // 12927
                        validationFunction = null;                                                                     // 12928
                    }                                                                                                  // 12929
                }                                                                                                      // 12930
                                                                                                                       // 12931
                var stepName = "step" + i;                                                                             // 12932
                var _this = this;                                                                                      // 12933
                                                                                                                       // 12934
                var wizardDoneButtonTemplateDescriptor = this.view.getTemplateDescriptor("wizardDoneButton");          // 12935
                if (wizardDoneButtonTemplateDescriptor) {                                                              // 12936
                    var wizardDoneButtonElement = _this.view.tmpl(wizardDoneButtonTemplateDescriptor, {});             // 12937
                    wizardDoneButtonElement.attr("id", stepName + '-button-done');                                     // 12938
                    wizardDoneButtonElement.addClass("alpaca-wizard-button-done");                                     // 12939
                    if (_this.buttonBeautifier) {                                                                      // 12940
                        _this.buttonBeautifier.call(_this, wizardDoneButtonElement, this.wizardDoneIcon,true );        // 12941
                    }                                                                                                  // 12942
                                                                                                                       // 12943
                    // when they click "done", run validation function first to make sure they're allowed to proceed   // 12944
                    wizardDoneButtonElement.click(function(stepName, stepCount, validationFunction) {                  // 12945
                                                                                                                       // 12946
                        return function() {                                                                            // 12947
                            var valid = true;                                                                          // 12948
                                                                                                                       // 12949
                            if (validationFunction)                                                                    // 12950
                            {                                                                                          // 12951
                                valid = validationFunction(stepName, stepCount);                                       // 12952
                            }                                                                                          // 12953
                                                                                                                       // 12954
                            if (valid) {                                                                               // 12955
                                $("#" + stepName + "-nav-bar").append(wizardDoneButtonElement);                        // 12956
                                if (clear) {                                                                           // 12957
                                    $("#" + stepName + "-nav-bar").parent().append("<div style='clear:both'></div>");  // 12958
                                }                                                                                      // 12959
                                                                                                                       // 12960
                                // TODO: fire click handler?                                                           // 12961
                                if (_this.wizardConfigs.buttons.done && _this.wizardConfigs.buttons.done.onClick) {    // 12962
                                    _this.wizardConfigs.buttons.done.onClick();                                        // 12963
                                }                                                                                      // 12964
                            }                                                                                          // 12965
                                                                                                                       // 12966
                            return false;                                                                              // 12967
                        };                                                                                             // 12968
                    }(stepName, i, validationFunction));                                                               // 12969
                                                                                                                       // 12970
                    $("#" + stepName + "-nav-bar").append(wizardDoneButtonElement);                                    // 12971
                    if (clear) {                                                                                       // 12972
                        $("#" + stepName + "-nav-bar").parent().append("<div style='clear:both'></div>");              // 12973
                    }                                                                                                  // 12974
                }                                                                                                      // 12975
                                                                                                                       // 12976
            },                                                                                                         // 12977
                                                                                                                       // 12978
            /**                                                                                                        // 12979
             * Selects a wizard step.                                                                                  // 12980
             *                                                                                                         // 12981
             * @param {Integer} i Step number.                                                                         // 12982
             */                                                                                                        // 12983
            _selectStep: function(i) {                                                                                 // 12984
                var unCurrentStepElem = $("#" + this.getId() + "-wizard-status-bar" + " li");                          // 12985
                unCurrentStepElem.removeClass("current current-has-next");                                             // 12986
                this.getStyleInjection("wizardUnCurrentStep",unCurrentStepElem);                                       // 12987
                var currentStepElem = $("#stepDesc" + i);                                                              // 12988
                currentStepElem.addClass("current");                                                                   // 12989
                this.getStyleInjection("wizardCurrentStep",currentStepElem);                                           // 12990
                if (i < this.totalSteps - 1) {                                                                         // 12991
                    $("#stepDesc" + i).addClass("current-has-next");                                                   // 12992
                }                                                                                                      // 12993
            }                                                                                                          // 12994
                                                                                                                       // 12995
        });                                                                                                            // 12996
                                                                                                                       // 12997
    Alpaca.registerFieldClass("object", Alpaca.Fields.ObjectField);                                                    // 12998
    Alpaca.registerDefaultSchemaFieldMapping("object", "object");                                                      // 12999
})(jQuery);                                                                                                            // 13000
(function($) {                                                                                                         // 13001
                                                                                                                       // 13002
    var Alpaca = $.alpaca;                                                                                             // 13003
                                                                                                                       // 13004
    Alpaca.Fields.AnyField = Alpaca.ControlField.extend(                                                               // 13005
    /**                                                                                                                // 13006
     * @lends Alpaca.Fields.AnyField.prototype                                                                         // 13007
     */                                                                                                                // 13008
    {                                                                                                                  // 13009
        /**                                                                                                            // 13010
         * @constructs                                                                                                 // 13011
         * @augments Alpaca.ControlField                                                                               // 13012
         *                                                                                                             // 13013
         * @class Basic field control for JSON schema any type. This control should be used with additional options parameter
         * for combo fields. Without options parameter it will simply render a text field.                             // 13015
         *                                                                                                             // 13016
         * @param {Object} container Field container.                                                                  // 13017
         * @param {Any} data Field data.                                                                               // 13018
         * @param {Object} options Field options.                                                                      // 13019
         * @param {Object} schema Field schema.                                                                        // 13020
         * @param {Object|String} view Field view.                                                                     // 13021
         * @param {Alpaca.Connector} connector Field connector.                                                        // 13022
         * @param {Function} errorCallback Error callback.                                                             // 13023
         */                                                                                                            // 13024
        constructor: function(container, data, options, schema, view, connector, errorCallback) {                      // 13025
            this.base(container, data, options, schema, view, connector, errorCallback);                               // 13026
        },                                                                                                             // 13027
                                                                                                                       // 13028
        /**                                                                                                            // 13029
         * @see Alpaca.Field#setup                                                                                     // 13030
         */                                                                                                            // 13031
        setup: function() {                                                                                            // 13032
            this.base();                                                                                               // 13033
                                                                                                                       // 13034
            this.controlFieldTemplateDescriptor = this.view.getTemplateDescriptor("controlFieldAny");                  // 13035
        },                                                                                                             // 13036
                                                                                                                       // 13037
        /**                                                                                                            // 13038
         * @see Alpaca.ControlField#renderField                                                                        // 13039
         */                                                                                                            // 13040
        renderField: function(onSuccess) {                                                                             // 13041
                                                                                                                       // 13042
            if (this.controlFieldTemplateDescriptor) {                                                                 // 13043
                this.field = this.view.tmpl(this.controlFieldTemplateDescriptor, {                                     // 13044
                    "id": this.getId(),                                                                                // 13045
                    "name": this.name,                                                                                 // 13046
                    "options": this.options                                                                            // 13047
                });                                                                                                    // 13048
                this.injectField(this.field);                                                                          // 13049
            }                                                                                                          // 13050
                                                                                                                       // 13051
            if (onSuccess) {                                                                                           // 13052
                onSuccess();                                                                                           // 13053
            }                                                                                                          // 13054
        },                                                                                                             // 13055
                                                                                                                       // 13056
        /**                                                                                                            // 13057
         * @see Alpaca.Field#getValue                                                                                  // 13058
         */                                                                                                            // 13059
        getValue: function() {                                                                                         // 13060
            return this.field.val();                                                                                   // 13061
        },                                                                                                             // 13062
                                                                                                                       // 13063
        /**                                                                                                            // 13064
         * @see Alpaca.Field#setValue                                                                                  // 13065
         */                                                                                                            // 13066
        setValue: function(value) {                                                                                    // 13067
            if (Alpaca.isEmpty(value)) {                                                                               // 13068
                this.field.val("");                                                                                    // 13069
            } else {                                                                                                   // 13070
                this.field.val(value);                                                                                 // 13071
            }                                                                                                          // 13072
            // be sure to call into base method                                                                        // 13073
            this.base(value);                                                                                          // 13074
        },                                                                                                             // 13075
                                                                                                                       // 13076
        /**                                                                                                            // 13077
         * @see Alpaca.ControlField#handleValidate                                                                     // 13078
         */                                                                                                            // 13079
        handleValidate: function() {                                                                                   // 13080
            var baseStatus = this.base();                                                                              // 13081
            return baseStatus;                                                                                         // 13082
        },                                                                                                             // 13083
                                                                                                                       // 13084
        /**                                                                                                            // 13085
         * @see Alpaca.Field#disable                                                                                   // 13086
         */                                                                                                            // 13087
        disable: function() {                                                                                          // 13088
            this.field.disabled = true;                                                                                // 13089
        },                                                                                                             // 13090
                                                                                                                       // 13091
        /**                                                                                                            // 13092
         * @see Alpaca.Field#enable                                                                                    // 13093
         */                                                                                                            // 13094
        enable: function() {                                                                                           // 13095
            this.field.disabled = false;                                                                               // 13096
        },                                                                                                             // 13097
                                                                                                                       // 13098
        /**                                                                                                            // 13099
         * @see Alpaca.Field#focus                                                                                     // 13100
         */                                                                                                            // 13101
        focus: function() {                                                                                            // 13102
            this.field.focus();                                                                                        // 13103
        }                                                                                                              // 13104
    });                                                                                                                // 13105
                                                                                                                       // 13106
    Alpaca.registerTemplate("controlFieldAny", '<input type="text" id="${id}" size="40" {{if options.readonly}}readonly="readonly"{{/if}} {{if name}}name="${name}"{{/if}} {{each(i,v) options.data}}data-${i}="${v}"{{/each}}/>');
    Alpaca.registerFieldClass("any", Alpaca.Fields.AnyField);                                                          // 13108
    Alpaca.registerDefaultSchemaFieldMapping("any", "any");                                                            // 13109
})(jQuery);                                                                                                            // 13110
(function($) {                                                                                                         // 13111
                                                                                                                       // 13112
    var Alpaca = $.alpaca;                                                                                             // 13113
                                                                                                                       // 13114
    Alpaca.Fields.HiddenField = Alpaca.ControlField.extend(                                                            // 13115
    /**                                                                                                                // 13116
     * @lends Alpaca.Fields.ControlField.prototype                                                                     // 13117
     */                                                                                                                // 13118
    {                                                                                                                  // 13119
        /**                                                                                                            // 13120
         * @constructs                                                                                                 // 13121
         * @augments Alpaca.ControlField                                                                               // 13122
         *                                                                                                             // 13123
         * @class Basic Control for Hidden field                                                                       // 13124
         *                                                                                                             // 13125
         * @param {Object} container Field container.                                                                  // 13126
         * @param {Any} data Field data.                                                                               // 13127
         * @param {Object} options Field options.                                                                      // 13128
         * @param {Object} schema Field schema.                                                                        // 13129
         * @param {Object|String} view Field view.                                                                     // 13130
         * @param {Alpaca.Connector} connector Field connector.                                                        // 13131
         * @param {Function} errorCallback Error callback.                                                             // 13132
         */                                                                                                            // 13133
        constructor: function(container, data, options, schema, view, connector, errorCallback) {                      // 13134
            this.base(container, data, options, schema, view, connector, errorCallback);                               // 13135
        },                                                                                                             // 13136
                                                                                                                       // 13137
        /**                                                                                                            // 13138
         * @see Alpaca.Field#setup                                                                                     // 13139
         */                                                                                                            // 13140
        setup: function() {                                                                                            // 13141
            this.base();                                                                                               // 13142
                                                                                                                       // 13143
            if (!this.options.size) {                                                                                  // 13144
                this.options.size = 40;                                                                                // 13145
            }                                                                                                          // 13146
                                                                                                                       // 13147
            this.controlFieldTemplateDescriptor = this.view.getTemplateDescriptor("controlFieldHidden");               // 13148
        },                                                                                                             // 13149
                                                                                                                       // 13150
        /**                                                                                                            // 13151
         * @see Alpaca.ControlField#renderField                                                                        // 13152
         */                                                                                                            // 13153
        renderField: function(onSuccess) {                                                                             // 13154
                                                                                                                       // 13155
            var _this = this;                                                                                          // 13156
                                                                                                                       // 13157
            if (this.controlFieldTemplateDescriptor) {                                                                 // 13158
                                                                                                                       // 13159
                this.field = _this.view.tmpl(this.controlFieldTemplateDescriptor, {                                    // 13160
                    "id": this.getId(),                                                                                // 13161
                    "name": this.name,                                                                                 // 13162
                    "options": this.options                                                                            // 13163
                });                                                                                                    // 13164
                this.injectField(this.field);                                                                          // 13165
            }                                                                                                          // 13166
                                                                                                                       // 13167
            if (onSuccess) {                                                                                           // 13168
                onSuccess();                                                                                           // 13169
            }                                                                                                          // 13170
        },                                                                                                             // 13171
                                                                                                                       // 13172
        /**                                                                                                            // 13173
         * @see Alpaca.ControlField#postRender                                                                         // 13174
         */                                                                                                            // 13175
        postRender: function(callback) {                                                                               // 13176
                                                                                                                       // 13177
            var self = this;                                                                                           // 13178
                                                                                                                       // 13179
            this.base(function() {                                                                                     // 13180
                                                                                                                       // 13181
                if (self.fieldContainer) {                                                                             // 13182
                    self.fieldContainer.addClass('alpaca-controlfield-hidden');                                        // 13183
                }                                                                                                      // 13184
                                                                                                                       // 13185
                callback();                                                                                            // 13186
            });                                                                                                        // 13187
                                                                                                                       // 13188
        },                                                                                                             // 13189
                                                                                                                       // 13190
                                                                                                                       // 13191
        /**                                                                                                            // 13192
         * @see Alpaca.Field#getValue                                                                                  // 13193
         */                                                                                                            // 13194
        getValue: function() {                                                                                         // 13195
            return this.field.val();                                                                                   // 13196
        },                                                                                                             // 13197
                                                                                                                       // 13198
        /**                                                                                                            // 13199
         * @see Alpaca.Field#setValue                                                                                  // 13200
         */                                                                                                            // 13201
        setValue: function(value) {                                                                                    // 13202
            if (Alpaca.isEmpty(value)) {                                                                               // 13203
                this.field.val("");                                                                                    // 13204
            } else {                                                                                                   // 13205
                this.field.val(value);                                                                                 // 13206
            }                                                                                                          // 13207
                                                                                                                       // 13208
            // be sure to call into base method                                                                        // 13209
            this.base(value);                                                                                          // 13210
        },                                                                                                             // 13211
                                                                                                                       // 13212
        /**                                                                                                            // 13213
         * @see Alpaca.Field#getTitle                                                                                  // 13214
         */                                                                                                            // 13215
        getTitle: function() {                                                                                         // 13216
            return "Hidden";                                                                                           // 13217
        },                                                                                                             // 13218
                                                                                                                       // 13219
        /**                                                                                                            // 13220
         * @see Alpaca.Field#getDescription                                                                            // 13221
         */                                                                                                            // 13222
        getDescription: function() {                                                                                   // 13223
            return "Field for a hidden HTML input";                                                                    // 13224
        },                                                                                                             // 13225
                                                                                                                       // 13226
        /**                                                                                                            // 13227
         * @see Alpaca.Field#getType                                                                                   // 13228
         */                                                                                                            // 13229
        getType: function() {                                                                                          // 13230
            return "string";                                                                                           // 13231
        },                                                                                                             // 13232
		                                                                                                                     // 13233
        /**                                                                                                            // 13234
         * @see Alpaca.Field#getFieldType                                                                              // 13235
         */                                                                                                            // 13236
        getFieldType: function() {                                                                                     // 13237
            return "hidden";                                                                                           // 13238
        }//__END_OF_BUILDER_HELPERS                                                                                    // 13239
                                                                                                                       // 13240
    });                                                                                                                // 13241
                                                                                                                       // 13242
    Alpaca.registerTemplate("controlFieldHidden", '<input type="hidden" id="${id}" {{if name}}name="${name}"{{/if}} {{each(i,v) options.data}}data-${i}="${v}"{{/each}}/>');
    Alpaca.registerFieldClass("hidden", Alpaca.Fields.HiddenField);                                                    // 13244
                                                                                                                       // 13245
})(jQuery);                                                                                                            // 13246
(function($) {                                                                                                         // 13247
                                                                                                                       // 13248
	var Alpaca = $.alpaca;                                                                                                // 13249
                                                                                                                       // 13250
	Alpaca.registerView ({                                                                                                // 13251
		"id": "VIEW_BASE",                                                                                                   // 13252
		"messages": {                                                                                                        // 13253
			"zh_CN": {                                                                                                          // 13254
				required: "&#27492;&#22495;&#24517;&#39035;",                                                                      // 13255
				invalid: "&#27492;&#22495;&#19981;&#21512;&#26684;",                                                               // 13256
				months: ["&#19968;&#26376;", "&#20108;&#26376;", "&#19977;&#26376;", "&#22235;&#26376;", "&#20116;&#26376;", "&#20845;&#26376;", "&#19971;&#26376;", "&#20843;&#26376;", "&#20061;&#26376;", "&#21313;&#26376;", "&#21313;&#19968;&#26376;", "&#21313;&#20108;&#26376;"],
				timeUnits: {                                                                                                       // 13258
					SECOND: "&#31186;",                                                                                               // 13259
					MINUTE: "&#20998;",                                                                                               // 13260
					HOUR: "&#26102;",                                                                                                 // 13261
					DAY: "&#26085;",                                                                                                  // 13262
					MONTH: "&#26376;",                                                                                                // 13263
					YEAR: "&#24180;"                                                                                                  // 13264
				},                                                                                                                 // 13265
				"notOptional": "&#27492;&#22495;&#38750;&#20219;&#36873;",                                                         // 13266
				"disallowValue": "&#38750;&#27861;&#36755;&#20837;&#21253;&#25324; {0}.",                                          // 13267
				"invalidValueOfEnum": "&#20801;&#35768;&#36755;&#20837;&#21253;&#25324; {0}.",                                     // 13268
				"notEnoughItems": "&#26368;&#23567;&#20010;&#25968; {0}",                                                          // 13269
				"tooManyItems": "&#26368;&#22823;&#20010;&#25968; {0}",                                                            // 13270
				"valueNotUnique": "&#36755;&#20837;&#20540;&#19981;&#29420;&#29305;",                                              // 13271
				"notAnArray": "&#19981;&#26159;&#25968;&#32452;",                                                                  // 13272
				"invalidDate": "&#26085;&#26399;&#26684;&#24335;&#22240;&#35813;&#26159; {0}",                                     // 13273
				"invalidEmail": "&#20234;&#22969;&#20799;&#26684;&#24335;&#19981;&#23545;, ex: info@cloudcms.com",                 // 13274
				"stringNotAnInteger": "&#19981;&#26159;&#25972;&#25968;.",                                                         // 13275
				"invalidIPv4": "&#19981;&#26159;&#21512;&#27861;IP&#22320;&#22336;, ex: 192.168.0.1",                              // 13276
				"stringValueTooSmall": "&#26368;&#23567;&#20540;&#26159; {0}",                                                     // 13277
				"stringValueTooLarge": "&#26368;&#22823;&#20540;&#26159; {0}",                                                     // 13278
				"stringValueTooSmallExclusive": "&#20540;&#24517;&#39035;&#22823;&#20110; {0}",                                    // 13279
				"stringValueTooLargeExclusive": "&#20540;&#24517;&#39035;&#23567;&#20110; {0}",                                    // 13280
				"stringDivisibleBy": "&#20540;&#24517;&#39035;&#33021;&#34987; {0} &#25972;&#38500;",                              // 13281
				"stringNotANumber": "&#19981;&#26159;&#25968;&#23383;.",                                                           // 13282
				"invalidPassword": "&#38750;&#27861;&#23494;&#30721;",                                                             // 13283
				"invalidPhone": "&#38750;&#27861;&#30005;&#35805;&#21495;&#30721;, ex: (123) 456-9999",                            // 13284
				"invalidPattern": "&#27492;&#22495;&#39035;&#26377;&#26684;&#24335; {0}",                                          // 13285
				"stringTooShort": "&#27492;&#22495;&#33267;&#23569;&#38271;&#24230; {0}",                                          // 13286
				"stringTooLong": "&#27492;&#22495;&#26368;&#22810;&#38271;&#24230; {0}"                                            // 13287
			                                                                                                                    // 13288
			}                                                                                                                   // 13289
        }                                                                                                              // 13290
    });                                                                                                                // 13291
                                                                                                                       // 13292
})(jQuery);                                                                                                            // 13293
(function($) {                                                                                                         // 13294
                                                                                                                       // 13295
	var Alpaca = $.alpaca;                                                                                                // 13296
                                                                                                                       // 13297
	Alpaca.registerView ({                                                                                                // 13298
		"id": "VIEW_BASE",                                                                                                   // 13299
		"messages": {                                                                                                        // 13300
			"es_ES": {                                                                                                          // 13301
				required: "Este campo es obligatorio",                                                                             // 13302
				invalid: "Este campo es inválido",                                                                                 // 13303
				months: ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"],
				timeUnits: {                                                                                                       // 13305
					SECOND: "segundos",                                                                                               // 13306
					MINUTE: "minutos",                                                                                                // 13307
					HOUR: "horas",                                                                                                    // 13308
					DAY: "días",                                                                                                      // 13309
					MONTH: "meses",                                                                                                   // 13310
					YEAR: "años"                                                                                                      // 13311
				},                                                                                                                 // 13312
				"notOptional": "Este campo no es opcional.",                                                                       // 13313
				"disallowValue": "{0} son los valores rechazados.",                                                                // 13314
				"invalidValueOfEnum": "Este campo debe tener uno de los valores adentro {0}.",                                     // 13315
				"notEnoughItems": "El número mínimo de artículos es {0}",                                                          // 13316
				"tooManyItems": "El número máximo de artículos es {0}",                                                            // 13317
				"valueNotUnique": "Los valores no son únicos",                                                                     // 13318
				"notAnArray": "Este valor no es un arsenal",                                                                       // 13319
				"invalidDate": "Fecha inválida para el formato {0}",                                                               // 13320
				"invalidEmail": "Email address inválido, ex: info@cloudcms.com",                                                   // 13321
				"stringNotAnInteger": "Este valor no es un número entero.",                                                        // 13322
				"invalidIPv4": "Dirección inválida IPv4, ex: 192.168.0.1",                                                         // 13323
				"stringValueTooSmall": "El valor mínimo para este campo es {0}",                                                   // 13324
				"stringValueTooLarge": "El valor míximo para este campo es {0}",                                                   // 13325
				"stringValueTooSmallExclusive": "El valor de este campo debe ser mayor que {0}",                                   // 13326
				"stringValueTooLargeExclusive": "El valor de este campo debe ser menos que {0}",                                   // 13327
				"stringDivisibleBy": "El valor debe ser divisible cerca {0}",                                                      // 13328
				"stringNotANumber": "Este valor no es un número.",                                                                 // 13329
				"invalidPassword": "Contraseña inválida",                                                                          // 13330
				"invalidPhone": "Número de teléfono inválido, ex: (123) 456-9999",                                                 // 13331
				"invalidPattern": "Este campo debe tener patrón {0}",                                                              // 13332
				"stringTooShort": "Este campo debe contener por lo menos {0} números o caracteres",                                // 13333
				"stringTooLong": "Este campo debe contener a lo más {0} números o caracteres"                                      // 13334
			}                                                                                                                   // 13335
        }                                                                                                              // 13336
	});                                                                                                                   // 13337
                                                                                                                       // 13338
})(jQuery);                                                                                                            // 13339
(function($) {                                                                                                         // 13340
                                                                                                                       // 13341
	var Alpaca = $.alpaca;                                                                                                // 13342
                                                                                                                       // 13343
	Alpaca.registerView ({                                                                                                // 13344
		"id": "VIEW_BASE",                                                                                                   // 13345
		"messages": {                                                                                                        // 13346
			"fr_FR": {                                                                                                          // 13347
				required: "Ce champ est requis",                                                                                   // 13348
				invalid: "Ce champ est invalide",                                                                                  // 13349
				months: ["Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"],
				timeUnits: {                                                                                                       // 13351
					SECOND: "secondes",                                                                                               // 13352
					MINUTE: "minutes",                                                                                                // 13353
					HOUR: "heures",                                                                                                   // 13354
					DAY: "jours",                                                                                                     // 13355
					MONTH: "mois",                                                                                                    // 13356
					YEAR: "années"                                                                                                    // 13357
				},                                                                                                                 // 13358
				"notOptional": "Ce champ n'est pas optionnel.",                                                                    // 13359
				"disallowValue": "{0} sont des valeurs interdites.",                                                               // 13360
				"invalidValueOfEnum": "Ce champ doit prendre une des valeurs suivantes : {0}.",                                    // 13361
				"notEnoughItems": "Le nombre minimum d'éléments est {0}",                                                          // 13362
				"tooManyItems": "Le nombre maximum d'éléments est {0}",                                                            // 13363
				"valueNotUnique": "Les valeurs sont uniques",                                                                      // 13364
				"notAnArray": "Cette valeur n'est pas une liste",                                                                  // 13365
				"invalidDate": "Cette date ne correspond pas au format {0}",                                                       // 13366
				"invalidEmail": "Adresse de courriel invalide, ex: info@cloudcms.com",                                             // 13367
				"stringNotAnInteger": "Cette valeur n'est pas un nombre entier.",                                                  // 13368
				"invalidIPv4": "Adresse IPv4 invalide, ex: 192.168.0.1",                                                           // 13369
				"stringValueTooSmall": "La valeur minimale pour ce champ est {0}",                                                 // 13370
				"stringValueTooLarge": "La valeur maximale pour ce champ est {0}",                                                 // 13371
				"stringValueTooSmallExclusive": "La valeur doit-être supérieure à {0}",                                            // 13372
				"stringValueTooLargeExclusive": "La valeur doit-être inférieure à {0}",                                            // 13373
				"stringDivisibleBy": "La valeur doit-être divisible par {0}",                                                      // 13374
				"stringNotANumber": "Cette valeur n'est pas un nombre.",                                                           // 13375
				"invalidPassword": "Mot de passe invalide",                                                                        // 13376
				"invalidPhone": "Numéro de téléphone invalide, ex: (123) 456-9999",                                                // 13377
				"invalidPattern": "Ce champ doit correspondre au motif {0}",                                                       // 13378
                "stringTooShort": "Ce champ doit contenir au moins {0} caractères",                                    // 13379
                "stringTooLong": "Ce champ doit contenir au plus {0} caractères"                                       // 13380
            }                                                                                                          // 13381
        }                                                                                                              // 13382
    });                                                                                                                // 13383
                                                                                                                       // 13384
})(jQuery);                                                                                                            // 13385
(function($) {                                                                                                         // 13386
                                                                                                                       // 13387
	var Alpaca = $.alpaca;                                                                                                // 13388
                                                                                                                       // 13389
	Alpaca.registerView ({                                                                                                // 13390
		"id": "VIEW_BASE",                                                                                                   // 13391
		"messages": {                                                                                                        // 13392
            "de_AT": {                                                                                                 // 13393
                required: "Eingabe erforderlich",                                                                      // 13394
                invalid: "Eingabe invalid",                                                                            // 13395
                months: ["Jänner", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"],
                timeUnits: {                                                                                           // 13397
                    SECOND: "Sekunden",                                                                                // 13398
                    MINUTE: "Minuten",                                                                                 // 13399
                    HOUR: "Stunden",                                                                                   // 13400
                    DAY: "Tage",                                                                                       // 13401
                    MONTH: "Monate",                                                                                   // 13402
                    YEAR: "Jahre"                                                                                      // 13403
                },                                                                                                     // 13404
                "notOptional": "Dieses Feld ist nicht optional",                                                       // 13405
                "disallowValue": "Diese Werte sind nicht erlaubt: {0}",                                                // 13406
                "invalidValueOfEnum": "Diese Feld sollte einen der folgenden Werte enthalten: {0}",                    // 13407
                "notEnoughItems": "Die Mindestanzahl von Elementen ist {0}",                                           // 13408
                "tooManyItems": "Die Maximalanzahl von Elementen ist {0}",                                             // 13409
                "valueNotUnique": "Diese Werte sind nicht eindeutig",                                                  // 13410
                "notAnArray": "Keine Liste von Werten",                                                                // 13411
                "invalidDate": "Falsches Datumsformat: {0}",                                                           // 13412
                "invalidEmail": "Ungültige e-Mail Adresse, z.B.: info@cloudcms.com",                                   // 13413
                "stringNotAnInteger": "Eingabe ist keine Ganz Zahl.",                                                  // 13414
                "invalidIPv4": "Ungültige IPv4 Adresse, z.B.: 192.168.0.1",                                            // 13415
                "stringValueTooSmall": "Die Mindestanzahl von Zeichen ist {0}",                                        // 13416
                "stringValueTooLarge": "Die Maximalanzahl von Zeichen ist {0}",                                        // 13417
                "stringValueTooSmallExclusive": "Die Anzahl der Zeichen muss größer sein als {0}",                     // 13418
                "stringValueTooLargeExclusive": "Die Anzahl der Zeichen muss kleiner sein als {0}",                    // 13419
                "stringDivisibleBy": "Der Wert muss durch {0} dividierbar sein",                                       // 13420
                "stringNotANumber": "Die Eingabe ist keine Zahl",                                                      // 13421
                "invalidPassword": "Ungültiges Passwort.",                                                             // 13422
                "invalidPhone": "Ungültige Telefonnummer, z.B.: (123) 456-9999",                                       // 13423
                "invalidPattern": "Diese Feld stimmt nicht mit folgender Vorgabe überein {0}",                         // 13424
                "stringTooShort": "Dieses Feld sollte mindestens {0} Zeichen enthalten",                               // 13425
                "stringTooLong": "Dieses Feld sollte höchstens {0} Zeichen enthalten"                                  // 13426
            }                                                                                                          // 13427
		}                                                                                                                    // 13428
	});                                                                                                                   // 13429
                                                                                                                       // 13430
})(jQuery);                                                                                                            // 13431
/*!                                                                                                                    // 13432
Alpaca Version 1.1.2                                                                                                   // 13433
                                                                                                                       // 13434
Copyright 2013 Gitana Software, Inc.                                                                                   // 13435
                                                                                                                       // 13436
Licensed under the Apache License, Version 2.0 (the "License");                                                        // 13437
you may not use this file except in compliance with the License.                                                       // 13438
                                                                                                                       // 13439
You may obtain a copy of the License at                                                                                // 13440
	http://www.apache.org/licenses/LICENSE-2.0                                                                            // 13441
                                                                                                                       // 13442
Unless required by applicable law or agreed to in writing, software                                                    // 13443
distributed under the License is distributed on an "AS IS" BASIS,                                                      // 13444
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                               // 13445
See the License for the specific language governing permissions and                                                    // 13446
limitations under the License.                                                                                         // 13447
                                                                                                                       // 13448
For more information, please contact Gitana Software, Inc. at this                                                     // 13449
address:                                                                                                               // 13450
                                                                                                                       // 13451
  info@gitanasoftware.com                                                                                              // 13452
*/                                                                                                                     // 13453
(function($) {                                                                                                         // 13454
                                                                                                                       // 13455
    var Alpaca = $.alpaca;                                                                                             // 13456
                                                                                                                       // 13457
    Alpaca.Fields.AddressField = Alpaca.Fields.ObjectField.extend(                                                     // 13458
    /**                                                                                                                // 13459
     * @lends Alpaca.Fields.AddressField.prototype                                                                     // 13460
     */                                                                                                                // 13461
    {                                                                                                                  // 13462
        /**                                                                                                            // 13463
         * @constructs                                                                                                 // 13464
         * @augments Alpaca.Fields.ObjectField                                                                         // 13465
         *                                                                                                             // 13466
         * @class A combo field for rendering a standard US address. It also comes up with support for Google Map      // 13467
         * which would requires including Google Map JS file for the form that uses this class.                        // 13468
         *                                                                                                             // 13469
         * @param {Object} container Field container.                                                                  // 13470
         * @param {Any} data Field data.                                                                               // 13471
         * @param {Object} options Field options.                                                                      // 13472
         * @param {Object} schema Field schema.                                                                        // 13473
         * @param {Object|String} view Field view.                                                                     // 13474
         * @param {Alpaca.Connector} connector Field connector.                                                        // 13475
         * @param {Function} errorCallback Error callback.                                                             // 13476
         */                                                                                                            // 13477
        constructor: function(container, data, options, schema, view, connector,errorCallback) {                       // 13478
            this.base(container, data, options, schema, view, connector,errorCallback);                                // 13479
        },                                                                                                             // 13480
                                                                                                                       // 13481
        /**                                                                                                            // 13482
         * @private                                                                                                    // 13483
         * @see Alpaca.Fields.ObjectField#setup                                                                        // 13484
         */                                                                                                            // 13485
        setup: function() {                                                                                            // 13486
            this.base();                                                                                               // 13487
                                                                                                                       // 13488
            this.schema = {                                                                                            // 13489
                "title": "Home Address",                                                                               // 13490
                "type": "object",                                                                                      // 13491
                "properties": {                                                                                        // 13492
                    "street": {                                                                                        // 13493
                        "title": "Street",                                                                             // 13494
                        "type": "array",                                                                               // 13495
                        "items": {                                                                                     // 13496
                            "type": "string",                                                                          // 13497
                            "maxLength": 30,                                                                           // 13498
                            "minItems": 0,                                                                             // 13499
                            "maxItems": 3                                                                              // 13500
                        }                                                                                              // 13501
                    },                                                                                                 // 13502
                    "city": {                                                                                          // 13503
                        "title": "City",                                                                               // 13504
                        "type": "string"                                                                               // 13505
                    },                                                                                                 // 13506
                    "state": {                                                                                         // 13507
                        "title": "State",                                                                              // 13508
                        "type": "string",                                                                              // 13509
                        "enum": ["AL", "AK", "AS", "AZ", "AR", "CA", "CO", "CT", "DE", "DC", "FM", "FL", "GA", "GU", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MH", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "MP", "OH", "OK", "OR", "PW", "PA", "PR", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VI", "VA", "WA", "WV", "WI", "WY"]
                    },                                                                                                 // 13511
                    "zip": {                                                                                           // 13512
                        "title": "Zip Code",                                                                           // 13513
                        "type": "string",                                                                              // 13514
                        "pattern": /^(\d{5}(-\d{4})?)?$/                                                               // 13515
                    }                                                                                                  // 13516
                }                                                                                                      // 13517
            };                                                                                                         // 13518
            Alpaca.merge(this.options, {                                                                               // 13519
                "fields": {                                                                                            // 13520
                    "zip": {                                                                                           // 13521
                        "maskString": "99999",                                                                         // 13522
                        "size": 5                                                                                      // 13523
                    },                                                                                                 // 13524
                    "state": {                                                                                         // 13525
                        "optionLabels": ["ALABAMA", "ALASKA", "AMERICANSAMOA", "ARIZONA", "ARKANSAS", "CALIFORNIA", "COLORADO", "CONNECTICUT", "DELAWARE", "DISTRICTOFCOLUMBIA", "FEDERATEDSTATESOFMICRONESIA", "FLORIDA", "GEORGIA", "GUAM", "HAWAII", "IDAHO", "ILLINOIS", "INDIANA", "IOWA", "KANSAS", "KENTUCKY", "LOUISIANA", "MAINE", "MARSHALLISLANDS", "MARYLAND", "MASSACHUSETTS", "MICHIGAN", "MINNESOTA", "MISSISSIPPI", "MISSOURI", "MONTANA", "NEBRASKA", "NEVADA", "NEWHAMPSHIRE", "NEWJERSEY", "NEWMEXICO", "NEWYORK", "NORTHCAROLINA", "NORTHDAKOTA", "NORTHERNMARIANAISLANDS", "OHIO", "OKLAHOMA", "OREGON", "PALAU", "PENNSYLVANIA", "PUERTORICO", "RHODEISLAND", "SOUTHCAROLINA", "SOUTHDAKOTA", "TENNESSEE", "TEXAS", "UTAH", "VERMONT", "VIRGINISLANDS", "VIRGINIA", "WASHINGTON", "WESTVIRGINIA", "WISCONSIN", "WYOMING"]
                    }                                                                                                  // 13527
                }                                                                                                      // 13528
            });                                                                                                        // 13529
                                                                                                                       // 13530
            if (Alpaca.isEmpty(this.options.addressValidation)) {                                                      // 13531
                this.options.addressValidation = true;                                                                 // 13532
            }                                                                                                          // 13533
        },                                                                                                             // 13534
                                                                                                                       // 13535
        /**                                                                                                            // 13536
         * Returns address in a single line string.                                                                    // 13537
         *                                                                                                             // 13538
         * @returns {String} Address as a single line string.                                                          // 13539
         */                                                                                                            // 13540
        getAddress: function() {                                                                                       // 13541
            var value = this.getValue();                                                                               // 13542
            if (this.view.type == "view") {                                                                            // 13543
                value = this.data;                                                                                     // 13544
            }                                                                                                          // 13545
            var address = "";                                                                                          // 13546
            if (value) {                                                                                               // 13547
                if (value.street) {                                                                                    // 13548
                    $.each(value.street, function(index, value) {                                                      // 13549
                        address += value + " ";                                                                        // 13550
                    });                                                                                                // 13551
                }                                                                                                      // 13552
                if (value.city) {                                                                                      // 13553
                    address += value.city + " ";                                                                       // 13554
                }                                                                                                      // 13555
                if (value.state) {                                                                                     // 13556
                    address += value.state + " ";                                                                      // 13557
                }                                                                                                      // 13558
                if (value.zip) {                                                                                       // 13559
                    address += value.zip;                                                                              // 13560
                }                                                                                                      // 13561
            }                                                                                                          // 13562
            return address;                                                                                            // 13563
        },                                                                                                             // 13564
                                                                                                                       // 13565
        /**                                                                                                            // 13566
         * @see Alpaca.Field#renderField                                                                               // 13567
         */                                                                                                            // 13568
        renderField: function(onSuccess) {                                                                             // 13569
            this.base();                                                                                               // 13570
            var _this = this;                                                                                          // 13571
            // apply additional css                                                                                    // 13572
            $(this.fieldContainer).addClass("alpaca-addressfield");                                                    // 13573
                                                                                                                       // 13574
            if (this.options.addressValidation && !this.isDisplayOnly()) {                                             // 13575
                $('<div style="clear:both;"></div>').appendTo(this.fieldContainer);                                    // 13576
                var mapButton = $('<div class="alpaca-form-button">Google Map</div>').appendTo(this.fieldContainer);   // 13577
                if (mapButton.button) {                                                                                // 13578
                    mapButton.button({                                                                                 // 13579
                        text: true                                                                                     // 13580
                    });                                                                                                // 13581
                }                                                                                                      // 13582
                mapButton.click(                                                                                       // 13583
                    function() {                                                                                       // 13584
                        if (google && google.maps) {                                                                   // 13585
                            var geocoder = new google.maps.Geocoder();                                                 // 13586
                            var address = _this.getAddress();                                                          // 13587
                            if (geocoder) {                                                                            // 13588
                                geocoder.geocode({                                                                     // 13589
                                    'address': address                                                                 // 13590
                                }, function(results, status) {                                                         // 13591
                                    if (status == google.maps.GeocoderStatus.OK) {                                     // 13592
                                        var mapCanvasId = _this.getId() + "-map-canvas";                               // 13593
                                        if ($('#' + mapCanvasId).length === 0) {                                       // 13594
                                            $("<div id='" + mapCanvasId + "' class='alpaca-controlfield-address-mapcanvas'></div>").appendTo(_this.fieldContainer);
                                        }                                                                              // 13596
                                        var map = new google.maps.Map(document.getElementById(_this.getId() + "-map-canvas"), {
                                            "zoom": 10,                                                                // 13598
                                            "center": results[0].geometry.location,                                    // 13599
                                            "mapTypeId": google.maps.MapTypeId.ROADMAP                                 // 13600
                                        });                                                                            // 13601
                                        var marker = new google.maps.Marker({                                          // 13602
                                            map: map,                                                                  // 13603
                                            position: results[0].geometry.location                                     // 13604
                                        });                                                                            // 13605
                                    } else {                                                                           // 13606
                                        _this.displayMessage("Geocoding failed: " + status);                           // 13607
                                    }                                                                                  // 13608
                                });                                                                                    // 13609
                            }                                                                                          // 13610
                        } else {                                                                                       // 13611
                            _this.displayMessage("Google Map API is not installed.");                                  // 13612
                        }                                                                                              // 13613
                    }).wrap('<small/>');                                                                               // 13614
                                                                                                                       // 13615
                if (this.options.showMapOnLoad)                                                                        // 13616
                {                                                                                                      // 13617
                    mapButton.click();                                                                                 // 13618
                }                                                                                                      // 13619
            }                                                                                                          // 13620
                                                                                                                       // 13621
            if (onSuccess) {                                                                                           // 13622
                onSuccess();                                                                                           // 13623
            }                                                                                                          // 13624
        }                                                                                                              // 13625
    });                                                                                                                // 13626
                                                                                                                       // 13627
    Alpaca.registerFieldClass("address", Alpaca.Fields.AddressField);                                                  // 13628
})(jQuery);                                                                                                            // 13629
(function($) {                                                                                                         // 13630
                                                                                                                       // 13631
    var Alpaca = $.alpaca;                                                                                             // 13632
                                                                                                                       // 13633
    Alpaca.Fields.DateField = Alpaca.Fields.TextField.extend(                                                          // 13634
    /**                                                                                                                // 13635
     * @lends Alpaca.Fields.DateField.prototype                                                                        // 13636
     */                                                                                                                // 13637
    {                                                                                                                  // 13638
        /**                                                                                                            // 13639
         * @constructs                                                                                                 // 13640
         * @augments Alpaca.Fields.TextField                                                                           // 13641
         *                                                                                                             // 13642
         * @class Date control for JSON schema date format.                                                            // 13643
         *                                                                                                             // 13644
         * @param {Object} container Field container.                                                                  // 13645
         * @param {Any} data Field data.                                                                               // 13646
         * @param {Object} options Field options.                                                                      // 13647
         * @param {Object} schema Field schema.                                                                        // 13648
         * @param {Object|String} view Field view.                                                                     // 13649
         * @param {Alpaca.Connector} connector Field connector.                                                        // 13650
         * @param {Function} errorCallback Error callback.                                                             // 13651
         */                                                                                                            // 13652
        constructor: function(container, data, options, schema, view, connector, errorCallback) {                      // 13653
            this.base(container, data, options, schema, view, connector, errorCallback);                               // 13654
        },                                                                                                             // 13655
                                                                                                                       // 13656
        /**                                                                                                            // 13657
         * @see Alpaca.Fields.TextField#setup                                                                          // 13658
         */                                                                                                            // 13659
        setup: function() {                                                                                            // 13660
                                                                                                                       // 13661
            this.base();                                                                                               // 13662
                                                                                                                       // 13663
            if (!this.options.dateFormat) {                                                                            // 13664
                this.options.dateFormat = Alpaca.defaultDateFormat;                                                    // 13665
            }                                                                                                          // 13666
            if (!this.options.dateFormatRegex) {                                                                       // 13667
                this.options.dateFormatRegex = Alpaca.regexps.date;                                                    // 13668
            }                                                                                                          // 13669
        },                                                                                                             // 13670
                                                                                                                       // 13671
        /**                                                                                                            // 13672
         * @see Alpaca.Fields.TextField#postRender                                                                     // 13673
         */                                                                                                            // 13674
        postRender: function(callback) {                                                                               // 13675
                                                                                                                       // 13676
            var self = this;                                                                                           // 13677
                                                                                                                       // 13678
            this.base(function() {                                                                                     // 13679
                                                                                                                       // 13680
                if (self.field && $.datepicker)                                                                        // 13681
                {                                                                                                      // 13682
                    var datePickerOptions = self.options.datepicker;                                                   // 13683
                    if (!datePickerOptions)                                                                            // 13684
                    {                                                                                                  // 13685
                        datePickerOptions = {                                                                          // 13686
                            "changeMonth": true,                                                                       // 13687
                            "changeYear": true                                                                         // 13688
                        };                                                                                             // 13689
                    }                                                                                                  // 13690
                    if (!datePickerOptions.dateFormat)                                                                 // 13691
                    {                                                                                                  // 13692
                        datePickerOptions.dateFormat = self.options.dateFormat;                                        // 13693
                    }                                                                                                  // 13694
                    self.field.datepicker(datePickerOptions);                                                          // 13695
                                                                                                                       // 13696
                    if (self.fieldContainer) {                                                                         // 13697
                        self.fieldContainer.addClass('alpaca-controlfield-date');                                      // 13698
                    }                                                                                                  // 13699
                }                                                                                                      // 13700
                                                                                                                       // 13701
                callback();                                                                                            // 13702
                                                                                                                       // 13703
            });                                                                                                        // 13704
        },                                                                                                             // 13705
                                                                                                                       // 13706
        /**                                                                                                            // 13707
         * @see Alpaca.Field#onChange                                                                                  // 13708
         */                                                                                                            // 13709
        onChange: function(e) {                                                                                        // 13710
            this.base();                                                                                               // 13711
            this.renderValidationState();                                                                              // 13712
        },                                                                                                             // 13713
                                                                                                                       // 13714
        /**                                                                                                            // 13715
         * @see Alpaca.Fields.TextField#handleValidate                                                                 // 13716
         */                                                                                                            // 13717
        handleValidate: function() {                                                                                   // 13718
            var baseStatus = this.base();                                                                              // 13719
                                                                                                                       // 13720
            var valInfo = this.validation;                                                                             // 13721
                                                                                                                       // 13722
            var status = this._validateDateFormat();                                                                   // 13723
            valInfo["invalidDate"] = {                                                                                 // 13724
                "message": status ? "" : Alpaca.substituteTokens(this.view.getMessage("invalidDate"), [this.options.dateFormat]),
                "status": status                                                                                       // 13726
            };                                                                                                         // 13727
                                                                                                                       // 13728
            return baseStatus && valInfo["invalidDate"]["status"];                                                     // 13729
        },                                                                                                             // 13730
                                                                                                                       // 13731
        /**                                                                                                            // 13732
         * Validates date format.                                                                                      // 13733
         * @returns {Boolean} True if it is a valid date, false otherwise.                                             // 13734
         */                                                                                                            // 13735
        _validateDateFormat: function() {                                                                              // 13736
            var value = this.field.val();                                                                              // 13737
                                                                                                                       // 13738
            if ($.datepicker) {                                                                                        // 13739
                try {                                                                                                  // 13740
                    $.datepicker.parseDate(this.options.dateFormat, value);                                            // 13741
                    return true;                                                                                       // 13742
                } catch(e) {                                                                                           // 13743
                    return false;                                                                                      // 13744
                }                                                                                                      // 13745
            } else {                                                                                                   // 13746
                //validate the date without the help of datepicker.parseDate                                           // 13747
                return value.match(this.options.dateFormatRegex);                                                      // 13748
            }                                                                                                          // 13749
        },                                                                                                             // 13750
                                                                                                                       // 13751
        /**                                                                                                            // 13752
         * @see Alpaca.Fields.TextField#setValue                                                                       // 13753
         */                                                                                                            // 13754
        setValue: function(val) {                                                                                      // 13755
            // skip out if no date                                                                                     // 13756
            if (val === "") {                                                                                          // 13757
                this.base(val);                                                                                        // 13758
                return;                                                                                                // 13759
            }                                                                                                          // 13760
                                                                                                                       // 13761
            this.base(val);                                                                                            // 13762
        }                                                                                                              // 13763
    });                                                                                                                // 13764
                                                                                                                       // 13765
    Alpaca.registerMessages({                                                                                          // 13766
        "invalidDate": "Invalid date for format {0}"                                                                   // 13767
    });                                                                                                                // 13768
    Alpaca.registerFieldClass("date", Alpaca.Fields.DateField);                                                        // 13769
    Alpaca.registerDefaultFormatFieldMapping("date", "date");                                                          // 13770
})(jQuery);                                                                                                            // 13771
(function($) {                                                                                                         // 13772
                                                                                                                       // 13773
    var Alpaca = $.alpaca;                                                                                             // 13774
                                                                                                                       // 13775
    Alpaca.Fields.DatetimeField = Alpaca.Fields.TextField.extend(                                                      // 13776
        /**                                                                                                            // 13777
         * @lends Alpaca.Fields.DatetimeField.prototype                                                                // 13778
         */                                                                                                            // 13779
        {                                                                                                              // 13780
            /**                                                                                                        // 13781
             * @constructs                                                                                             // 13782
             * @augments Alpaca.Fields.ObjectField                                                                     // 13783
             *                                                                                                         // 13784
             * @class A combo field for rendering a standard US range. It also comes up with support for Google Map    // 13785
             * which would requires including Google Map JS file for the form that uses this class.                    // 13786
             *                                                                                                         // 13787
             * @param {Object} container Field container.                                                              // 13788
             * @param {Any} data Field data.                                                                           // 13789
             * @param {Object} options Field options.                                                                  // 13790
             * @param {Object} schema Field schema.                                                                    // 13791
             * @param {Object|String} view Field view.                                                                 // 13792
             * @param {Alpaca.Connector} connector Field connector.                                                    // 13793
             * @param {Function} errorCallback Error callback.                                                         // 13794
             */                                                                                                        // 13795
            constructor: function(container, data, options, schema, view, connector, errorCallback) {                  // 13796
                this.base(container, data, options, schema, view, connector, errorCallback);                           // 13797
            },                                                                                                         // 13798
                                                                                                                       // 13799
            /**                                                                                                        // 13800
             * @see Alpaca.Fields.TextField#setup                                                                      // 13801
             */                                                                                                        // 13802
            /**                                                                                                        // 13803
             * @private                                                                                                // 13804
             * @see Alpaca.Fields.ObjectField#setup                                                                    // 13805
             */                                                                                                        // 13806
            setup: function() {                                                                                        // 13807
                this.base();                                                                                           // 13808
            },                                                                                                         // 13809
                                                                                                                       // 13810
            /**                                                                                                        // 13811
             * @see Alpaca.Fields.TextField#postRender                                                                 // 13812
             */                                                                                                        // 13813
            postRender: function(callback) {                                                                           // 13814
                                                                                                                       // 13815
                var self = this;                                                                                       // 13816
                                                                                                                       // 13817
                this.base(function() {                                                                                 // 13818
                                                                                                                       // 13819
                    if (self.field)                                                                                    // 13820
                    {                                                                                                  // 13821
                        if (self.field.datetimepicker) {                                                               // 13822
                            self.field.hover(function() {                                                              // 13823
                                if (!$(this).hasClass('hasDatepicker')) {                                              // 13824
                                                                                                                       // 13825
                                    var timePickerOptions = self.options.timepicker;                                   // 13826
                                    if (!timePickerOptions)                                                            // 13827
                                    {                                                                                  // 13828
                                        timePickerOptions = self.options.timepicker;                                   // 13829
                                    }                                                                                  // 13830
                                    if (!timePickerOptions)                                                            // 13831
                                    {                                                                                  // 13832
                                        timePickerOptions = {                                                          // 13833
                                            "changeYear": true,                                                        // 13834
                                            "changeMonth": true                                                        // 13835
                                        };                                                                             // 13836
                                    }                                                                                  // 13837
                                    $(this).datetimepicker(timePickerOptions);                                         // 13838
                                }                                                                                      // 13839
                            });                                                                                        // 13840
                            if (self.fieldContainer) {                                                                 // 13841
                                self.fieldContainer.addClass('alpaca-controlfield-datetime');                          // 13842
                            }                                                                                          // 13843
                        }                                                                                              // 13844
                    }                                                                                                  // 13845
                                                                                                                       // 13846
                    callback();                                                                                        // 13847
                                                                                                                       // 13848
                });                                                                                                    // 13849
            },                                                                                                         // 13850
                                                                                                                       // 13851
            /**                                                                                                        // 13852
             *@see Alpaca.Fields.TextField#setValue                                                                    // 13853
             */                                                                                                        // 13854
            setValue: function(value) {                                                                                // 13855
                if (value) {                                                                                           // 13856
                    if (Alpaca.isNumber()) {                                                                           // 13857
                        value = new Date(value);                                                                       // 13858
                    }                                                                                                  // 13859
                    if (Object.prototype.toString.call(value) == "[object Date]") {                                    // 13860
                        this.base((value.getMonth() + 1) + "/" + value.getDate() + "/" + value.getFullYear() + " " + value.getHours() + ":" + value.getMinutes());
                    } else {                                                                                           // 13862
                        this.base(value);                                                                              // 13863
                    }                                                                                                  // 13864
                } else {                                                                                               // 13865
                    this.base(value);                                                                                  // 13866
                }                                                                                                      // 13867
            },                                                                                                         // 13868
                                                                                                                       // 13869
            /**                                                                                                        // 13870
             * @see Alpaca.Fields.TextField#getValue                                                                   // 13871
             */                                                                                                        // 13872
            getValue: function() {                                                                                     // 13873
                return this.base();                                                                                    // 13874
            },                                                                                                         // 13875
                                                                                                                       // 13876
            /**                                                                                                        // 13877
             * Returns field value in datetime.                                                                        // 13878
             *                                                                                                         // 13879
             * @returns {Date} Field value.                                                                            // 13880
             */                                                                                                        // 13881
            getDatetime: function() {                                                                                  // 13882
                try {                                                                                                  // 13883
                    return this.field.datetimepicker('getDate');                                                       // 13884
                } catch (e) {                                                                                          // 13885
                    return this.getValue();                                                                            // 13886
                }                                                                                                      // 13887
            }                                                                                                          // 13888
        });                                                                                                            // 13889
                                                                                                                       // 13890
    Alpaca.registerFieldClass("datetime", Alpaca.Fields.DatetimeField);                                                // 13891
    Alpaca.registerDefaultFormatFieldMapping("datetime", "datetime");                                                  // 13892
})(jQuery);                                                                                                            // 13893
(function($) {                                                                                                         // 13894
                                                                                                                       // 13895
    var Alpaca = $.alpaca;                                                                                             // 13896
                                                                                                                       // 13897
    Alpaca.Fields.EditorField = Alpaca.Fields.TextField.extend(                                                        // 13898
        /**                                                                                                            // 13899
         * @lends Alpaca.Fields.EditorField.prototype                                                                  // 13900
         */                                                                                                            // 13901
        {                                                                                                              // 13902
            /**                                                                                                        // 13903
             * @constructs                                                                                             // 13904
             * @augments Alpaca.Fields.TextField                                                                       // 13905
             *                                                                                                         // 13906
             * @class Textarea control for chunk of text.                                                              // 13907
             *                                                                                                         // 13908
             * @param {Object} container Field container.                                                              // 13909
             * @param {Any} data Field data.                                                                           // 13910
             * @param {Object} options Field options.                                                                  // 13911
             * @param {Object} schema Field schema.                                                                    // 13912
             * @param {Object|String} view Field view.                                                                 // 13913
             * @param {Alpaca.Connector} connector Field connector.                                                    // 13914
             * @param {Function} errorCallback Error callback.                                                         // 13915
             */                                                                                                        // 13916
            constructor: function(container, data, options, schema, view, connector, errorCallback) {                  // 13917
                this.base(container, data, options, schema, view, connector, errorCallback);                           // 13918
            },                                                                                                         // 13919
                                                                                                                       // 13920
            /**                                                                                                        // 13921
             * @see Alpaca.Fields.TextField#setup                                                                      // 13922
             */                                                                                                        // 13923
            setup: function() {                                                                                        // 13924
                this.base();                                                                                           // 13925
                                                                                                                       // 13926
                this.controlFieldTemplateDescriptor = this.view.getTemplateDescriptor("controlFieldEditor");           // 13927
            },                                                                                                         // 13928
                                                                                                                       // 13929
            /**                                                                                                        // 13930
             * @see Alpaca.Fields.TextField#postRender                                                                 // 13931
             */                                                                                                        // 13932
            postRender: function(callback) {                                                                           // 13933
                                                                                                                       // 13934
                var self = this;                                                                                       // 13935
                                                                                                                       // 13936
                this.base(function() {                                                                                 // 13937
                                                                                                                       // 13938
                    if (self.fieldContainer)                                                                           // 13939
                    {                                                                                                  // 13940
                        self.fieldContainer.addClass('alpaca-controlfield-editor');                                    // 13941
                                                                                                                       // 13942
                        // set field container parent width = 100%                                                     // 13943
                        $(self.fieldContainer).parent().css("width", "100%");                                          // 13944
                                                                                                                       // 13945
                        // ACE HEIGHT                                                                                  // 13946
                        var aceHeight = self.options.aceHeight;                                                        // 13947
                        if (aceHeight)                                                                                 // 13948
                        {                                                                                              // 13949
                            $(self.fieldContainer).css("height", aceHeight);                                           // 13950
                        }                                                                                              // 13951
                                                                                                                       // 13952
                        // ACE WIDTH                                                                                   // 13953
                        var aceWidth = self.options.aceWidth;                                                          // 13954
                        if (!aceWidth) {                                                                               // 13955
                            aceWidth = "100%";                                                                         // 13956
                        }                                                                                              // 13957
                        $(self.fieldContainer).css("width", aceWidth);                                                 // 13958
                    }                                                                                                  // 13959
                                                                                                                       // 13960
                    // locate where we will insert the editor                                                          // 13961
                    var el = $(self.fieldContainer).find(".control-field-editor-el")[0];                               // 13962
                                                                                                                       // 13963
                    // ace must be included ahead of time                                                              // 13964
                    if (!ace && window.ace) {                                                                          // 13965
                        ace = window.ace;                                                                              // 13966
                    }                                                                                                  // 13967
                                                                                                                       // 13968
                    if (!ace)                                                                                          // 13969
                    {                                                                                                  // 13970
                        Alpaca.logError("Editor Field is missing the 'ace' Cloud 9 Editor");                           // 13971
                    }                                                                                                  // 13972
                    else                                                                                               // 13973
                    {                                                                                                  // 13974
                        self.editor = ace.edit(el);                                                                    // 13975
                                                                                                                       // 13976
                        // theme                                                                                       // 13977
                        var aceTheme = self.options.aceTheme;                                                          // 13978
                        if (!aceTheme) {                                                                               // 13979
                            aceTheme = "ace/theme/chrome";                                                             // 13980
                        }                                                                                              // 13981
                        self.editor.setTheme(aceTheme);                                                                // 13982
                                                                                                                       // 13983
                        // mode                                                                                        // 13984
                        var aceMode = self.options.aceMode;                                                            // 13985
                        if (!aceMode) {                                                                                // 13986
                            aceMode = "ace/mode/json";                                                                 // 13987
                        }                                                                                              // 13988
                        self.editor.getSession().setMode(aceMode);                                                     // 13989
                                                                                                                       // 13990
                        self.editor.renderer.setHScrollBarAlwaysVisible(false);                                        // 13991
                        //this.editor.renderer.setVScrollBarAlwaysVisible(false); // not implemented                   // 13992
                        self.editor.setShowPrintMargin(false);                                                         // 13993
                                                                                                                       // 13994
                        // set data onto editor                                                                        // 13995
                        self.editor.setValue(self.data);                                                               // 13996
                        self.editor.clearSelection();                                                                  // 13997
                                                                                                                       // 13998
                        // clear undo session                                                                          // 13999
                        self.editor.getSession().getUndoManager().reset();                                             // 14000
                                                                                                                       // 14001
                        // FIT-CONTENT the height of the editor to the contents contained within                       // 14002
                        if (self.options.aceFitContentHeight)                                                          // 14003
                        {                                                                                              // 14004
                            var heightUpdateFunction = function() {                                                    // 14005
                                                                                                                       // 14006
                                // http://stackoverflow.com/questions/11584061/                                        // 14007
                                var newHeight = self.editor.getSession().getScreenLength() * self.editor.renderer.lineHeight + self.editor.renderer.scrollBar.getWidth();
                                                                                                                       // 14009
                                $(self.fieldContainer).height(newHeight.toString() + "px");                            // 14010
                                                                                                                       // 14011
                                // This call is required for the editor to fix all of                                  // 14012
                                // its inner structure for adapting to a change in size                                // 14013
                                self.editor.resize();                                                                  // 14014
                            };                                                                                         // 14015
                                                                                                                       // 14016
                            // Set initial size to match initial content                                               // 14017
                            heightUpdateFunction();                                                                    // 14018
                                                                                                                       // 14019
                            // Whenever a change happens inside the ACE editor, update                                 // 14020
                            // the size again                                                                          // 14021
                            self.editor.getSession().on('change', heightUpdateFunction);                               // 14022
                        }                                                                                              // 14023
                                                                                                                       // 14024
                        // READONLY                                                                                    // 14025
                        if (self.schema.readonly)                                                                      // 14026
                        {                                                                                              // 14027
                            self.editor.setReadOnly(true);                                                             // 14028
                        }                                                                                              // 14029
                                                                                                                       // 14030
                        // if the editor's dom element gets destroyed, make sure we clean up the editor instance       // 14031
                        // normally, we expect Alpaca fields to be destroyed by the destroy() method but they may also be
                        // cleaned-up via the DOM, thus we check here.                                                 // 14033
                        $(el).bind('destroyed', function() {                                                           // 14034
                                                                                                                       // 14035
                            if (self.editor) {                                                                         // 14036
                                self.editor.destroy();                                                                 // 14037
                                self.editor = null;                                                                    // 14038
                            }                                                                                          // 14039
                        });                                                                                            // 14040
                    }                                                                                                  // 14041
                                                                                                                       // 14042
                    callback();                                                                                        // 14043
                });                                                                                                    // 14044
                                                                                                                       // 14045
            },                                                                                                         // 14046
                                                                                                                       // 14047
            /**                                                                                                        // 14048
             * @see Alpaca.Field#destroy                                                                               // 14049
             */                                                                                                        // 14050
            destroy: function() {                                                                                      // 14051
                                                                                                                       // 14052
                // destroy the editor instance                                                                         // 14053
                if (this.editor)                                                                                       // 14054
                {                                                                                                      // 14055
                    this.editor.destroy();                                                                             // 14056
                    this.editor = null;                                                                                // 14057
                }                                                                                                      // 14058
                                                                                                                       // 14059
                // call up to base method                                                                              // 14060
                this.base();                                                                                           // 14061
            },                                                                                                         // 14062
                                                                                                                       // 14063
            /**                                                                                                        // 14064
             * @return the ACE editor instance                                                                         // 14065
             */                                                                                                        // 14066
            getEditor: function()                                                                                      // 14067
            {                                                                                                          // 14068
                return this.editor;                                                                                    // 14069
            },                                                                                                         // 14070
                                                                                                                       // 14071
            /**                                                                                                        // 14072
             * @see Alpaca.ControlField#handleValidate                                                                 // 14073
             */                                                                                                        // 14074
            handleValidate: function() {                                                                               // 14075
                var baseStatus = this.base();                                                                          // 14076
                                                                                                                       // 14077
                var valInfo = this.validation;                                                                         // 14078
                                                                                                                       // 14079
                var wordCountStatus =  this._validateWordCount();                                                      // 14080
                valInfo["wordLimitExceeded"] = {                                                                       // 14081
                    "message": wordCountStatus ? "" : Alpaca.substituteTokens(this.view.getMessage("wordLimitExceeded"), [this.options.wordlimit]),
                    "status": wordCountStatus                                                                          // 14083
                };                                                                                                     // 14084
                                                                                                                       // 14085
                var editorAnnotationsStatus = this._validateEditorAnnotations();                                       // 14086
                valInfo["editorAnnotationsExist"] = {                                                                  // 14087
                    "message": editorAnnotationsStatus ? "" : this.view.getMessage("editorAnnotationsExist"),          // 14088
                    "status": editorAnnotationsStatus                                                                  // 14089
                };                                                                                                     // 14090
                                                                                                                       // 14091
                return baseStatus && valInfo["wordLimitExceeded"]["status"] && valInfo["editorAnnotationsExist"]["status"];
            },                                                                                                         // 14093
                                                                                                                       // 14094
            _validateEditorAnnotations: function() {                                                                   // 14095
                                                                                                                       // 14096
                if (this.editor)                                                                                       // 14097
                {                                                                                                      // 14098
                    var annotations = this.editor.getSession().getAnnotations();                                       // 14099
                    if (annotations && annotations.length > 0)                                                         // 14100
                    {                                                                                                  // 14101
                        return false;                                                                                  // 14102
                    }                                                                                                  // 14103
                }                                                                                                      // 14104
                                                                                                                       // 14105
                return true;                                                                                           // 14106
            },                                                                                                         // 14107
                                                                                                                       // 14108
            /**                                                                                                        // 14109
             * Validate for word limit.                                                                                // 14110
             *                                                                                                         // 14111
             * @returns {Boolean} True if the number of words is equal to or less than the word limit.                 // 14112
             */                                                                                                        // 14113
            _validateWordCount: function() {                                                                           // 14114
                                                                                                                       // 14115
                if (this.options.wordlimit && this.options.wordlimit > -1)                                             // 14116
                {                                                                                                      // 14117
                    var val = this.editor.getValue();                                                                  // 14118
                                                                                                                       // 14119
                    if (val)                                                                                           // 14120
                    {                                                                                                  // 14121
                        var wordcount = val.split(" ").length;                                                         // 14122
                        if (wordcount > this.options.wordlimit)                                                        // 14123
                        {                                                                                              // 14124
                            return false;                                                                              // 14125
                        }                                                                                              // 14126
                    }                                                                                                  // 14127
                }                                                                                                      // 14128
                                                                                                                       // 14129
                return true;                                                                                           // 14130
            },                                                                                                         // 14131
                                                                                                                       // 14132
            /**                                                                                                        // 14133
             * Force editor to resize to ensure it gets drawn correctly.                                               // 14134
             * @override                                                                                               // 14135
             */                                                                                                        // 14136
            onDependentReveal: function()                                                                              // 14137
            {                                                                                                          // 14138
                if (this.editor)                                                                                       // 14139
                {                                                                                                      // 14140
                    this.editor.resize();                                                                              // 14141
                }                                                                                                      // 14142
            },                                                                                                         // 14143
                                                                                                                       // 14144
            /**                                                                                                        // 14145
             *@see Alpaca.Fields.TextField#setValue                                                                    // 14146
             */                                                                                                        // 14147
            setValue: function(value) {                                                                                // 14148
                                                                                                                       // 14149
                var self = this;                                                                                       // 14150
                                                                                                                       // 14151
                if (this.editor)                                                                                       // 14152
                {                                                                                                      // 14153
                    this.editor.setValue(value);                                                                       // 14154
                }                                                                                                      // 14155
                                                                                                                       // 14156
                // be sure to call into base method                                                                    // 14157
                this.base(value);                                                                                      // 14158
            },                                                                                                         // 14159
                                                                                                                       // 14160
            /**                                                                                                        // 14161
             * @see Alpaca.Fields.TextField#getValue                                                                   // 14162
             */                                                                                                        // 14163
            getValue: function() {                                                                                     // 14164
                                                                                                                       // 14165
                var value = null;                                                                                      // 14166
                                                                                                                       // 14167
                if (this.editor)                                                                                       // 14168
                {                                                                                                      // 14169
                    value = this.editor.getValue();                                                                    // 14170
                }                                                                                                      // 14171
                                                                                                                       // 14172
                return value;                                                                                          // 14173
            }                                                                                                          // 14174
                                                                                                                       // 14175
        });                                                                                                            // 14176
                                                                                                                       // 14177
    Alpaca.registerMessages({                                                                                          // 14178
        "wordLimitExceeded": "The maximum word limit of {0} has been exceeded.",                                       // 14179
        "editorAnnotationsExist": "The editor has errors in it that must be corrected"                                 // 14180
    });                                                                                                                // 14181
                                                                                                                       // 14182
    Alpaca.registerTemplate("controlFieldEditor", '<div id="${id}" class="control-field-editor-el"></div>');           // 14183
    Alpaca.registerFieldClass("editor", Alpaca.Fields.EditorField);                                                    // 14184
                                                                                                                       // 14185
})(jQuery);                                                                                                            // 14186
(function($) {                                                                                                         // 14187
                                                                                                                       // 14188
    var Alpaca = $.alpaca;                                                                                             // 14189
                                                                                                                       // 14190
    Alpaca.Fields.EmailField = Alpaca.Fields.TextField.extend(                                                         // 14191
    /**                                                                                                                // 14192
     * @lends Alpaca.Fields.EmailField.prototype                                                                       // 14193
     */                                                                                                                // 14194
    {                                                                                                                  // 14195
        /**                                                                                                            // 14196
         * @constructs                                                                                                 // 14197
         * @augments Alpaca.Fields.TextField                                                                           // 14198
         *                                                                                                             // 14199
         * @class Control for JSON schema email format.                                                                // 14200
         *                                                                                                             // 14201
         * @param {Object} container Field container.                                                                  // 14202
         * @param {Any} data Field data.                                                                               // 14203
         * @param {Object} options Field options.                                                                      // 14204
         * @param {Object} schema Field schema.                                                                        // 14205
         * @param {Object|String} view Field view.                                                                     // 14206
         * @param {Alpaca.Connector} connector Field connector.                                                        // 14207
         * @param {Function} errorCallback Error callback.                                                             // 14208
         */                                                                                                            // 14209
        constructor: function(container, data, options, schema, view, connector, errorCallback) {                      // 14210
            this.base(container, data, options, schema, view, connector, errorCallback);                               // 14211
        },                                                                                                             // 14212
                                                                                                                       // 14213
        /**                                                                                                            // 14214
         * @see Alpaca.Fields.TextField#setup                                                                          // 14215
         */                                                                                                            // 14216
        setup: function() {                                                                                            // 14217
            this.base();                                                                                               // 14218
                                                                                                                       // 14219
            if (!this.schema.pattern) {                                                                                // 14220
                this.schema.pattern = Alpaca.regexps.email;                                                            // 14221
            }                                                                                                          // 14222
        },                                                                                                             // 14223
                                                                                                                       // 14224
        /**                                                                                                            // 14225
         * @see Alpaca.Fields.TextField#postRender                                                                     // 14226
         */                                                                                                            // 14227
        postRender: function(callback) {                                                                               // 14228
                                                                                                                       // 14229
            var self = this;                                                                                           // 14230
                                                                                                                       // 14231
            this.base(function() {                                                                                     // 14232
                                                                                                                       // 14233
                if (this.fieldContainer) {                                                                             // 14234
                    this.fieldContainer.addClass('alpaca-controlfield-email');                                         // 14235
                }                                                                                                      // 14236
                                                                                                                       // 14237
                callback();                                                                                            // 14238
                                                                                                                       // 14239
            });                                                                                                        // 14240
        },                                                                                                             // 14241
                                                                                                                       // 14242
        /**                                                                                                            // 14243
         * @see Alpaca.Fields.TextField#handleValidate                                                                 // 14244
         */                                                                                                            // 14245
        handleValidate: function() {                                                                                   // 14246
            var baseStatus = this.base();                                                                              // 14247
                                                                                                                       // 14248
            var valInfo = this.validation;                                                                             // 14249
                                                                                                                       // 14250
            if (!valInfo["invalidPattern"]["status"]) {                                                                // 14251
                valInfo["invalidPattern"]["message"] = this.view.getMessage("invalidEmail");                           // 14252
            }                                                                                                          // 14253
                                                                                                                       // 14254
            return baseStatus;                                                                                         // 14255
        }                                                                                                              // 14256
    });                                                                                                                // 14257
                                                                                                                       // 14258
    Alpaca.registerMessages({                                                                                          // 14259
        "invalidEmail": "Invalid Email address e.g. info@cloudcms.com"                                                 // 14260
    });                                                                                                                // 14261
    Alpaca.registerFieldClass("email", Alpaca.Fields.EmailField);                                                      // 14262
    Alpaca.registerDefaultFormatFieldMapping("email", "email");                                                        // 14263
})(jQuery);                                                                                                            // 14264
(function($) {                                                                                                         // 14265
                                                                                                                       // 14266
    var Alpaca = $.alpaca;                                                                                             // 14267
                                                                                                                       // 14268
    Alpaca.Fields.IntegerField = Alpaca.Fields.NumberField.extend(                                                     // 14269
    /**                                                                                                                // 14270
     * @lends Alpaca.Fields.IntegerField.prototype                                                                     // 14271
     */                                                                                                                // 14272
    {                                                                                                                  // 14273
        /**                                                                                                            // 14274
         * @constructs                                                                                                 // 14275
         * @augments Alpaca.Fields.NumberField                                                                         // 14276
         *                                                                                                             // 14277
         * @class Control for integers. If jQuery UI is enabled, it can also be                                        // 14278
         * turned into a slider.                                                                                       // 14279
         *<p>                                                                                                          // 14280
         * The following additional JSON Schema properties are supported:                                              // 14281
         *<p/>                                                                                                         // 14282
         *<code>                                                                                                       // 14283
         *     <pre>                                                                                                   // 14284
         * {                                                                                                           // 14285
         *    minimum: {number},                                                                                       // 14286
         *    maximum: {number},                                                                                       // 14287
         *    minimumCanEqual: {boolean},                                                                              // 14288
         *    maximumCanEqual: {boolean},                                                                              // 14289
         *    divisibleBy: {number}                                                                                    // 14290
         * }                                                                                                           // 14291
         * </pre>                                                                                                      // 14292
         * </code>                                                                                                     // 14293
         *                                                                                                             // 14294
         * @param {Object} container Field container.                                                                  // 14295
         * @param {Any} data Field data.                                                                               // 14296
         * @param {Object} options Field options.                                                                      // 14297
         * @param {Object} schema Field schema.                                                                        // 14298
         * @param {Object|String} view Field view.                                                                     // 14299
         * @param {Alpaca.Connector} connector Field connector.                                                        // 14300
         * @param {Function} errorCallback Error callback.                                                             // 14301
         */                                                                                                            // 14302
        constructor: function(container, data, options, schema, view, connector, errorCallback) {                      // 14303
            this.base(container, data, options, schema, view, connector, errorCallback);                               // 14304
        },                                                                                                             // 14305
                                                                                                                       // 14306
        /**                                                                                                            // 14307
         * @see Alpaca.Fields.NumberField#getValue                                                                     // 14308
         */                                                                                                            // 14309
        getValue: function() {                                                                                         // 14310
            var textValue = this.field.val();                                                                          // 14311
            if (Alpaca.isValEmpty(textValue)) {                                                                        // 14312
                return -1;                                                                                             // 14313
            } else {                                                                                                   // 14314
                return parseInt(textValue, 10);                                                                        // 14315
            }                                                                                                          // 14316
        },                                                                                                             // 14317
                                                                                                                       // 14318
        /**                                                                                                            // 14319
         * @see Alpaca.Field#onChange                                                                                  // 14320
         */                                                                                                            // 14321
        onChange: function(e) {                                                                                        // 14322
            this.base();                                                                                               // 14323
            if (this.slider) {                                                                                         // 14324
                this.slider.slider("value", this.getValue());                                                          // 14325
            }                                                                                                          // 14326
        },                                                                                                             // 14327
                                                                                                                       // 14328
        /**                                                                                                            // 14329
         * @see Alpaca.Fields.NumberField#postRender                                                                   // 14330
         */                                                                                                            // 14331
        postRender: function(callback)                                                                                 // 14332
        {                                                                                                              // 14333
            var self = this;                                                                                           // 14334
                                                                                                                       // 14335
            this.base(function() {                                                                                     // 14336
                                                                                                                       // 14337
                if (self.options.slider) {                                                                             // 14338
                    if (!Alpaca.isEmpty(self.schema.maximum) && !Alpaca.isEmpty(self.schema.minimum)) {                // 14339
                                                                                                                       // 14340
                        if (self.field)                                                                                // 14341
                        {                                                                                              // 14342
                            self.field.after('<div id="slider"></div>');                                               // 14343
                            self.slider = $('#slider', self.field.parent()).slider({                                   // 14344
                                value: self.getValue(),                                                                // 14345
                                min: self.schema.minimum,                                                              // 14346
                                max: self.schema.maximum,                                                              // 14347
                                slide: function(event, ui) {                                                           // 14348
                                    self.setValue(ui.value);                                                           // 14349
                                    self.renderValidationState();                                                      // 14350
                                }                                                                                      // 14351
                            });                                                                                        // 14352
                        }                                                                                              // 14353
                    }                                                                                                  // 14354
                }                                                                                                      // 14355
                                                                                                                       // 14356
                if (self.fieldContainer) {                                                                             // 14357
                    self.fieldContainer.addClass('alpaca-controlfield-integer');                                       // 14358
                }                                                                                                      // 14359
                                                                                                                       // 14360
                callback();                                                                                            // 14361
                                                                                                                       // 14362
            });                                                                                                        // 14363
        },                                                                                                             // 14364
                                                                                                                       // 14365
        /**                                                                                                            // 14366
         * @see Alpaca.Fields.NumberField#handleValidate                                                               // 14367
         */                                                                                                            // 14368
        handleValidate: function() {                                                                                   // 14369
                                                                                                                       // 14370
            var baseStatus = this.base();                                                                              // 14371
                                                                                                                       // 14372
            var valInfo = this.validation;                                                                             // 14373
                                                                                                                       // 14374
            if (!valInfo["stringNotANumber"]["status"]) {                                                              // 14375
                valInfo["stringNotANumber"]["message"] = this.view.getMessage("stringNotAnInteger");                   // 14376
            }                                                                                                          // 14377
                                                                                                                       // 14378
            return baseStatus;                                                                                         // 14379
        },                                                                                                             // 14380
                                                                                                                       // 14381
        /**                                                                                                            // 14382
         * Validates if it is an integer.                                                                              // 14383
         * @returns {Boolean} true if it is an integer                                                                 // 14384
         */                                                                                                            // 14385
        _validateNumber: function() {                                                                                  // 14386
            var textValue = this.field.val();                                                                          // 14387
                                                                                                                       // 14388
            if (Alpaca.isValEmpty(textValue)) {                                                                        // 14389
                return true;                                                                                           // 14390
            }                                                                                                          // 14391
                                                                                                                       // 14392
            var floatValue = this.getValue();                                                                          // 14393
                                                                                                                       // 14394
            // quick check to see if what they entered was a number                                                    // 14395
            if (isNaN(floatValue)) {                                                                                   // 14396
                return false;                                                                                          // 14397
            }                                                                                                          // 14398
                                                                                                                       // 14399
            // check if valid number format                                                                            // 14400
            if (!textValue.match(Alpaca.regexps.integer)) {                                                            // 14401
                return false;                                                                                          // 14402
            }                                                                                                          // 14403
                                                                                                                       // 14404
            return true;                                                                                               // 14405
        }                                                                                                              // 14406
    });                                                                                                                // 14407
                                                                                                                       // 14408
    // Additional Registrations                                                                                        // 14409
    Alpaca.registerMessages({                                                                                          // 14410
        "stringNotAnInteger": "This value is not an integer."                                                          // 14411
    });                                                                                                                // 14412
    Alpaca.registerFieldClass("integer", Alpaca.Fields.IntegerField);                                                  // 14413
    Alpaca.registerDefaultSchemaFieldMapping("integer", "integer");                                                    // 14414
})(jQuery);                                                                                                            // 14415
(function($) {                                                                                                         // 14416
                                                                                                                       // 14417
    var Alpaca = $.alpaca;                                                                                             // 14418
                                                                                                                       // 14419
    Alpaca.Fields.IPv4Field = Alpaca.Fields.TextField.extend(                                                          // 14420
    /**                                                                                                                // 14421
     * @lends Alpaca.Fields.IPv4Field.prototype                                                                        // 14422
     */                                                                                                                // 14423
    {                                                                                                                  // 14424
        /**                                                                                                            // 14425
         * @constructs                                                                                                 // 14426
         * @augments Alpaca.Fields.TextField                                                                           // 14427
         *                                                                                                             // 14428
         * @class Control for JSON schema ip-address format.                                                           // 14429
         *                                                                                                             // 14430
         * @param {Object} container Field container.                                                                  // 14431
         * @param {Any} data Field data.                                                                               // 14432
         * @param {Object} options Field options.                                                                      // 14433
         * @param {Object} schema Field schema.                                                                        // 14434
         * @param {Object|String} view Field view.                                                                     // 14435
         * @param {Alpaca.Connector} connector Field connector.                                                        // 14436
         * @param {Function} errorCallback Error callback.                                                             // 14437
         */                                                                                                            // 14438
        constructor: function(container, data, options, schema, view, connector, errorCallback) {                      // 14439
            this.base(container, data, options, schema, view, connector, errorCallback);                               // 14440
        },                                                                                                             // 14441
                                                                                                                       // 14442
        /**                                                                                                            // 14443
         * @see Alpaca.Fields.TextField#setup                                                                          // 14444
         */                                                                                                            // 14445
        setup: function() {                                                                                            // 14446
            this.base();                                                                                               // 14447
                                                                                                                       // 14448
            if (!this.schema.pattern) {                                                                                // 14449
                this.schema.pattern = Alpaca.regexps.ipv4;                                                             // 14450
            }                                                                                                          // 14451
        },                                                                                                             // 14452
                                                                                                                       // 14453
        /**                                                                                                            // 14454
         * @see Alpaca.Fields.TextField#postRender                                                                     // 14455
         */                                                                                                            // 14456
        postRender: function(callback) {                                                                               // 14457
                                                                                                                       // 14458
            var self = this;                                                                                           // 14459
                                                                                                                       // 14460
            this.base(function() {                                                                                     // 14461
                                                                                                                       // 14462
                if (self.fieldContainer) {                                                                             // 14463
                    self.fieldContainer.addClass('alpaca-controlfield-ipv4');                                          // 14464
                }                                                                                                      // 14465
                                                                                                                       // 14466
                callback();                                                                                            // 14467
                                                                                                                       // 14468
            });                                                                                                        // 14469
        },                                                                                                             // 14470
                                                                                                                       // 14471
        /**                                                                                                            // 14472
         * @see Alpaca.Fields.TextField#handleValidate                                                                 // 14473
         */                                                                                                            // 14474
        handleValidate: function() {                                                                                   // 14475
            var baseStatus = this.base();                                                                              // 14476
                                                                                                                       // 14477
            var valInfo = this.validation;                                                                             // 14478
                                                                                                                       // 14479
            if (!valInfo["invalidPattern"]["status"]) {                                                                // 14480
                valInfo["invalidPattern"]["message"] = this.view.getMessage("invalidIPv4");                            // 14481
            }                                                                                                          // 14482
                                                                                                                       // 14483
            return baseStatus;                                                                                         // 14484
        }                                                                                                              // 14485
    });                                                                                                                // 14486
                                                                                                                       // 14487
    Alpaca.registerMessages({                                                                                          // 14488
        "invalidIPv4": "Invalid IPv4 address, e.g. 192.168.0.1"                                                        // 14489
    });                                                                                                                // 14490
    Alpaca.registerFieldClass("ipv4", Alpaca.Fields.IPv4Field);                                                        // 14491
    Alpaca.registerDefaultFormatFieldMapping("ip-address", "ipv4");                                                    // 14492
})(jQuery);                                                                                                            // 14493
(function($) {                                                                                                         // 14494
                                                                                                                       // 14495
    var Alpaca = $.alpaca;                                                                                             // 14496
                                                                                                                       // 14497
    Alpaca.Fields.JSONField = Alpaca.Fields.TextAreaField.extend(                                                      // 14498
    /**                                                                                                                // 14499
     * @lends Alpaca.Fields.JSONField.prototype                                                                        // 14500
     */                                                                                                                // 14501
    {                                                                                                                  // 14502
        /**                                                                                                            // 14503
         * @constructs                                                                                                 // 14504
         * @augments Alpaca.Fields.TextAreaField                                                                       // 14505
         *                                                                                                             // 14506
         * @class JSON control for chunk of text.                                                                      // 14507
         *                                                                                                             // 14508
         * @param {Object} container Field container.                                                                  // 14509
         * @param {Any} data Field data.                                                                               // 14510
         * @param {Object} options Field options.                                                                      // 14511
         * @param {Object} schema Field schema.                                                                        // 14512
         * @param {Object|String} view Field view.                                                                     // 14513
         * @param {Alpaca.Connector} connector Field connector.                                                        // 14514
         * @param {Function} errorCallback Error callback.                                                             // 14515
         */                                                                                                            // 14516
        constructor: function(container, data, options, schema, view, connector, errorCallback) {                      // 14517
            this.base(container, data, options, schema, view, connector, errorCallback);                               // 14518
        },                                                                                                             // 14519
                                                                                                                       // 14520
        /**                                                                                                            // 14521
         * @see Alpaca.ContainerField#getValue                                                                         // 14522
         */                                                                                                            // 14523
        setValue: function(value) {                                                                                    // 14524
            if (Alpaca.isObject(value) || typeof(value) == "object") {                                                 // 14525
                value = JSON.stringify(value, null, 3);                                                                // 14526
            }                                                                                                          // 14527
            this.base(value);                                                                                          // 14528
        },                                                                                                             // 14529
                                                                                                                       // 14530
        /**                                                                                                            // 14531
         * @see Alpaca.ContainerField#getValue                                                                         // 14532
         */                                                                                                            // 14533
        getValue: function() {                                                                                         // 14534
                                                                                                                       // 14535
            var val = this.base();                                                                                     // 14536
                                                                                                                       // 14537
            if (val && Alpaca.isString(val)) {                                                                         // 14538
                val = JSON.parse(val);                                                                                 // 14539
            }                                                                                                          // 14540
                                                                                                                       // 14541
            return val;                                                                                                // 14542
        },                                                                                                             // 14543
                                                                                                                       // 14544
        /**                                                                                                            // 14545
         * @see Alpaca.Fields.TextField#handleValidate                                                                 // 14546
         */                                                                                                            // 14547
        handleValidate: function() {                                                                                   // 14548
            var baseStatus = this.base();                                                                              // 14549
                                                                                                                       // 14550
            var valInfo = this.validation;                                                                             // 14551
                                                                                                                       // 14552
			var status = this._validateJSON();                                                                                  // 14553
            valInfo["stringNotAJSON"] = {                                                                              // 14554
                "message": status.status ? "" : this.view.getMessage("stringNotAJSON") +" "+ status.message,           // 14555
                "status": status.status                                                                                // 14556
            };                                                                                                         // 14557
                                                                                                                       // 14558
            return baseStatus && valInfo["stringNotAJSON"]["status"] ;                                                 // 14559
        },                                                                                                             // 14560
                                                                                                                       // 14561
        /**                                                                                                            // 14562
         * Validates if it is a valid JSON object.                                                                     // 14563
         * @returns {Boolean} true if it is a valid JSON object                                                        // 14564
         */                                                                                                            // 14565
        _validateJSON: function() {                                                                                    // 14566
            var textValue = this.field.val();                                                                          // 14567
            // allow null                                                                                              // 14568
            if (Alpaca.isValEmpty(textValue)) {                                                                        // 14569
                return {                                                                                               // 14570
                    "status" : true                                                                                    // 14571
                };                                                                                                     // 14572
            }                                                                                                          // 14573
                                                                                                                       // 14574
            // parse the string                                                                                        // 14575
            try {                                                                                                      // 14576
                var obj = JSON.parse(textValue);                                                                       // 14577
                // format the string as well                                                                           // 14578
                this.setValue(JSON.stringify(obj, null, 3));                                                           // 14579
                return {                                                                                               // 14580
                    "status" : true                                                                                    // 14581
                };                                                                                                     // 14582
            } catch(e) {                                                                                               // 14583
                return {                                                                                               // 14584
                    "status" : false,                                                                                  // 14585
                    "message" : e.message                                                                              // 14586
                };                                                                                                     // 14587
            }                                                                                                          // 14588
        },                                                                                                             // 14589
                                                                                                                       // 14590
        /**                                                                                                            // 14591
         * @see Alpaca.Fields.TextAreaField#postRender                                                                 // 14592
         */                                                                                                            // 14593
        postRender: function(callback) {                                                                               // 14594
                                                                                                                       // 14595
            var self = this;                                                                                           // 14596
                                                                                                                       // 14597
            this.base(function() {                                                                                     // 14598
                                                                                                                       // 14599
                if (self.field)                                                                                        // 14600
                {                                                                                                      // 14601
                    // Some auto-formatting capabilities                                                               // 14602
                    self.field.bind('keypress', function(e) {                                                          // 14603
                        //console.log(e.which);                                                                        // 14604
                        if (e.which == 34) {                                                                           // 14605
                            self.field.insertAtCaret('"');                                                             // 14606
                        }                                                                                              // 14607
                        if (e.which == 123) {                                                                          // 14608
                            self.field.insertAtCaret('}');                                                             // 14609
                        }                                                                                              // 14610
                        if (e.which == 91) {                                                                           // 14611
                            self.field.insertAtCaret(']');                                                             // 14612
                        }                                                                                              // 14613
                    });                                                                                                // 14614
                    self.field.bind('keypress', 'Ctrl+l', function() {                                                 // 14615
                        self.getEl().removeClass("alpaca-field-focused");                                              // 14616
                                                                                                                       // 14617
                        // set class from state                                                                        // 14618
                        self.renderValidationState();                                                                  // 14619
                    });                                                                                                // 14620
                    self.field.attr('title','Type Ctrl+L to format and validate the JSON string.');                    // 14621
                }                                                                                                      // 14622
                                                                                                                       // 14623
                if (self.fieldContainer) {                                                                             // 14624
                    self.fieldContainer.addClass('alpaca-controlfield-json');                                          // 14625
                }                                                                                                      // 14626
                                                                                                                       // 14627
                callback();                                                                                            // 14628
                                                                                                                       // 14629
            });                                                                                                        // 14630
                                                                                                                       // 14631
        }                                                                                                              // 14632
    });                                                                                                                // 14633
                                                                                                                       // 14634
    // Additional Registrations                                                                                        // 14635
    Alpaca.registerMessages({                                                                                          // 14636
        "stringNotAJSON": "This value is not a valid JSON string."                                                     // 14637
    });                                                                                                                // 14638
                                                                                                                       // 14639
    Alpaca.registerFieldClass("json", Alpaca.Fields.JSONField);                                                        // 14640
                                                                                                                       // 14641
    $.fn.insertAtCaret = function (myValue) {                                                                          // 14642
                                                                                                                       // 14643
        return this.each(function() {                                                                                  // 14644
                                                                                                                       // 14645
            //IE support                                                                                               // 14646
            if (document.selection) {                                                                                  // 14647
                                                                                                                       // 14648
                this.focus();                                                                                          // 14649
                sel = document.selection.createRange();                                                                // 14650
                sel.text = myValue;                                                                                    // 14651
                this.focus();                                                                                          // 14652
                                                                                                                       // 14653
            } else if (this.selectionStart || this.selectionStart == '0') {                                            // 14654
                                                                                                                       // 14655
                //MOZILLA / NETSCAPE support                                                                           // 14656
                var startPos = this.selectionStart;                                                                    // 14657
                var endPos = this.selectionEnd;                                                                        // 14658
                var scrollTop = this.scrollTop;                                                                        // 14659
                this.value = this.value.substring(0, startPos) + myValue + this.value.substring(endPos, this.value.length);
                this.focus();                                                                                          // 14661
                this.selectionStart = startPos /*+ myValue.length*/;                                                   // 14662
                this.selectionEnd = startPos /*+ myValue.length*/;                                                     // 14663
                this.scrollTop = scrollTop;                                                                            // 14664
                                                                                                                       // 14665
            } else {                                                                                                   // 14666
                                                                                                                       // 14667
                this.value += myValue;                                                                                 // 14668
                this.focus();                                                                                          // 14669
            }                                                                                                          // 14670
        });                                                                                                            // 14671
    };                                                                                                                 // 14672
/*                                                                                                                     // 14673
 * jQuery Hotkeys Plugin                                                                                               // 14674
 * Copyright 2010, John Resig                                                                                          // 14675
 * Dual licensed under the MIT or GPL Version 2 licenses.                                                              // 14676
 *                                                                                                                     // 14677
 * Based upon the plugin by Tzury Bar Yochay:                                                                          // 14678
 * http://github.com/tzuryby/hotkeys                                                                                   // 14679
 *                                                                                                                     // 14680
 * Original idea by:                                                                                                   // 14681
 * Binny V A, http://www.openjs.com/scripts/events/keyboard_shortcuts/                                                 // 14682
*/                                                                                                                     // 14683
    jQuery.hotkeys = {                                                                                                 // 14684
        version: "0.8",                                                                                                // 14685
                                                                                                                       // 14686
        specialKeys: {                                                                                                 // 14687
            8: "backspace", 9: "tab", 13: "return", 16: "shift", 17: "ctrl", 18: "alt", 19: "pause",                   // 14688
            20: "capslock", 27: "esc", 32: "space", 33: "pageup", 34: "pagedown", 35: "end", 36: "home",               // 14689
            37: "left", 38: "up", 39: "right", 40: "down", 45: "insert", 46: "del",                                    // 14690
            96: "0", 97: "1", 98: "2", 99: "3", 100: "4", 101: "5", 102: "6", 103: "7",                                // 14691
            104: "8", 105: "9", 106: "*", 107: "+", 109: "-", 110: ".", 111 : "/",                                     // 14692
            112: "f1", 113: "f2", 114: "f3", 115: "f4", 116: "f5", 117: "f6", 118: "f7", 119: "f8",                    // 14693
            120: "f9", 121: "f10", 122: "f11", 123: "f12", 144: "numlock", 145: "scroll", 191: "/", 224: "meta"        // 14694
        },                                                                                                             // 14695
                                                                                                                       // 14696
        shiftNums: {                                                                                                   // 14697
            "`": "~", "1": "!", "2": "@", "3": "#", "4": "$", "5": "%", "6": "^", "7": "&",                            // 14698
            "8": "*", "9": "(", "0": ")", "-": "_", "=": "+", ";": ": ", "'": "\"", ",": "<",                          // 14699
            ".": ">",  "/": "?",  "\\": "|"                                                                            // 14700
        }                                                                                                              // 14701
    };                                                                                                                 // 14702
                                                                                                                       // 14703
    function keyHandler( handleObj ) {                                                                                 // 14704
        // Only care when a possible input has been specified                                                          // 14705
        if ( typeof handleObj.data !== "string" ) {                                                                    // 14706
            return;                                                                                                    // 14707
        }                                                                                                              // 14708
                                                                                                                       // 14709
        var origHandler = handleObj.handler,                                                                           // 14710
            keys = handleObj.data.toLowerCase().split(" ");                                                            // 14711
                                                                                                                       // 14712
        handleObj.handler = function( event ) {                                                                        // 14713
            // Don't fire in text-accepting inputs that we didn't directly bind to                                     // 14714
            if ( this !== event.target && (/textarea|select/i.test( event.target.nodeName ) ||                         // 14715
                 event.target.type === "text") ) {                                                                     // 14716
                return;                                                                                                // 14717
            }                                                                                                          // 14718
                                                                                                                       // 14719
            // Keypress represents characters, not special keys                                                        // 14720
            var special = event.type !== "keypress" && jQuery.hotkeys.specialKeys[ event.which ],                      // 14721
                character = String.fromCharCode( event.which ).toLowerCase(),                                          // 14722
                key, modif = "", possible = {};                                                                        // 14723
                                                                                                                       // 14724
            // check combinations (alt|ctrl|shift+anything)                                                            // 14725
            if ( event.altKey && special !== "alt" ) {                                                                 // 14726
                modif += "alt+";                                                                                       // 14727
            }                                                                                                          // 14728
                                                                                                                       // 14729
            if ( event.ctrlKey && special !== "ctrl" ) {                                                               // 14730
                modif += "ctrl+";                                                                                      // 14731
            }                                                                                                          // 14732
                                                                                                                       // 14733
            // TODO: Need to make sure this works consistently across platforms                                        // 14734
            if ( event.metaKey && !event.ctrlKey && special !== "meta" ) {                                             // 14735
                modif += "meta+";                                                                                      // 14736
            }                                                                                                          // 14737
                                                                                                                       // 14738
            if ( event.shiftKey && special !== "shift" ) {                                                             // 14739
                modif += "shift+";                                                                                     // 14740
            }                                                                                                          // 14741
                                                                                                                       // 14742
            if ( special ) {                                                                                           // 14743
                possible[ modif + special ] = true;                                                                    // 14744
                                                                                                                       // 14745
            } else {                                                                                                   // 14746
                possible[ modif + character ] = true;                                                                  // 14747
                possible[ modif + jQuery.hotkeys.shiftNums[ character ] ] = true;                                      // 14748
                                                                                                                       // 14749
                // "$" can be triggered as "Shift+4" or "Shift+$" or just "$"                                          // 14750
                if ( modif === "shift+" ) {                                                                            // 14751
                    possible[ jQuery.hotkeys.shiftNums[ character ] ] = true;                                          // 14752
                }                                                                                                      // 14753
            }                                                                                                          // 14754
                                                                                                                       // 14755
            for ( var i = 0, l = keys.length; i < l; i++ ) {                                                           // 14756
                if ( possible[ keys[i] ] ) {                                                                           // 14757
                    return origHandler.apply( this, arguments );                                                       // 14758
                }                                                                                                      // 14759
            }                                                                                                          // 14760
        };                                                                                                             // 14761
    }                                                                                                                  // 14762
                                                                                                                       // 14763
    jQuery.each([ "keydown", "keyup", "keypress" ], function() {                                                       // 14764
        jQuery.event.special[ this ] = { add: keyHandler };                                                            // 14765
    });                                                                                                                // 14766
                                                                                                                       // 14767
})(jQuery);                                                                                                            // 14768
(function($) {                                                                                                         // 14769
                                                                                                                       // 14770
    var Alpaca = $.alpaca;                                                                                             // 14771
                                                                                                                       // 14772
    Alpaca.Fields.IntegerField = Alpaca.Fields.NumberField.extend(                                                     // 14773
    /**                                                                                                                // 14774
     * @lends Alpaca.Fields.IntegerField.prototype                                                                     // 14775
     */                                                                                                                // 14776
    {                                                                                                                  // 14777
        /**                                                                                                            // 14778
         * @constructs                                                                                                 // 14779
         * @augments Alpaca.Fields.NumberField                                                                         // 14780
         *                                                                                                             // 14781
         * @class Control for integers. If jQuery UI is enabled, it can also be                                        // 14782
         * turned into a slider.                                                                                       // 14783
         *<p>                                                                                                          // 14784
         * The following additional JSON Schema properties are supported:                                              // 14785
         *<p/>                                                                                                         // 14786
         *<code>                                                                                                       // 14787
         *     <pre>                                                                                                   // 14788
         * {                                                                                                           // 14789
         *    minimum: {number},                                                                                       // 14790
         *    maximum: {number},                                                                                       // 14791
         *    minimumCanEqual: {boolean},                                                                              // 14792
         *    maximumCanEqual: {boolean},                                                                              // 14793
         *    divisibleBy: {number}                                                                                    // 14794
         * }                                                                                                           // 14795
         * </pre>                                                                                                      // 14796
         * </code>                                                                                                     // 14797
         *                                                                                                             // 14798
         * @param {Object} container Field container.                                                                  // 14799
         * @param {Any} data Field data.                                                                               // 14800
         * @param {Object} options Field options.                                                                      // 14801
         * @param {Object} schema Field schema.                                                                        // 14802
         * @param {Object|String} view Field view.                                                                     // 14803
         * @param {Alpaca.Connector} connector Field connector.                                                        // 14804
         * @param {Function} errorCallback Error callback.                                                             // 14805
         */                                                                                                            // 14806
        constructor: function(container, data, options, schema, view, connector, errorCallback) {                      // 14807
            this.base(container, data, options, schema, view, connector, errorCallback);                               // 14808
        },                                                                                                             // 14809
                                                                                                                       // 14810
        /**                                                                                                            // 14811
         * @see Alpaca.Fields.NumberField#getValue                                                                     // 14812
         */                                                                                                            // 14813
        getValue: function() {                                                                                         // 14814
            var textValue = this.field.val();                                                                          // 14815
            if (Alpaca.isValEmpty(textValue)) {                                                                        // 14816
                return -1;                                                                                             // 14817
            } else {                                                                                                   // 14818
                return parseInt(textValue, 10);                                                                        // 14819
            }                                                                                                          // 14820
        },                                                                                                             // 14821
                                                                                                                       // 14822
        /**                                                                                                            // 14823
         * @see Alpaca.Field#onChange                                                                                  // 14824
         */                                                                                                            // 14825
        onChange: function(e) {                                                                                        // 14826
            this.base();                                                                                               // 14827
            if (this.slider) {                                                                                         // 14828
                this.slider.slider("value", this.getValue());                                                          // 14829
            }                                                                                                          // 14830
        },                                                                                                             // 14831
                                                                                                                       // 14832
        /**                                                                                                            // 14833
         * @see Alpaca.Fields.NumberField#postRender                                                                   // 14834
         */                                                                                                            // 14835
        postRender: function(callback)                                                                                 // 14836
        {                                                                                                              // 14837
            var self = this;                                                                                           // 14838
                                                                                                                       // 14839
            this.base(function() {                                                                                     // 14840
                                                                                                                       // 14841
                if (self.options.slider) {                                                                             // 14842
                    if (!Alpaca.isEmpty(self.schema.maximum) && !Alpaca.isEmpty(self.schema.minimum)) {                // 14843
                                                                                                                       // 14844
                        if (self.field)                                                                                // 14845
                        {                                                                                              // 14846
                            self.field.after('<div id="slider"></div>');                                               // 14847
                            self.slider = $('#slider', self.field.parent()).slider({                                   // 14848
                                value: self.getValue(),                                                                // 14849
                                min: self.schema.minimum,                                                              // 14850
                                max: self.schema.maximum,                                                              // 14851
                                slide: function(event, ui) {                                                           // 14852
                                    self.setValue(ui.value);                                                           // 14853
                                    self.renderValidationState();                                                      // 14854
                                }                                                                                      // 14855
                            });                                                                                        // 14856
                        }                                                                                              // 14857
                    }                                                                                                  // 14858
                }                                                                                                      // 14859
                                                                                                                       // 14860
                if (self.fieldContainer) {                                                                             // 14861
                    self.fieldContainer.addClass('alpaca-controlfield-integer');                                       // 14862
                }                                                                                                      // 14863
                                                                                                                       // 14864
                callback();                                                                                            // 14865
                                                                                                                       // 14866
            });                                                                                                        // 14867
        },                                                                                                             // 14868
                                                                                                                       // 14869
        /**                                                                                                            // 14870
         * @see Alpaca.Fields.NumberField#handleValidate                                                               // 14871
         */                                                                                                            // 14872
        handleValidate: function() {                                                                                   // 14873
                                                                                                                       // 14874
            var baseStatus = this.base();                                                                              // 14875
                                                                                                                       // 14876
            var valInfo = this.validation;                                                                             // 14877
                                                                                                                       // 14878
            if (!valInfo["stringNotANumber"]["status"]) {                                                              // 14879
                valInfo["stringNotANumber"]["message"] = this.view.getMessage("stringNotAnInteger");                   // 14880
            }                                                                                                          // 14881
                                                                                                                       // 14882
            return baseStatus;                                                                                         // 14883
        },                                                                                                             // 14884
                                                                                                                       // 14885
        /**                                                                                                            // 14886
         * Validates if it is an integer.                                                                              // 14887
         * @returns {Boolean} true if it is an integer                                                                 // 14888
         */                                                                                                            // 14889
        _validateNumber: function() {                                                                                  // 14890
            var textValue = this.field.val();                                                                          // 14891
                                                                                                                       // 14892
            if (Alpaca.isValEmpty(textValue)) {                                                                        // 14893
                return true;                                                                                           // 14894
            }                                                                                                          // 14895
                                                                                                                       // 14896
            var floatValue = this.getValue();                                                                          // 14897
                                                                                                                       // 14898
            // quick check to see if what they entered was a number                                                    // 14899
            if (isNaN(floatValue)) {                                                                                   // 14900
                return false;                                                                                          // 14901
            }                                                                                                          // 14902
                                                                                                                       // 14903
            // check if valid number format                                                                            // 14904
            if (!textValue.match(Alpaca.regexps.integer)) {                                                            // 14905
                return false;                                                                                          // 14906
            }                                                                                                          // 14907
                                                                                                                       // 14908
            return true;                                                                                               // 14909
        }                                                                                                              // 14910
    });                                                                                                                // 14911
                                                                                                                       // 14912
    // Additional Registrations                                                                                        // 14913
    Alpaca.registerMessages({                                                                                          // 14914
        "stringNotAnInteger": "This value is not an integer."                                                          // 14915
    });                                                                                                                // 14916
    Alpaca.registerFieldClass("integer", Alpaca.Fields.IntegerField);                                                  // 14917
    Alpaca.registerDefaultSchemaFieldMapping("integer", "integer");                                                    // 14918
})(jQuery);                                                                                                            // 14919
(function($) {                                                                                                         // 14920
                                                                                                                       // 14921
    var Alpaca = $.alpaca;                                                                                             // 14922
                                                                                                                       // 14923
    Alpaca.Fields.LowerCaseField = Alpaca.Fields.TextField.extend(                                                     // 14924
    /**                                                                                                                // 14925
     * @lends Alpaca.Fields.LowerCaseField.prototype                                                                   // 14926
     */                                                                                                                // 14927
    {                                                                                                                  // 14928
        /**                                                                                                            // 14929
         * @constructs                                                                                                 // 14930
         * @augments Alpaca.Fields.TextField                                                                           // 14931
         *                                                                                                             // 14932
         * @class Control for lower case text.                                                                         // 14933
         *                                                                                                             // 14934
         * @param {Object} container Field container.                                                                  // 14935
         * @param {Any} data Field data.                                                                               // 14936
         * @param {Object} options Field options.                                                                      // 14937
         * @param {Object} schema Field schema.                                                                        // 14938
         * @param {Object|String} view Field view.                                                                     // 14939
         * @param {Alpaca.Connector} connector Field connector.                                                        // 14940
         * @param {Function} errorCallback Error callback.                                                             // 14941
         */                                                                                                            // 14942
        constructor: function(container, data, options, schema, view, connector, errorCallback) {                      // 14943
            this.base(container, data, options, schema, view, connector, errorCallback);                               // 14944
        },                                                                                                             // 14945
                                                                                                                       // 14946
        /**                                                                                                            // 14947
         * @see Alpaca.Fields.TextField#postRender                                                                     // 14948
         */                                                                                                            // 14949
        postRender: function(callback)                                                                                 // 14950
        {                                                                                                              // 14951
            var self = this;                                                                                           // 14952
                                                                                                                       // 14953
            this.base(function() {                                                                                     // 14954
                                                                                                                       // 14955
                if (self.fieldContainer) {                                                                             // 14956
                    self.fieldContainer.addClass('alpaca-controlfield-lowercase');                                     // 14957
                }                                                                                                      // 14958
                                                                                                                       // 14959
                callback();                                                                                            // 14960
                                                                                                                       // 14961
            });                                                                                                        // 14962
        },                                                                                                             // 14963
                                                                                                                       // 14964
        /**                                                                                                            // 14965
         * @see Alpaca.Fields.TextField#setValue                                                                       // 14966
         */                                                                                                            // 14967
        setValue: function(val) {                                                                                      // 14968
            var lowerValue = val.toLowerCase();                                                                        // 14969
                                                                                                                       // 14970
            if (lowerValue != this.getValue()) {                                                                       // 14971
                this.base(lowerValue);                                                                                 // 14972
            }                                                                                                          // 14973
        },                                                                                                             // 14974
                                                                                                                       // 14975
        /**                                                                                                            // 14976
         * @see Alpaca.ControlField#onKeyPress                                                                         // 14977
         */                                                                                                            // 14978
        onKeyPress: function(e) {                                                                                      // 14979
            this.base(e);                                                                                              // 14980
                                                                                                                       // 14981
            var _this = this;                                                                                          // 14982
                                                                                                                       // 14983
            Alpaca.later(25, this, function() {                                                                        // 14984
                var v = _this.getValue();                                                                              // 14985
                _this.setValue(v);                                                                                     // 14986
            });                                                                                                        // 14987
        }                                                                                                              // 14988
    });                                                                                                                // 14989
                                                                                                                       // 14990
    Alpaca.registerFieldClass("lowercase", Alpaca.Fields.LowerCaseField);                                              // 14991
    Alpaca.registerDefaultFormatFieldMapping("lowercase", "lowercase");                                                // 14992
                                                                                                                       // 14993
})(jQuery);                                                                                                            // 14994
(function($) {                                                                                                         // 14995
                                                                                                                       // 14996
    var Alpaca = $.alpaca;                                                                                             // 14997
                                                                                                                       // 14998
    Alpaca.Fields.MapField = Alpaca.Fields.ArrayField.extend(                                                          // 14999
    /**                                                                                                                // 15000
     * @lends Alpaca.Fields.MapField.prototype                                                                         // 15001
     */                                                                                                                // 15002
    {                                                                                                                  // 15003
        /**                                                                                                            // 15004
         * @constructs                                                                                                 // 15005
         * @augments Alpaca.Fields.TextAreaField                                                                       // 15006
         *                                                                                                             // 15007
         * @class JSON control for chunk of text.                                                                      // 15008
         *                                                                                                             // 15009
         * @param {Object} container Field container.                                                                  // 15010
         * @param {Any} data Field data.                                                                               // 15011
         * @param {Object} options Field options.                                                                      // 15012
         * @param {Object} schema Field schema.                                                                        // 15013
         * @param {Object|String} view Field view.                                                                     // 15014
         * @param {Alpaca.Connector} connector Field connector.                                                        // 15015
         * @param {Function} errorCallback Error callback.                                                             // 15016
         */                                                                                                            // 15017
        constructor: function(container, data, options, schema, view, connector, errorCallback) {                      // 15018
            this.base(container, data, options, schema, view, connector, errorCallback);                               // 15019
        },                                                                                                             // 15020
                                                                                                                       // 15021
        /**                                                                                                            // 15022
         * @see Alpaca.Fields.TextAreaField#setup                                                                      // 15023
         */                                                                                                            // 15024
        setup: function() {                                                                                            // 15025
                                                                                                                       // 15026
            this.base();                                                                                               // 15027
                                                                                                                       // 15028
            Alpaca.mergeObject(this.options, {                                                                         // 15029
                "forceRevalidation" : true                                                                             // 15030
            });                                                                                                        // 15031
                                                                                                                       // 15032
            if (Alpaca.isEmpty(this.data)) {                                                                           // 15033
                return;                                                                                                // 15034
            }                                                                                                          // 15035
                                                                                                                       // 15036
            if (!Alpaca.isArray(this.data)) {                                                                          // 15037
                                                                                                                       // 15038
                if (Alpaca.isObject(this.data)) {                                                                      // 15039
                    var newData = [];                                                                                  // 15040
                    $.each(this.data, function(key, value) {                                                           // 15041
                        var newValue = Alpaca.copyOf(value);                                                           // 15042
                        newValue["_key"] = key;                                                                        // 15043
                        newData.push(newValue);                                                                        // 15044
                    });                                                                                                // 15045
                    this.data = newData;                                                                               // 15046
                }                                                                                                      // 15047
            }                                                                                                          // 15048
        },                                                                                                             // 15049
                                                                                                                       // 15050
        /**                                                                                                            // 15051
         * @see Alpaca.ContainerField#getValue                                                                         // 15052
         */                                                                                                            // 15053
        getValue: function()                                                                                           // 15054
        {                                                                                                              // 15055
            // if we don't have any children and we're not required, hand back undefined                               // 15056
            if (this.children.length === 0 && !this.schema.required)                                                   // 15057
            {                                                                                                          // 15058
                return;                                                                                                // 15059
            }                                                                                                          // 15060
                                                                                                                       // 15061
            var o = {};                                                                                                // 15062
            for (var i = 0; i < this.children.length; i++) {                                                           // 15063
                var v = this.children[i].getValue();                                                                   // 15064
                var key = v["_key"];                                                                                   // 15065
                if (key) {                                                                                             // 15066
                    delete v["_key"];                                                                                  // 15067
                    o[key] = v;                                                                                        // 15068
                }                                                                                                      // 15069
            }                                                                                                          // 15070
            return o;                                                                                                  // 15071
        },                                                                                                             // 15072
                                                                                                                       // 15073
        /**                                                                                                            // 15074
         * @see Alpaca.Fields.TextField#handleValidate                                                                 // 15075
         */                                                                                                            // 15076
        handleValidate: function() {                                                                                   // 15077
            var baseStatus = this.base();                                                                              // 15078
                                                                                                                       // 15079
            var valInfo = this.validation;                                                                             // 15080
                                                                                                                       // 15081
            var isValidMapKeysNotEmpty = this._validateMapKeysNotEmpty();                                              // 15082
            valInfo["keyMissing"] = {                                                                                  // 15083
                "message": isValidMapKeysNotEmpty ? "" : this.view.getMessage("keyMissing"),                           // 15084
                "status": isValidMapKeysNotEmpty                                                                       // 15085
            };                                                                                                         // 15086
                                                                                                                       // 15087
            var isValidMapKeysUnique = this._validateMapKeysUnique();                                                  // 15088
            valInfo["keyNotUnique"] = {                                                                                // 15089
                "message": isValidMapKeysUnique ? "" : this.view.getMessage("keyNotUnique"),                           // 15090
                "status": isValidMapKeysUnique                                                                         // 15091
            };                                                                                                         // 15092
                                                                                                                       // 15093
            return baseStatus && valInfo["keyMissing"]["status"] && valInfo["keyNotUnique"]["status"];                 // 15094
        },                                                                                                             // 15095
                                                                                                                       // 15096
        /**                                                                                                            // 15097
         * Validates if key fields are unique.                                                                         // 15098
         * @returns {Boolean} true if keys are unique                                                                  // 15099
         */                                                                                                            // 15100
        _validateMapKeysNotEmpty: function() {                                                                         // 15101
                                                                                                                       // 15102
            var isValid = true;                                                                                        // 15103
                                                                                                                       // 15104
            for (var i = 0; i < this.children.length; i++) {                                                           // 15105
                var v = this.children[i].getValue();                                                                   // 15106
                var key = v["_key"];                                                                                   // 15107
                                                                                                                       // 15108
                if (!key) {                                                                                            // 15109
                    isValid = false;                                                                                   // 15110
                    break;                                                                                             // 15111
                }                                                                                                      // 15112
            }                                                                                                          // 15113
                                                                                                                       // 15114
            return isValid;                                                                                            // 15115
        },                                                                                                             // 15116
                                                                                                                       // 15117
        /**                                                                                                            // 15118
         * Validates if key fields are unique.                                                                         // 15119
         * @returns {Boolean} true if keys are unique                                                                  // 15120
         */                                                                                                            // 15121
        _validateMapKeysUnique: function() {                                                                           // 15122
                                                                                                                       // 15123
            var isValid = true;                                                                                        // 15124
                                                                                                                       // 15125
            var keys = {};                                                                                             // 15126
            for (var i = 0; i < this.children.length; i++) {                                                           // 15127
                var v = this.children[i].getValue();                                                                   // 15128
                var key = v["_key"];                                                                                   // 15129
                                                                                                                       // 15130
                if (keys[key]) {                                                                                       // 15131
                    isValid = false;                                                                                   // 15132
                }                                                                                                      // 15133
                                                                                                                       // 15134
                keys[key] = key;                                                                                       // 15135
            }                                                                                                          // 15136
                                                                                                                       // 15137
            return isValid;                                                                                            // 15138
        },                                                                                                             // 15139
                                                                                                                       // 15140
        /**                                                                                                            // 15141
         * @see Alpaca.Fields.TextAreaField#postRender                                                                 // 15142
         */                                                                                                            // 15143
        postRender: function(callback)                                                                                 // 15144
        {                                                                                                              // 15145
            var self = this;                                                                                           // 15146
                                                                                                                       // 15147
            this.base(function() {                                                                                     // 15148
                                                                                                                       // 15149
                if (this.fieldContainer) {                                                                             // 15150
                    this.fieldContainer.addClass('alpaca-controlfield-map');                                           // 15151
                }                                                                                                      // 15152
                                                                                                                       // 15153
                callback();                                                                                            // 15154
            });                                                                                                        // 15155
                                                                                                                       // 15156
        }                                                                                                              // 15157
    });                                                                                                                // 15158
                                                                                                                       // 15159
    Alpaca.registerFieldClass("map", Alpaca.Fields.MapField);                                                          // 15160
                                                                                                                       // 15161
    // Additional Registrations                                                                                        // 15162
    Alpaca.registerMessages({                                                                                          // 15163
        "keyNotUnique": "Keys of map field are not unique.",                                                           // 15164
        "keyMissing": "Map contains an empty key."                                                                     // 15165
    });                                                                                                                // 15166
})(jQuery);                                                                                                            // 15167
(function($) {                                                                                                         // 15168
                                                                                                                       // 15169
    var Alpaca = $.alpaca;                                                                                             // 15170
                                                                                                                       // 15171
    Alpaca.Fields.PasswordField = Alpaca.Fields.TextField.extend(                                                      // 15172
    /**                                                                                                                // 15173
     * @lends Alpaca.Fields.PasswordField.prototype                                                                    // 15174
     */                                                                                                                // 15175
    {                                                                                                                  // 15176
        /**                                                                                                            // 15177
         * @constructs                                                                                                 // 15178
         * @augments Alpaca.Fields.TextField                                                                           // 15179
         *                                                                                                             // 15180
         * @class Control for JSON schema password format.                                                             // 15181
         *                                                                                                             // 15182
         * @param {Object} container Field container.                                                                  // 15183
         * @param {Any} data Field data.                                                                               // 15184
         * @param {Object} options Field options.                                                                      // 15185
         * @param {Object} schema Field schema.                                                                        // 15186
         * @param {Object|String} view Field view.                                                                     // 15187
         * @param {Alpaca.Connector} connector Field connector.                                                        // 15188
         * @param {Function} errorCallback Error callback.                                                             // 15189
         */                                                                                                            // 15190
        constructor: function(container, data, options, schema, view, connector, errorCallback) {                      // 15191
            this.base(container, data, options, schema, view, connector, errorCallback);                               // 15192
        },                                                                                                             // 15193
                                                                                                                       // 15194
        /**                                                                                                            // 15195
         * @see Alpaca.Fields.TextField#setup                                                                          // 15196
         */                                                                                                            // 15197
        setup: function() {                                                                                            // 15198
            this.base();                                                                                               // 15199
                                                                                                                       // 15200
            if (!this.schema.pattern) {                                                                                // 15201
                this.schema.pattern = Alpaca.regexps.password;                                                         // 15202
            }                                                                                                          // 15203
                                                                                                                       // 15204
            this.controlFieldTemplateDescriptor = this.view.getTemplateDescriptor("controlFieldPassword");             // 15205
        },                                                                                                             // 15206
                                                                                                                       // 15207
        /**                                                                                                            // 15208
         * @see Alpaca.Fields.TextField#postRender                                                                     // 15209
         */                                                                                                            // 15210
        postRender: function(callback) {                                                                               // 15211
                                                                                                                       // 15212
            var self = this;                                                                                           // 15213
                                                                                                                       // 15214
            this.base(function() {                                                                                     // 15215
                                                                                                                       // 15216
                if (self.fieldContainer) {                                                                             // 15217
                    self.fieldContainer.addClass('alpaca-controlfield-password');                                      // 15218
                }                                                                                                      // 15219
                                                                                                                       // 15220
                callback();                                                                                            // 15221
            });                                                                                                        // 15222
        },                                                                                                             // 15223
                                                                                                                       // 15224
        /**                                                                                                            // 15225
         * @see Alpaca.Fields.TextField#handleValidate                                                                 // 15226
         */                                                                                                            // 15227
        handleValidate: function() {                                                                                   // 15228
            var baseStatus = this.base();                                                                              // 15229
                                                                                                                       // 15230
            var valInfo = this.validation;                                                                             // 15231
                                                                                                                       // 15232
            if (!valInfo["invalidPattern"]["status"]) {                                                                // 15233
                valInfo["invalidPattern"]["message"] = this.view.getMessage("invalidPassword");                        // 15234
            }                                                                                                          // 15235
                                                                                                                       // 15236
            return baseStatus;                                                                                         // 15237
        }                                                                                                              // 15238
    });                                                                                                                // 15239
                                                                                                                       // 15240
    Alpaca.registerTemplate("controlFieldPassword", '<input type="password" id="${id}" {{if options.size}}size="${options.size}"{{/if}} {{if options.readonly}}readonly="readonly"{{/if}} {{if name}}name="${name}"{{/if}} {{each(i,v) options.data}}data-${i}="${v}"{{/each}}/>');
    Alpaca.registerMessages({                                                                                          // 15242
        "invalidPassword": "Invalid Password"                                                                          // 15243
    });                                                                                                                // 15244
    Alpaca.registerFieldClass("password", Alpaca.Fields.PasswordField);                                                // 15245
    Alpaca.registerDefaultFormatFieldMapping("password", "password");                                                  // 15246
})(jQuery);                                                                                                            // 15247
(function($) {                                                                                                         // 15248
                                                                                                                       // 15249
    var Alpaca = $.alpaca;                                                                                             // 15250
                                                                                                                       // 15251
    Alpaca.Fields.PersonalNameField = Alpaca.Fields.TextField.extend(                                                  // 15252
    /**                                                                                                                // 15253
     * @lends Alpaca.Fields.PersonalNameField.prototype                                                                // 15254
     */                                                                                                                // 15255
    {                                                                                                                  // 15256
        /**                                                                                                            // 15257
         * @constructs                                                                                                 // 15258
         * @augments Alpaca.Fields.TextField                                                                           // 15259
         *                                                                                                             // 15260
         * @class Control for upper case text.                                                                         // 15261
         *                                                                                                             // 15262
         * @param {Object} container Field container.                                                                  // 15263
         * @param {Any} data Field data.                                                                               // 15264
         * @param {Object} options Field options.                                                                      // 15265
         * @param {Object} schema Field schema.                                                                        // 15266
         * @param {Object|String} view Field view.                                                                     // 15267
         * @param {Alpaca.Connector} connector Field connector.                                                        // 15268
         * @param {Function} errorCallback Error callback.                                                             // 15269
         */                                                                                                            // 15270
        constructor: function(container, data, options, schema, view, connector, errorCallback) {                      // 15271
            this.base(container, data, options, schema, view, connector, errorCallback);                               // 15272
        },                                                                                                             // 15273
                                                                                                                       // 15274
        /**                                                                                                            // 15275
         * @see Alpaca.Fields.TextField#postRender                                                                     // 15276
         */                                                                                                            // 15277
        postRender: function(callback) {                                                                               // 15278
                                                                                                                       // 15279
            var self = this;                                                                                           // 15280
                                                                                                                       // 15281
            this.base(function() {                                                                                     // 15282
                                                                                                                       // 15283
                if (self.fieldContainer) {                                                                             // 15284
                    self.fieldContainer.addClass('alpaca-controlfield-personalname');                                  // 15285
                }                                                                                                      // 15286
                                                                                                                       // 15287
                callback();                                                                                            // 15288
                                                                                                                       // 15289
            });                                                                                                        // 15290
        },                                                                                                             // 15291
                                                                                                                       // 15292
        /**                                                                                                            // 15293
         * @see Alpaca.Fields.TextField#setValue                                                                       // 15294
         */                                                                                                            // 15295
        setValue: function(val) {                                                                                      // 15296
            var upperValue = "";                                                                                       // 15297
                                                                                                                       // 15298
            for ( var i = 0; i < val.length; i++ ) {                                                                   // 15299
                if ( i === 0 ) {                                                                                       // 15300
                    upperValue += val.charAt(i).toUpperCase();                                                         // 15301
                } else if (val.charAt(i-1) == ' ' ||  val.charAt(i-1) == '-' || val.charAt(i-1) == "'") {              // 15302
                    upperValue += val.charAt(i).toUpperCase();                                                         // 15303
                } else {                                                                                               // 15304
                    upperValue += val.charAt(i);                                                                       // 15305
                }                                                                                                      // 15306
            }                                                                                                          // 15307
                                                                                                                       // 15308
            if (upperValue != this.getValue()) {                                                                       // 15309
                this.base(upperValue);                                                                                 // 15310
            }                                                                                                          // 15311
        },                                                                                                             // 15312
                                                                                                                       // 15313
        /**                                                                                                            // 15314
         * @see Alpaca.ControlField#onKeyPress                                                                         // 15315
         */                                                                                                            // 15316
        onKeyPress: function(e) {                                                                                      // 15317
            this.base(e);                                                                                              // 15318
                                                                                                                       // 15319
            var _this = this;                                                                                          // 15320
                                                                                                                       // 15321
            Alpaca.later(25, this, function() {                                                                        // 15322
                var v = _this.getValue();                                                                              // 15323
                _this.setValue(v);                                                                                     // 15324
            });                                                                                                        // 15325
        }                                                                                                              // 15326
    });                                                                                                                // 15327
                                                                                                                       // 15328
    Alpaca.registerFieldClass("personalname", Alpaca.Fields.PersonalNameField);                                        // 15329
                                                                                                                       // 15330
})(jQuery);                                                                                                            // 15331
(function($) {                                                                                                         // 15332
                                                                                                                       // 15333
    var Alpaca = $.alpaca;                                                                                             // 15334
                                                                                                                       // 15335
    Alpaca.Fields.PhoneField = Alpaca.Fields.TextField.extend(                                                         // 15336
    /**                                                                                                                // 15337
     * @lends Alpaca.Fields.PhoneField.prototype                                                                       // 15338
     */                                                                                                                // 15339
    {                                                                                                                  // 15340
        /**                                                                                                            // 15341
         * @constructs                                                                                                 // 15342
         * @augments Alpaca.Fields.TextField                                                                           // 15343
         *                                                                                                             // 15344
         * @class Control for standard US phone numbers.                                                               // 15345
         *                                                                                                             // 15346
         * @param {Object} container Field container.                                                                  // 15347
         * @param {Any} data Field data.                                                                               // 15348
         * @param {Object} options Field options.                                                                      // 15349
         * @param {Object} schema Field schema.                                                                        // 15350
         * @param {Object|String} view Field view.                                                                     // 15351
         * @param {Alpaca.Connector} connector Field connector.                                                        // 15352
         * @param {Function} errorCallback Error callback.                                                             // 15353
         */                                                                                                            // 15354
        constructor: function(container, data, options, schema, view, connector, errorCallback) {                      // 15355
            this.base(container, data, options, schema, view, connector, errorCallback);                               // 15356
        },                                                                                                             // 15357
                                                                                                                       // 15358
        /**                                                                                                            // 15359
         * @see Alpaca.Fields.TextField#setup                                                                          // 15360
         */                                                                                                            // 15361
        setup: function() {                                                                                            // 15362
            this.base();                                                                                               // 15363
                                                                                                                       // 15364
            if (!this.schema.pattern) {                                                                                // 15365
                this.schema.pattern = Alpaca.regexps.phone;                                                            // 15366
            }                                                                                                          // 15367
                                                                                                                       // 15368
            if (Alpaca.isEmpty(this.options.maskString)) {                                                             // 15369
                this.options.maskString = "(999) 999-9999";                                                            // 15370
            }                                                                                                          // 15371
                                                                                                                       // 15372
        },                                                                                                             // 15373
                                                                                                                       // 15374
        /**                                                                                                            // 15375
         * @see Alpaca.Fields.TextField#postRender                                                                     // 15376
         */                                                                                                            // 15377
        postRender: function(callback) {                                                                               // 15378
                                                                                                                       // 15379
            var self = this;                                                                                           // 15380
                                                                                                                       // 15381
            this.base(function() {                                                                                     // 15382
                                                                                                                       // 15383
                if (self.fieldContainer) {                                                                             // 15384
                    self.fieldContainer.addClass('alpaca-controlfield-phone');                                         // 15385
                }                                                                                                      // 15386
                                                                                                                       // 15387
                callback();                                                                                            // 15388
                                                                                                                       // 15389
            });                                                                                                        // 15390
        },                                                                                                             // 15391
                                                                                                                       // 15392
        /**                                                                                                            // 15393
         * @see Alpaca.Fields.TextField#handleValidate                                                                 // 15394
         */                                                                                                            // 15395
        handleValidate: function() {                                                                                   // 15396
            var baseStatus = this.base();                                                                              // 15397
                                                                                                                       // 15398
            var valInfo = this.validation;                                                                             // 15399
                                                                                                                       // 15400
            if (!valInfo["invalidPattern"]["status"]) {                                                                // 15401
                valInfo["invalidPattern"]["message"] = this.view.getMessage("invalidPhone");                           // 15402
            }                                                                                                          // 15403
                                                                                                                       // 15404
            return baseStatus;                                                                                         // 15405
        }                                                                                                              // 15406
    });                                                                                                                // 15407
                                                                                                                       // 15408
    Alpaca.registerMessages({                                                                                          // 15409
        "invalidPhone": "Invalid Phone Number, e.g. (123) 456-9999"                                                    // 15410
    });                                                                                                                // 15411
    Alpaca.registerFieldClass("phone", Alpaca.Fields.PhoneField);                                                      // 15412
    Alpaca.registerDefaultFormatFieldMapping("phone", "phone");                                                        // 15413
})(jQuery);                                                                                                            // 15414
(function($) {                                                                                                         // 15415
                                                                                                                       // 15416
    var Alpaca = $.alpaca;                                                                                             // 15417
                                                                                                                       // 15418
    Alpaca.Fields.TagField = Alpaca.Fields.LowerCaseField.extend(                                                      // 15419
    /**                                                                                                                // 15420
     * @lends Alpaca.Fields.TagField.prototype                                                                         // 15421
     */                                                                                                                // 15422
    {                                                                                                                  // 15423
        /**                                                                                                            // 15424
         * @constructs                                                                                                 // 15425
         * @augments Alpaca.Fields.TextField                                                                           // 15426
         *                                                                                                             // 15427
         * @class Time control for JSON schema time format.                                                            // 15428
         *                                                                                                             // 15429
         * @param {Object} container Field container.                                                                  // 15430
         * @param {Any} data Field data.                                                                               // 15431
         * @param {Object} options Field options.                                                                      // 15432
         * @param {Object} schema Field schema.                                                                        // 15433
         * @param {Object|String} view Field view.                                                                     // 15434
         * @param {Alpaca.Connector} connector Field connector.                                                        // 15435
         * @param {Function} errorCallback Error callback.                                                             // 15436
         */                                                                                                            // 15437
        constructor: function(container, data, options, schema, view, connector, errorCallback) {                      // 15438
            this.base(container, data, options, schema, view, connector, errorCallback);                               // 15439
        },                                                                                                             // 15440
                                                                                                                       // 15441
        /**                                                                                                            // 15442
         * @see Alpaca.Fields.TextField#setup                                                                          // 15443
         */                                                                                                            // 15444
        setup: function() {                                                                                            // 15445
            this.base();                                                                                               // 15446
                                                                                                                       // 15447
            if (!this.options.separator) {                                                                             // 15448
                this.options.separator = ",";                                                                          // 15449
            }                                                                                                          // 15450
        },                                                                                                             // 15451
                                                                                                                       // 15452
        /**                                                                                                            // 15453
         * @see Alpaca.Fields.TextField#postRender                                                                     // 15454
         */                                                                                                            // 15455
        postRender: function(callback) {                                                                               // 15456
                                                                                                                       // 15457
            var self = this;                                                                                           // 15458
                                                                                                                       // 15459
            this.base(function() {                                                                                     // 15460
                                                                                                                       // 15461
                if (self.fieldContainer) {                                                                             // 15462
                    self.fieldContainer.addClass('alpaca-controlfield-tag');                                           // 15463
                }                                                                                                      // 15464
                                                                                                                       // 15465
                callback();                                                                                            // 15466
            });                                                                                                        // 15467
        },                                                                                                             // 15468
                                                                                                                       // 15469
        /**                                                                                                            // 15470
         * @see Alpaca.Fields.TextField#getValue                                                                       // 15471
         */                                                                                                            // 15472
        getValue: function() {                                                                                         // 15473
            var val = this.base();                                                                                     // 15474
            if (val === "") {                                                                                          // 15475
                return [];                                                                                             // 15476
            }                                                                                                          // 15477
            return val.split(this.options.separator);                                                                  // 15478
        },                                                                                                             // 15479
                                                                                                                       // 15480
        /**                                                                                                            // 15481
         * @see Alpaca.Fields.TextField#setValue                                                                       // 15482
         */                                                                                                            // 15483
        setValue: function(val) {                                                                                      // 15484
            if (val === "") {                                                                                          // 15485
                return;                                                                                                // 15486
            }                                                                                                          // 15487
                                                                                                                       // 15488
            this.base(val.join(this.options.separator));                                                               // 15489
        },                                                                                                             // 15490
                                                                                                                       // 15491
        /**                                                                                                            // 15492
         * @see Alpaca.Field#onBlur                                                                                    // 15493
         */                                                                                                            // 15494
        onBlur: function(e) {                                                                                          // 15495
            this.base(e);                                                                                              // 15496
                                                                                                                       // 15497
            var vals = this.getValue();                                                                                // 15498
                                                                                                                       // 15499
            var trimmed = [];                                                                                          // 15500
                                                                                                                       // 15501
            $.each(vals, function(i, v) {                                                                              // 15502
                if (v.trim() !== "") {                                                                                 // 15503
                    trimmed.push(v.trim());                                                                            // 15504
                }                                                                                                      // 15505
            });                                                                                                        // 15506
                                                                                                                       // 15507
            this.setValue(trimmed);                                                                                    // 15508
                                                                                                                       // 15509
        }                                                                                                              // 15510
    });                                                                                                                // 15511
                                                                                                                       // 15512
    Alpaca.registerFieldClass("tag", Alpaca.Fields.TagField);                                                          // 15513
})(jQuery);                                                                                                            // 15514
(function($) {                                                                                                         // 15515
                                                                                                                       // 15516
    var Alpaca = $.alpaca;                                                                                             // 15517
                                                                                                                       // 15518
    Alpaca.Fields.TimeField = Alpaca.Fields.TextField.extend(                                                          // 15519
    /**                                                                                                                // 15520
     * @lends Alpaca.Fields.TimeField.prototype                                                                        // 15521
     */                                                                                                                // 15522
    {                                                                                                                  // 15523
        /**                                                                                                            // 15524
         * @constructs                                                                                                 // 15525
         * @augments Alpaca.Fields.TextField                                                                           // 15526
         *                                                                                                             // 15527
         * @class Time control for JSON schema time format.                                                            // 15528
         *                                                                                                             // 15529
         * @param {Object} container Field container.                                                                  // 15530
         * @param {Any} data Field data.                                                                               // 15531
         * @param {Object} options Field options.                                                                      // 15532
         * @param {Object} schema Field schema.                                                                        // 15533
         * @param {Object|String} view Field view.                                                                     // 15534
         * @param {Alpaca.Connector} connector Field connector.                                                        // 15535
         * @param {Function} errorCallback Error callback.                                                             // 15536
         */                                                                                                            // 15537
        constructor: function(container, data, options, schema, view, connector, errorCallback) {                      // 15538
            this.base(container, data, options, schema, view, connector, errorCallback);                               // 15539
        },                                                                                                             // 15540
                                                                                                                       // 15541
        /**                                                                                                            // 15542
         * @see Alpaca.Fields.TextField#setup                                                                          // 15543
         */                                                                                                            // 15544
        setup: function() {                                                                                            // 15545
            this.base();                                                                                               // 15546
                                                                                                                       // 15547
            if (!this.options.timeFormat) {                                                                            // 15548
                this.options.timeFormat = "hh:mm:ss";                                                                  // 15549
            }                                                                                                          // 15550
                                                                                                                       // 15551
            if (!this.options.timeFormatRegex) {                                                                       // 15552
                this.options.timeFormatRegex = /^(([0-1][0-9])|([2][0-3])):([0-5][0-9]):([0-5][0-9])$/;                // 15553
            }                                                                                                          // 15554
                                                                                                                       // 15555
            if (Alpaca.isEmpty(this.options.maskString)) {                                                             // 15556
                this.options.maskString = "99:99:99";                                                                  // 15557
            }                                                                                                          // 15558
        },                                                                                                             // 15559
                                                                                                                       // 15560
        /**                                                                                                            // 15561
         * @see Alpaca.Fields.TextField#postRender                                                                     // 15562
         */                                                                                                            // 15563
        postRender: function(callback) {                                                                               // 15564
                                                                                                                       // 15565
            var self = this;                                                                                           // 15566
                                                                                                                       // 15567
            this.base(function() {                                                                                     // 15568
                                                                                                                       // 15569
                if (self.fieldContainer) {                                                                             // 15570
                    self.fieldContainer.addClass('alpaca-controlfield-time');                                          // 15571
                }                                                                                                      // 15572
                                                                                                                       // 15573
                callback();                                                                                            // 15574
                                                                                                                       // 15575
            });                                                                                                        // 15576
        },                                                                                                             // 15577
                                                                                                                       // 15578
        /**                                                                                                            // 15579
         * @see Alpaca.Field#onChange                                                                                  // 15580
         */                                                                                                            // 15581
        onChange: function(e) {                                                                                        // 15582
            this.base();                                                                                               // 15583
            this.renderValidationState();                                                                              // 15584
        },                                                                                                             // 15585
                                                                                                                       // 15586
        /**                                                                                                            // 15587
         * @see Alpaca.Fields.TextField#handleValitime                                                                 // 15588
         */                                                                                                            // 15589
        handleValidate: function() {                                                                                   // 15590
            var baseStatus = this.base();                                                                              // 15591
                                                                                                                       // 15592
            var valInfo = this.validation;                                                                             // 15593
                                                                                                                       // 15594
            var status = this._validateTimeFormat();                                                                   // 15595
            valInfo["invalidTime"] = {                                                                                 // 15596
                "message": status ? "" : Alpaca.substituteTokens(this.view.getMessage("invalidTime"), [this.options.timeFormat]),
                "status": status                                                                                       // 15598
            };                                                                                                         // 15599
                                                                                                                       // 15600
            return baseStatus && valInfo["invalidTime"]["status"];                                                     // 15601
        },                                                                                                             // 15602
                                                                                                                       // 15603
        /**                                                                                                            // 15604
         * Valitimes time format.                                                                                      // 15605
         * @returns {Boolean} True if it is a valid time, false otherwise.                                             // 15606
         */                                                                                                            // 15607
        _validateTimeFormat: function() {                                                                              // 15608
            var value = this.field.val();                                                                              // 15609
            if (!this.schema.required && (Alpaca.isValEmpty(value) || value == "__:__:__")) {                          // 15610
                return true;                                                                                           // 15611
            }                                                                                                          // 15612
            //valitime the time without the help of timepicker.parseTime                                               // 15613
            return value.match(this.options.timeFormatRegex);                                                          // 15614
        }                                                                                                              // 15615
    });                                                                                                                // 15616
                                                                                                                       // 15617
    Alpaca.registerMessages({                                                                                          // 15618
        "invalidTime": "Invalid time for format {0}"                                                                   // 15619
    });                                                                                                                // 15620
    Alpaca.registerFieldClass("time", Alpaca.Fields.TimeField);                                                        // 15621
    Alpaca.registerDefaultFormatFieldMapping("time", "time");                                                          // 15622
})(jQuery);                                                                                                            // 15623
(function($) {                                                                                                         // 15624
                                                                                                                       // 15625
    var Alpaca = $.alpaca;                                                                                             // 15626
                                                                                                                       // 15627
    Alpaca.Fields.UpperCaseField = Alpaca.Fields.TextField.extend(                                                     // 15628
    /**                                                                                                                // 15629
     * @lends Alpaca.Fields.UpperCaseField.prototype                                                                   // 15630
     */                                                                                                                // 15631
    {                                                                                                                  // 15632
        /**                                                                                                            // 15633
         * @constructs                                                                                                 // 15634
         * @augments Alpaca.Fields.TextField                                                                           // 15635
         *                                                                                                             // 15636
         * @class Control for upper case text.                                                                         // 15637
         *                                                                                                             // 15638
         * @param {Object} container Field container.                                                                  // 15639
         * @param {Any} data Field data.                                                                               // 15640
         * @param {Object} options Field options.                                                                      // 15641
         * @param {Object} schema Field schema.                                                                        // 15642
         * @param {Object|String} view Field view.                                                                     // 15643
         * @param {Alpaca.Connector} connector Field connector.                                                        // 15644
         * @param {Function} errorCallback Error callback.                                                             // 15645
         */                                                                                                            // 15646
        constructor: function(container, data, options, schema, view, connector, errorCallback) {                      // 15647
            this.base(container, data, options, schema, view, connector, errorCallback);                               // 15648
        },                                                                                                             // 15649
                                                                                                                       // 15650
        /**                                                                                                            // 15651
         * @see Alpaca.Fields.TextField#postRender                                                                     // 15652
         */                                                                                                            // 15653
        postRender: function(callback) {                                                                               // 15654
                                                                                                                       // 15655
            var self = this;                                                                                           // 15656
                                                                                                                       // 15657
            this.base(function() {                                                                                     // 15658
                                                                                                                       // 15659
                if (self.fieldContainer) {                                                                             // 15660
                    self.fieldContainer.addClass('alpaca-controlfield-uppercase');                                     // 15661
                }                                                                                                      // 15662
                                                                                                                       // 15663
                callback();                                                                                            // 15664
                                                                                                                       // 15665
            });                                                                                                        // 15666
        },                                                                                                             // 15667
                                                                                                                       // 15668
        /**                                                                                                            // 15669
         * @see Alpaca.Fields.TextField#setValue                                                                       // 15670
         */                                                                                                            // 15671
        setValue: function(val) {                                                                                      // 15672
                                                                                                                       // 15673
            var upperValue = val.toUpperCase();                                                                        // 15674
                                                                                                                       // 15675
            if (upperValue != this.getValue()) {                                                                       // 15676
                this.base(upperValue);                                                                                 // 15677
            }                                                                                                          // 15678
        },                                                                                                             // 15679
                                                                                                                       // 15680
        /**                                                                                                            // 15681
         * @see Alpaca.ControlField#onKeyPress                                                                         // 15682
         */                                                                                                            // 15683
        onKeyPress: function(e) {                                                                                      // 15684
            this.base(e);                                                                                              // 15685
                                                                                                                       // 15686
            var _this = this;                                                                                          // 15687
                                                                                                                       // 15688
            Alpaca.later(25, this, function() {                                                                        // 15689
                var v = _this.getValue();                                                                              // 15690
                _this.setValue(v);                                                                                     // 15691
            });                                                                                                        // 15692
        }                                                                                                              // 15693
    });                                                                                                                // 15694
                                                                                                                       // 15695
    Alpaca.registerFieldClass("uppercase", Alpaca.Fields.UpperCaseField);                                              // 15696
    Alpaca.registerDefaultFormatFieldMapping("uppercase", "uppercase");                                                // 15697
                                                                                                                       // 15698
})(jQuery);                                                                                                            // 15699
(function($) {                                                                                                         // 15700
                                                                                                                       // 15701
    var Alpaca = $.alpaca;                                                                                             // 15702
                                                                                                                       // 15703
    Alpaca.Fields.WysiwygField = Alpaca.Fields.TextAreaField.extend(                                                   // 15704
    /**                                                                                                                // 15705
     * @lends Alpaca.Fields.WysiwygField.prototype                                                                     // 15706
     */                                                                                                                // 15707
    {                                                                                                                  // 15708
        /**                                                                                                            // 15709
         * @constructs                                                                                                 // 15710
         * @augments Alpaca.Fields.TextAreaField                                                                       // 15711
         *                                                                                                             // 15712
         * @class WYSIWYG control for chunk of text.                                                                   // 15713
         *                                                                                                             // 15714
         * @param {Object} container Field container.                                                                  // 15715
         * @param {Any} data Field data.                                                                               // 15716
         * @param {Object} options Field options.                                                                      // 15717
         * @param {Object} schema Field schema.                                                                        // 15718
         * @param {Object|String} view Field view.                                                                     // 15719
         * @param {Alpaca.Connector} connector Field connector.                                                        // 15720
         * @param {Function} errorCallback Error callback.                                                             // 15721
         */                                                                                                            // 15722
        constructor: function(container, data, options, schema, view, connector, errorCallback) {                      // 15723
            this.base(container, data, options, schema, view, connector, errorCallback);                               // 15724
                                                                                                                       // 15725
            this.controlsConfig = {};                                                                                  // 15726
            this.controlsConfig.simple = {                                                                             // 15727
                "html": { "visible": true },                                                                           // 15728
                "createLink": { "visible": false },                                                                    // 15729
                "unLink": { "visible": false },                                                                        // 15730
                "h1": { "visible": false },                                                                            // 15731
                "h2": { "visible": false },                                                                            // 15732
                "h3": { "visible": false },                                                                            // 15733
                "indent": { "visible": false },                                                                        // 15734
                "insertHorizontalRule": { "visible": false },                                                          // 15735
                "insertImage": { "visible": false },                                                                   // 15736
                "insertOrderedList": { "visible": false },                                                             // 15737
                "insertTable": { "visible": false },                                                                   // 15738
                "insertUnorderedList": { "visible": false },                                                           // 15739
                "justifyCenter": { "visible": false },                                                                 // 15740
                "justifyFull": { "visible": false },                                                                   // 15741
                "justifyLeft": { "visible": false },                                                                   // 15742
                "justifyRight": { "visible": false },                                                                  // 15743
                "outdent": { "visible": false },                                                                       // 15744
                "redo": { "visible": false },                                                                          // 15745
                "removeFormat": { "visible": false },                                                                  // 15746
                "subscript": { "visible": false },                                                                     // 15747
                "superscript": { "visible": false },                                                                   // 15748
                "undo": { "visible": false },                                                                          // 15749
                "code": { "visible": false },                                                                          // 15750
                "strikeThrough": { "visible": false }                                                                  // 15751
            };                                                                                                         // 15752
        },                                                                                                             // 15753
                                                                                                                       // 15754
        /**                                                                                                            // 15755
         * @see Alpaca.Fields.TextAreaField#setup                                                                      // 15756
         */                                                                                                            // 15757
        setup: function() {                                                                                            // 15758
            this.base();                                                                                               // 15759
                                                                                                                       // 15760
            // instantiated plugin reference                                                                           // 15761
            this.plugin = null;                                                                                        // 15762
        },                                                                                                             // 15763
                                                                                                                       // 15764
        /**                                                                                                            // 15765
         * @see Alpaca.Fields.TextAreaField#postRender                                                                 // 15766
         */                                                                                                            // 15767
        postRender: function(callback) {                                                                               // 15768
                                                                                                                       // 15769
            var self = this;                                                                                           // 15770
                                                                                                                       // 15771
            this.base(function() {                                                                                     // 15772
                                                                                                                       // 15773
                // see if we can render jWysiwyg                                                                       // 15774
                if (self.field && $.wysiwyg)                                                                           // 15775
                {                                                                                                      // 15776
                    var wysiwygOptions = self.options.wysiwyg ? self.options.wysiwyg : {};                             // 15777
                                                                                                                       // 15778
                    if (wysiwygOptions.controls)                                                                       // 15779
                    {                                                                                                  // 15780
                        if (typeof(wysiwygOptions.controls) === "string")                                              // 15781
                        {                                                                                              // 15782
                            wysiwygOptions.controls = self.controlsConfig[wysiwygOptions.controls];                    // 15783
                            if (!wysiwygOptions.controls)                                                              // 15784
                            {                                                                                          // 15785
                                wysiwygOptions.controls = {};                                                          // 15786
                            }                                                                                          // 15787
                        }                                                                                              // 15788
                    }                                                                                                  // 15789
                                                                                                                       // 15790
                    if (self.options.onDemand)                                                                         // 15791
                    {                                                                                                  // 15792
                        self.outerEl.find("textarea").mouseover(function() {                                           // 15793
                                                                                                                       // 15794
                            if (!self.plugin)                                                                          // 15795
                            {                                                                                          // 15796
                                self.plugin = $(this).wysiwyg(wysiwygOptions);                                         // 15797
                                                                                                                       // 15798
                                self.outerEl.find(".wysiwyg").mouseout(function() {                                    // 15799
                                                                                                                       // 15800
                                    if (self.plugin) {                                                                 // 15801
                                        self.plugin.wysiwyg('destroy');                                                // 15802
                                    }                                                                                  // 15803
                                                                                                                       // 15804
                                    self.plugin = null;                                                                // 15805
                                                                                                                       // 15806
                                });                                                                                    // 15807
                            }                                                                                          // 15808
                        });                                                                                            // 15809
                    }                                                                                                  // 15810
                    else                                                                                               // 15811
                    {                                                                                                  // 15812
                        self.plugin = self.field.wysiwyg(wysiwygOptions);                                              // 15813
                    }                                                                                                  // 15814
                                                                                                                       // 15815
                    self.outerEl.find(".wysiwyg").mouseout(function() {                                                // 15816
                        self.data = _this.getValue();                                                                  // 15817
                        self.renderValidationState();                                                                  // 15818
                    });                                                                                                // 15819
                }                                                                                                      // 15820
                                                                                                                       // 15821
                if (self.fieldContainer) {                                                                             // 15822
                    self.fieldContainer.addClass('alpaca-controlfield-wysiwyg');                                       // 15823
                }                                                                                                      // 15824
                                                                                                                       // 15825
                callback();                                                                                            // 15826
            });                                                                                                        // 15827
                                                                                                                       // 15828
        }                                                                                                              // 15829
    });                                                                                                                // 15830
                                                                                                                       // 15831
    Alpaca.registerFieldClass("wysiwyg", Alpaca.Fields.WysiwygField);                                                  // 15832
                                                                                                                       // 15833
})(jQuery);                                                                                                            // 15834
(function($) {                                                                                                         // 15835
                                                                                                                       // 15836
    var Alpaca = $.alpaca;                                                                                             // 15837
                                                                                                                       // 15838
    Alpaca.Fields.StateField = Alpaca.Fields.SelectField.extend(                                                       // 15839
    /**                                                                                                                // 15840
     * @lends Alpaca.Fields.StateField.prototype                                                                       // 15841
     */                                                                                                                // 15842
    {                                                                                                                  // 15843
        /**                                                                                                            // 15844
         * @constructs                                                                                                 // 15845
         * @augments Alpaca.Fields.TextField                                                                           // 15846
         *                                                                                                             // 15847
         * @class State Control                                                                                        // 15848
         *                                                                                                             // 15849
         * @param {Object} container Field container.                                                                  // 15850
         * @param {Any} data Field data.                                                                               // 15851
         * @param {Object} options Field options.                                                                      // 15852
         * @param {Object} schema Field schema.                                                                        // 15853
         * @param {Object|String} view Field view.                                                                     // 15854
         * @param {Alpaca.Connector} connector Field connector.                                                        // 15855
         * @param {Function} errorCallback Error callback.                                                             // 15856
         */                                                                                                            // 15857
        constructor: function(container, data, options, schema, view, connector, errorCallback) {                      // 15858
            this.base(container, data, options, schema, view, connector, errorCallback);                               // 15859
        },                                                                                                             // 15860
                                                                                                                       // 15861
        /**                                                                                                            // 15862
         * @see Alpaca.Fields.TextField#setup                                                                          // 15863
         */                                                                                                            // 15864
        setup: function() {                                                                                            // 15865
                                                                                                                       // 15866
            // defaults                                                                                                // 15867
            if (Alpaca.isUndefined(this.options.capitalize)) {                                                         // 15868
                this.options.capitalize = false;                                                                       // 15869
            }                                                                                                          // 15870
            if (Alpaca.isUndefined(this.options.includeStates)) {                                                      // 15871
                this.options.includeStates = true;                                                                     // 15872
            }                                                                                                          // 15873
            if (Alpaca.isUndefined(this.options.includeTerritories)) {                                                 // 15874
                this.options.includeTerritories = true;                                                                // 15875
            }                                                                                                          // 15876
            if (Alpaca.isUndefined(this.options.format)) {                                                             // 15877
                this.options.format = "name";                                                                          // 15878
            }                                                                                                          // 15879
                                                                                                                       // 15880
            // validate settings                                                                                       // 15881
            if (this.options.format == "name" || this.options.format == "code")                                        // 15882
            {                                                                                                          // 15883
                // valid formats                                                                                       // 15884
            }                                                                                                          // 15885
            else                                                                                                       // 15886
            {                                                                                                          // 15887
                Alpaca.logError("The configured state format: " + this.options.format + " is not a legal value [name, code]");
                                                                                                                       // 15889
                // default to name format                                                                              // 15890
                this.options.format = "name";                                                                          // 15891
            }                                                                                                          // 15892
                                                                                                                       // 15893
            // configure                                                                                               // 15894
            var holdings = Alpaca.retrieveUSHoldings(                                                                  // 15895
                this.options.includeStates,                                                                            // 15896
                this.options.includeTerritories,                                                                       // 15897
                (this.options.format == "code"),                                                                       // 15898
                this.options.capitalize);                                                                              // 15899
                                                                                                                       // 15900
            this.schema["enum"] = holdings.keys;                                                                       // 15901
            this.options.optionLabels = holdings.values;                                                               // 15902
                                                                                                                       // 15903
            this.base();                                                                                               // 15904
        },                                                                                                             // 15905
                                                                                                                       // 15906
        /**                                                                                                            // 15907
         * @see Alpaca.Fields.TextField#postRender                                                                     // 15908
         */                                                                                                            // 15909
        postRender: function(callback) {                                                                               // 15910
                                                                                                                       // 15911
            var self = this;                                                                                           // 15912
                                                                                                                       // 15913
            this.base(function() {                                                                                     // 15914
                                                                                                                       // 15915
                if (self.fieldContainer) {                                                                             // 15916
                    self.fieldContainer.addClass('alpaca-controlfield-state');                                         // 15917
                }                                                                                                      // 15918
                                                                                                                       // 15919
                callback();                                                                                            // 15920
                                                                                                                       // 15921
            });                                                                                                        // 15922
        },                                                                                                             // 15923
                                                                                                                       // 15924
        /**                                                                                                            // 15925
         * @see Alpaca.Fields.TextField#handleValidate                                                                 // 15926
         */                                                                                                            // 15927
        handleValidate: function() {                                                                                   // 15928
            var baseStatus = this.base();                                                                              // 15929
                                                                                                                       // 15930
            // no additional validation                                                                                // 15931
                                                                                                                       // 15932
            return baseStatus;                                                                                         // 15933
        }                                                                                                              // 15934
    });                                                                                                                // 15935
                                                                                                                       // 15936
    Alpaca.registerFieldClass("state", Alpaca.Fields.StateField);                                                      // 15937
    Alpaca.registerDefaultFormatFieldMapping("state", "state");                                                        // 15938
                                                                                                                       // 15939
    /**                                                                                                                // 15940
     * Helper function to retrieve the holdings of US states and territories.                                          // 15941
     *                                                                                                                 // 15942
     * @param {Boolean} includeStates whether to include US states                                                     // 15943
     * @param {Boolean} includeTerritories whether to include US territories                                           // 15944
     * @param {Boolean} codeValue whether to hand back US holding codes (instead of names)                             // 15945
     * @param {Boolean} capitalize whether to capitalize the values handed back                                        // 15946
     *                                                                                                                 // 15947
     * @type {Object} an object containing "keys" and "values", both of which are arrays.                              // 15948
     */                                                                                                                // 15949
    Alpaca.retrieveUSHoldings = function()                                                                             // 15950
    {                                                                                                                  // 15951
        var holdings = [];                                                                                             // 15952
        holdings.push({                                                                                                // 15953
            "name": "Arkansas",                                                                                        // 15954
            "code": "AK",                                                                                              // 15955
            "state": true,                                                                                             // 15956
            "territory": false                                                                                         // 15957
        });                                                                                                            // 15958
        holdings.push({                                                                                                // 15959
            "name": "Alabama",                                                                                         // 15960
            "code": "AL",                                                                                              // 15961
            "state": true,                                                                                             // 15962
            "territory": false                                                                                         // 15963
        });                                                                                                            // 15964
        holdings.push({                                                                                                // 15965
            "name": "American Samoa",                                                                                  // 15966
            "code": "AS",                                                                                              // 15967
            "state": false,                                                                                            // 15968
            "territory": true                                                                                          // 15969
        });                                                                                                            // 15970
        holdings.push({                                                                                                // 15971
            "name": "Arizona",                                                                                         // 15972
            "code": "AR",                                                                                              // 15973
            "state": true,                                                                                             // 15974
            "territory": false                                                                                         // 15975
        });                                                                                                            // 15976
        holdings.push({                                                                                                // 15977
            "name": "California",                                                                                      // 15978
            "code": "CA",                                                                                              // 15979
            "state": true,                                                                                             // 15980
            "territory": false                                                                                         // 15981
        });                                                                                                            // 15982
        holdings.push({                                                                                                // 15983
            "name": "Colorado",                                                                                        // 15984
            "code": "CO",                                                                                              // 15985
            "state": true,                                                                                             // 15986
            "territory": false                                                                                         // 15987
        });                                                                                                            // 15988
        holdings.push({                                                                                                // 15989
            "name": "Connecticut",                                                                                     // 15990
            "code": "CT",                                                                                              // 15991
            "state": true,                                                                                             // 15992
            "territory": false                                                                                         // 15993
        });                                                                                                            // 15994
        holdings.push({                                                                                                // 15995
            "name": "Delaware",                                                                                        // 15996
            "code": "DE",                                                                                              // 15997
            "state": true,                                                                                             // 15998
            "territory": false                                                                                         // 15999
        });                                                                                                            // 16000
        holdings.push({                                                                                                // 16001
            "name": "Distict of Columbia",                                                                             // 16002
            "code": "DC",                                                                                              // 16003
            "state": false,                                                                                            // 16004
            "territory": true                                                                                          // 16005
        });                                                                                                            // 16006
        holdings.push({                                                                                                // 16007
            "name": "Federated States of Micronesia",                                                                  // 16008
            "code": "FM",                                                                                              // 16009
            "state": false,                                                                                            // 16010
            "territory": true                                                                                          // 16011
        });                                                                                                            // 16012
        holdings.push({                                                                                                // 16013
            "name": "Florida",                                                                                         // 16014
            "code": "FL",                                                                                              // 16015
            "state": true,                                                                                             // 16016
            "territory": false                                                                                         // 16017
        });                                                                                                            // 16018
        holdings.push({                                                                                                // 16019
            "name": "Georgia",                                                                                         // 16020
            "code": "GA",                                                                                              // 16021
            "state": true,                                                                                             // 16022
            "territory": false                                                                                         // 16023
        });                                                                                                            // 16024
        holdings.push({                                                                                                // 16025
            "name": "Guam",                                                                                            // 16026
            "code": "GU",                                                                                              // 16027
            "state": false,                                                                                            // 16028
            "territory": true                                                                                          // 16029
        });                                                                                                            // 16030
        holdings.push({                                                                                                // 16031
            "name": "Georgia",                                                                                         // 16032
            "code": "GA",                                                                                              // 16033
            "state": true,                                                                                             // 16034
            "territory": false                                                                                         // 16035
        });                                                                                                            // 16036
        holdings.push({                                                                                                // 16037
            "name": "Hawaii",                                                                                          // 16038
            "code": "HI",                                                                                              // 16039
            "state": true,                                                                                             // 16040
            "territory": false                                                                                         // 16041
        });                                                                                                            // 16042
        holdings.push({                                                                                                // 16043
            "name": "Idaho",                                                                                           // 16044
            "code": "ID",                                                                                              // 16045
            "state": true,                                                                                             // 16046
            "territory": false                                                                                         // 16047
        });                                                                                                            // 16048
        holdings.push({                                                                                                // 16049
            "name": "Illinois",                                                                                        // 16050
            "code": "IL",                                                                                              // 16051
            "state": true,                                                                                             // 16052
            "territory": false                                                                                         // 16053
        });                                                                                                            // 16054
        holdings.push({                                                                                                // 16055
            "name": "Indiana",                                                                                         // 16056
            "code": "IN",                                                                                              // 16057
            "state": true,                                                                                             // 16058
            "territory": false                                                                                         // 16059
        });                                                                                                            // 16060
        holdings.push({                                                                                                // 16061
            "name": "Iowa",                                                                                            // 16062
            "code": "IA",                                                                                              // 16063
            "state": true,                                                                                             // 16064
            "territory": false                                                                                         // 16065
        });                                                                                                            // 16066
        holdings.push({                                                                                                // 16067
            "name": "Kansas",                                                                                          // 16068
            "code": "KS",                                                                                              // 16069
            "state": true,                                                                                             // 16070
            "territory": false                                                                                         // 16071
        });                                                                                                            // 16072
        holdings.push({                                                                                                // 16073
            "name": "Kentucky",                                                                                        // 16074
            "code": "KY",                                                                                              // 16075
            "state": true,                                                                                             // 16076
            "territory": false                                                                                         // 16077
        });                                                                                                            // 16078
        holdings.push({                                                                                                // 16079
            "name": "Louisiana",                                                                                       // 16080
            "code": "LA",                                                                                              // 16081
            "state": true,                                                                                             // 16082
            "territory": false                                                                                         // 16083
        });                                                                                                            // 16084
        holdings.push({                                                                                                // 16085
            "name": "Maine",                                                                                           // 16086
            "code": "ME",                                                                                              // 16087
            "state": true,                                                                                             // 16088
            "territory": false                                                                                         // 16089
        });                                                                                                            // 16090
        holdings.push({                                                                                                // 16091
            "name": "Marshall Islands",                                                                                // 16092
            "code": "MH",                                                                                              // 16093
            "state": false,                                                                                            // 16094
            "territory": true                                                                                          // 16095
        });                                                                                                            // 16096
        holdings.push({                                                                                                // 16097
            "name": "Maryland",                                                                                        // 16098
            "code": "MD",                                                                                              // 16099
            "state": true,                                                                                             // 16100
            "territory": false                                                                                         // 16101
        });                                                                                                            // 16102
        holdings.push({                                                                                                // 16103
            "name": "Massachusetts",                                                                                   // 16104
            "code": "MA",                                                                                              // 16105
            "state": true,                                                                                             // 16106
            "territory": false                                                                                         // 16107
        });                                                                                                            // 16108
        holdings.push({                                                                                                // 16109
            "name": "Michigan",                                                                                        // 16110
            "code": "MI",                                                                                              // 16111
            "state": true,                                                                                             // 16112
            "territory": false                                                                                         // 16113
        });                                                                                                            // 16114
        holdings.push({                                                                                                // 16115
            "name": "Minnesota",                                                                                       // 16116
            "code": "MN",                                                                                              // 16117
            "state": true,                                                                                             // 16118
            "territory": false                                                                                         // 16119
        });                                                                                                            // 16120
        holdings.push({                                                                                                // 16121
            "name": "Mississippi",                                                                                     // 16122
            "code": "MS",                                                                                              // 16123
            "state": true,                                                                                             // 16124
            "territory": false                                                                                         // 16125
        });                                                                                                            // 16126
        holdings.push({                                                                                                // 16127
            "name": "Missouri",                                                                                        // 16128
            "code": "MO",                                                                                              // 16129
            "state": true,                                                                                             // 16130
            "territory": false                                                                                         // 16131
        });                                                                                                            // 16132
        holdings.push({                                                                                                // 16133
            "name": "Montana",                                                                                         // 16134
            "code": "MT",                                                                                              // 16135
            "state": true,                                                                                             // 16136
            "territory": false                                                                                         // 16137
        });                                                                                                            // 16138
        holdings.push({                                                                                                // 16139
            "name": "Nebraska",                                                                                        // 16140
            "code": "NE",                                                                                              // 16141
            "state": true,                                                                                             // 16142
            "territory": false                                                                                         // 16143
        });                                                                                                            // 16144
        holdings.push({                                                                                                // 16145
            "name": "Nevada",                                                                                          // 16146
            "code": "NV",                                                                                              // 16147
            "state": true,                                                                                             // 16148
            "territory": false                                                                                         // 16149
        });                                                                                                            // 16150
        holdings.push({                                                                                                // 16151
            "name": "New Hampshire",                                                                                   // 16152
            "code": "NH",                                                                                              // 16153
            "state": true,                                                                                             // 16154
            "territory": false                                                                                         // 16155
        });                                                                                                            // 16156
        holdings.push({                                                                                                // 16157
            "name": "New Jersey",                                                                                      // 16158
            "code": "NJ",                                                                                              // 16159
            "state": true,                                                                                             // 16160
            "territory": false                                                                                         // 16161
        });                                                                                                            // 16162
        holdings.push({                                                                                                // 16163
            "name": "New Mexico",                                                                                      // 16164
            "code": "NM",                                                                                              // 16165
            "state": true,                                                                                             // 16166
            "territory": false                                                                                         // 16167
        });                                                                                                            // 16168
        holdings.push({                                                                                                // 16169
            "name": "New York",                                                                                        // 16170
            "code": "NY",                                                                                              // 16171
            "state": true,                                                                                             // 16172
            "territory": false                                                                                         // 16173
        });                                                                                                            // 16174
        holdings.push({                                                                                                // 16175
            "name": "North Carolina",                                                                                  // 16176
            "code": "NC",                                                                                              // 16177
            "state": true,                                                                                             // 16178
            "territory": false                                                                                         // 16179
        });                                                                                                            // 16180
        holdings.push({                                                                                                // 16181
            "name": "North Dakota",                                                                                    // 16182
            "code": "ND",                                                                                              // 16183
            "state": true,                                                                                             // 16184
            "territory": false                                                                                         // 16185
        });                                                                                                            // 16186
        holdings.push({                                                                                                // 16187
            "name": "Northern Mariana Islands",                                                                        // 16188
            "code": "MP",                                                                                              // 16189
            "state": true,                                                                                             // 16190
            "territory": false                                                                                         // 16191
        });                                                                                                            // 16192
        holdings.push({                                                                                                // 16193
            "name": "Ohio",                                                                                            // 16194
            "code": "OH",                                                                                              // 16195
            "state": true,                                                                                             // 16196
            "territory": false                                                                                         // 16197
        });                                                                                                            // 16198
        holdings.push({                                                                                                // 16199
            "name": "Oklahoma",                                                                                        // 16200
            "code": "OK",                                                                                              // 16201
            "state": true,                                                                                             // 16202
            "territory": false                                                                                         // 16203
        });                                                                                                            // 16204
        holdings.push({                                                                                                // 16205
            "name": "Oregon",                                                                                          // 16206
            "code": "OR",                                                                                              // 16207
            "state": true,                                                                                             // 16208
            "territory": false                                                                                         // 16209
        });                                                                                                            // 16210
        holdings.push({                                                                                                // 16211
            "name": "Palau",                                                                                           // 16212
            "code": "PW",                                                                                              // 16213
            "state": false,                                                                                            // 16214
            "territory": true                                                                                          // 16215
        });                                                                                                            // 16216
        holdings.push({                                                                                                // 16217
            "name": "Pennsylvania",                                                                                    // 16218
            "code": "PA",                                                                                              // 16219
            "state": true,                                                                                             // 16220
            "territory": false                                                                                         // 16221
        });                                                                                                            // 16222
        holdings.push({                                                                                                // 16223
            "name": "Puerto Rico",                                                                                     // 16224
            "code": "PR",                                                                                              // 16225
            "state": false,                                                                                            // 16226
            "territory": true                                                                                          // 16227
        });                                                                                                            // 16228
        holdings.push({                                                                                                // 16229
            "name": "Rhode Island",                                                                                    // 16230
            "code": "RI",                                                                                              // 16231
            "state": true,                                                                                             // 16232
            "territory": false                                                                                         // 16233
        });                                                                                                            // 16234
        holdings.push({                                                                                                // 16235
            "name": "South Carolina",                                                                                  // 16236
            "code": "SC",                                                                                              // 16237
            "state": true,                                                                                             // 16238
            "territory": false                                                                                         // 16239
        });                                                                                                            // 16240
        holdings.push({                                                                                                // 16241
            "name": "South Dakota",                                                                                    // 16242
            "code": "SD",                                                                                              // 16243
            "state": true,                                                                                             // 16244
            "territory": false                                                                                         // 16245
        });                                                                                                            // 16246
        holdings.push({                                                                                                // 16247
            "name": "Tennessee",                                                                                       // 16248
            "code": "TN",                                                                                              // 16249
            "state": true,                                                                                             // 16250
            "territory": false                                                                                         // 16251
        });                                                                                                            // 16252
        holdings.push({                                                                                                // 16253
            "name": "Texas",                                                                                           // 16254
            "code": "TX",                                                                                              // 16255
            "state": true,                                                                                             // 16256
            "territory": false                                                                                         // 16257
        });                                                                                                            // 16258
        holdings.push({                                                                                                // 16259
            "name": "Utah",                                                                                            // 16260
            "code": "UT",                                                                                              // 16261
            "state": true,                                                                                             // 16262
            "territory": false                                                                                         // 16263
        });                                                                                                            // 16264
        holdings.push({                                                                                                // 16265
            "name": "Vermont",                                                                                         // 16266
            "code": "VT",                                                                                              // 16267
            "state": true,                                                                                             // 16268
            "territory": false                                                                                         // 16269
        });                                                                                                            // 16270
        holdings.push({                                                                                                // 16271
            "name": "Virgin Islands",                                                                                  // 16272
            "code": "VI",                                                                                              // 16273
            "state": false,                                                                                            // 16274
            "territory": true                                                                                          // 16275
        });                                                                                                            // 16276
        holdings.push({                                                                                                // 16277
            "name": "Virginia",                                                                                        // 16278
            "code": "VA",                                                                                              // 16279
            "state": true,                                                                                             // 16280
            "territory": false                                                                                         // 16281
        });                                                                                                            // 16282
        holdings.push({                                                                                                // 16283
            "name": "Washington",                                                                                      // 16284
            "code": "WA",                                                                                              // 16285
            "state": true,                                                                                             // 16286
            "territory": false                                                                                         // 16287
        });                                                                                                            // 16288
        holdings.push({                                                                                                // 16289
            "name": "West Virginia",                                                                                   // 16290
            "code": "WV",                                                                                              // 16291
            "state": true,                                                                                             // 16292
            "territory": false                                                                                         // 16293
        });                                                                                                            // 16294
        holdings.push({                                                                                                // 16295
            "name": "Wisconsin",                                                                                       // 16296
            "code": "WI",                                                                                              // 16297
            "state": true,                                                                                             // 16298
            "territory": false                                                                                         // 16299
        });                                                                                                            // 16300
        holdings.push({                                                                                                // 16301
            "name": "Wyoming",                                                                                         // 16302
            "code": "WY",                                                                                              // 16303
            "state": true,                                                                                             // 16304
            "territory": false                                                                                         // 16305
        });                                                                                                            // 16306
                                                                                                                       // 16307
        return function(includeStates, includeTerritories, codeValue, capitalize) {                                    // 16308
                                                                                                                       // 16309
            var result = {                                                                                             // 16310
                "keys": [],                                                                                            // 16311
                "values": []                                                                                           // 16312
            };                                                                                                         // 16313
                                                                                                                       // 16314
            for (var i = 0; i < holdings.length; i++)                                                                  // 16315
            {                                                                                                          // 16316
                var keep = false;                                                                                      // 16317
                                                                                                                       // 16318
                if (holdings[i].state && includeStates) {                                                              // 16319
                    keep = true;                                                                                       // 16320
                } else if (holdings[i].territory && includeTerritories) {                                              // 16321
                    keep = true;                                                                                       // 16322
                }                                                                                                      // 16323
                                                                                                                       // 16324
                if (keep) {                                                                                            // 16325
                                                                                                                       // 16326
                    var key = holdings[i].code;                                                                        // 16327
                    var value = holdings[i].name;                                                                      // 16328
                                                                                                                       // 16329
                    if (codeValue) {                                                                                   // 16330
                        value = holdings[i].code;                                                                      // 16331
                    }                                                                                                  // 16332
                    if (capitalize) {                                                                                  // 16333
                        value = value.toUpperCase();                                                                   // 16334
                    }                                                                                                  // 16335
                                                                                                                       // 16336
                    result.keys.push(key);                                                                             // 16337
                    result.values.push(value);                                                                         // 16338
                }                                                                                                      // 16339
            }                                                                                                          // 16340
                                                                                                                       // 16341
            return result;                                                                                             // 16342
        };                                                                                                             // 16343
    }();                                                                                                               // 16344
                                                                                                                       // 16345
})(jQuery);                                                                                                            // 16346
(function($) {                                                                                                         // 16347
                                                                                                                       // 16348
    var Alpaca = $.alpaca;                                                                                             // 16349
                                                                                                                       // 16350
    Alpaca.Fields.CountryField = Alpaca.Fields.SelectField.extend(                                                     // 16351
    /**                                                                                                                // 16352
     * @lends Alpaca.Fields.CountryField.prototype                                                                     // 16353
     */                                                                                                                // 16354
    {                                                                                                                  // 16355
        /**                                                                                                            // 16356
         * @constructs                                                                                                 // 16357
         * @augments Alpaca.Fields.TextField                                                                           // 16358
         *                                                                                                             // 16359
         * @class Country Control                                                                                      // 16360
         *                                                                                                             // 16361
         * @param {Object} container Field container.                                                                  // 16362
         * @param {Any} data Field data.                                                                               // 16363
         * @param {Object} options Field options.                                                                      // 16364
         * @param {Object} schema Field schema.                                                                        // 16365
         * @param {Object|String} view Field view.                                                                     // 16366
         * @param {Alpaca.Connector} connector Field connector.                                                        // 16367
         * @param {Function} errorCallback Error callback.                                                             // 16368
         */                                                                                                            // 16369
        constructor: function(container, data, options, schema, view, connector, errorCallback) {                      // 16370
            this.base(container, data, options, schema, view, connector, errorCallback);                               // 16371
        },                                                                                                             // 16372
                                                                                                                       // 16373
        /**                                                                                                            // 16374
         * @see Alpaca.Fields.TextField#setup                                                                          // 16375
         */                                                                                                            // 16376
        setup: function() {                                                                                            // 16377
                                                                                                                       // 16378
            // defaults                                                                                                // 16379
            if (Alpaca.isUndefined(this.options.capitalize)) {                                                         // 16380
                this.options.capitalize = false;                                                                       // 16381
            }                                                                                                          // 16382
                                                                                                                       // 16383
            this.schema["enum"] = [];                                                                                  // 16384
            this.options.optionLabels = [];                                                                            // 16385
                                                                                                                       // 16386
            var countriesMap = this.view.getMessage("countries");                                                      // 16387
            if (countriesMap)                                                                                          // 16388
            {                                                                                                          // 16389
                for (var countryKey in countriesMap)                                                                   // 16390
                {                                                                                                      // 16391
                    this.schema["enum"].push(countryKey);                                                              // 16392
                                                                                                                       // 16393
                    var label = countriesMap[countryKey];                                                              // 16394
                    if (this.options.capitalize) {                                                                     // 16395
                        label = label.toUpperCase();                                                                   // 16396
                    }                                                                                                  // 16397
                    this.options.optionLabels.push(label);                                                             // 16398
                }                                                                                                      // 16399
            }                                                                                                          // 16400
                                                                                                                       // 16401
            this.base();                                                                                               // 16402
        },                                                                                                             // 16403
                                                                                                                       // 16404
        /**                                                                                                            // 16405
         * @see Alpaca.Fields.TextField#postRender                                                                     // 16406
         */                                                                                                            // 16407
        postRender: function(callback) {                                                                               // 16408
                                                                                                                       // 16409
            var self = this;                                                                                           // 16410
                                                                                                                       // 16411
            this.base(function() {                                                                                     // 16412
                                                                                                                       // 16413
                if (self.fieldContainer) {                                                                             // 16414
                    self.fieldContainer.addClass('alpaca-controlfield-country');                                       // 16415
                }                                                                                                      // 16416
                                                                                                                       // 16417
                callback();                                                                                            // 16418
                                                                                                                       // 16419
            });                                                                                                        // 16420
        },                                                                                                             // 16421
                                                                                                                       // 16422
        /**                                                                                                            // 16423
         * @see Alpaca.Fields.TextField#handleValidate                                                                 // 16424
         */                                                                                                            // 16425
        handleValidate: function() {                                                                                   // 16426
            var baseStatus = this.base();                                                                              // 16427
                                                                                                                       // 16428
            // no additional validation                                                                                // 16429
                                                                                                                       // 16430
            return baseStatus;                                                                                         // 16431
        }                                                                                                              // 16432
    });                                                                                                                // 16433
                                                                                                                       // 16434
    Alpaca.registerFieldClass("country", Alpaca.Fields.CountryField);                                                  // 16435
    Alpaca.registerDefaultFormatFieldMapping("country", "country");                                                    // 16436
                                                                                                                       // 16437
})(jQuery);                                                                                                            // 16438
(function($) {                                                                                                         // 16439
                                                                                                                       // 16440
    var Alpaca = $.alpaca;                                                                                             // 16441
                                                                                                                       // 16442
    Alpaca.Fields.ZipcodeField = Alpaca.Fields.TextField.extend(                                                       // 16443
    /**                                                                                                                // 16444
     * @lends Alpaca.Fields.ZipcodeField.prototype                                                                     // 16445
     */                                                                                                                // 16446
    {                                                                                                                  // 16447
        /**                                                                                                            // 16448
         * @constructs                                                                                                 // 16449
         * @augments Alpaca.Fields.TextField                                                                           // 16450
         *                                                                                                             // 16451
         * @class Zipcode Control                                                                                      // 16452
         *                                                                                                             // 16453
         * @param {Object} container Field container.                                                                  // 16454
         * @param {Any} data Field data.                                                                               // 16455
         * @param {Object} options Field options.                                                                      // 16456
         * @param {Object} schema Field schema.                                                                        // 16457
         * @param {Object|String} view Field view.                                                                     // 16458
         * @param {Alpaca.Connector} connector Field connector.                                                        // 16459
         * @param {Function} errorCallback Error callback.                                                             // 16460
         */                                                                                                            // 16461
        constructor: function(container, data, options, schema, view, connector, errorCallback) {                      // 16462
            this.base(container, data, options, schema, view, connector, errorCallback);                               // 16463
        },                                                                                                             // 16464
                                                                                                                       // 16465
        /**                                                                                                            // 16466
         * @see Alpaca.Fields.TextField#setup                                                                          // 16467
         */                                                                                                            // 16468
        setup: function() {                                                                                            // 16469
                                                                                                                       // 16470
            this.options.format = (this.options.format ? this.options.format : "nine");                                // 16471
                                                                                                                       // 16472
            if (this.options.format == "nine")                                                                         // 16473
            {                                                                                                          // 16474
                this.schema.pattern = Alpaca.regexps["zipcode-nine"];                                                  // 16475
            }                                                                                                          // 16476
            else if (this.options.format == "five")                                                                    // 16477
            {                                                                                                          // 16478
                this.schema.pattern = Alpaca.regexps["zipcode-five"];                                                  // 16479
            }                                                                                                          // 16480
            else                                                                                                       // 16481
            {                                                                                                          // 16482
                Alpaca.logError("The configured zipcode format: " + this.options.format + " is not a legal value [five, nine]");
                                                                                                                       // 16484
                // default to nine format                                                                              // 16485
                this.options.format = "nine";                                                                          // 16486
                this.schema.pattern = Alpaca.regexps["zipcode-nine"];                                                  // 16487
            }                                                                                                          // 16488
                                                                                                                       // 16489
            // set mask string                                                                                         // 16490
            if (this.options.format == "nine")                                                                         // 16491
            {                                                                                                          // 16492
                this.options["maskString"] = "99999-9999";                                                             // 16493
            }                                                                                                          // 16494
            else if (this.options.format == "five")                                                                    // 16495
            {                                                                                                          // 16496
                this.options["maskString"] = "99999";                                                                  // 16497
            }                                                                                                          // 16498
                                                                                                                       // 16499
            this.base();                                                                                               // 16500
        },                                                                                                             // 16501
                                                                                                                       // 16502
        /**                                                                                                            // 16503
         * @see Alpaca.Fields.TextField#postRender                                                                     // 16504
         */                                                                                                            // 16505
        postRender: function(callback) {                                                                               // 16506
                                                                                                                       // 16507
            var self = this;                                                                                           // 16508
                                                                                                                       // 16509
            this.base(function() {                                                                                     // 16510
                                                                                                                       // 16511
                if (self.fieldContainer) {                                                                             // 16512
                    self.fieldContainer.addClass('alpaca-controlfield-zipcode');                                       // 16513
                }                                                                                                      // 16514
                                                                                                                       // 16515
                callback();                                                                                            // 16516
            });                                                                                                        // 16517
        },                                                                                                             // 16518
                                                                                                                       // 16519
        /**                                                                                                            // 16520
         * @see Alpaca.Fields.TextField#handleValidate                                                                 // 16521
         */                                                                                                            // 16522
        handleValidate: function() {                                                                                   // 16523
            var baseStatus = this.base();                                                                              // 16524
                                                                                                                       // 16525
            var valInfo = this.validation;                                                                             // 16526
                                                                                                                       // 16527
            if (!valInfo["invalidPattern"]["status"]) {                                                                // 16528
                                                                                                                       // 16529
                if (this.options.format == "nine")                                                                     // 16530
                {                                                                                                      // 16531
                    valInfo["invalidPattern"]["message"] = this.view.getMessage("invalidZipcodeFormatNine");           // 16532
                }                                                                                                      // 16533
                else if (this.options.format == "five")                                                                // 16534
                {                                                                                                      // 16535
                    valInfo["invalidPattern"]["message"] = this.view.getMessage("invalidZipcodeFormatFive");           // 16536
                }                                                                                                      // 16537
            }                                                                                                          // 16538
                                                                                                                       // 16539
            return baseStatus;                                                                                         // 16540
        }                                                                                                              // 16541
    });                                                                                                                // 16542
                                                                                                                       // 16543
    Alpaca.registerMessages({                                                                                          // 16544
        "invalidZipcodeFormatFive": "Invalid Five-Digit Zipcode (#####)",                                              // 16545
        "invalidZipcodeFormatNine": "Invalid Nine-Digit Zipcode (#####-####)"                                          // 16546
    });                                                                                                                // 16547
    Alpaca.registerFieldClass("zipcode", Alpaca.Fields.ZipcodeField);                                                  // 16548
    Alpaca.registerDefaultFormatFieldMapping("zipcode", "zipcode");                                                    // 16549
                                                                                                                       // 16550
})(jQuery);                                                                                                            // 16551
(function($) {                                                                                                         // 16552
                                                                                                                       // 16553
    var Alpaca = $.alpaca;                                                                                             // 16554
                                                                                                                       // 16555
    Alpaca.Fields.URLField = Alpaca.Fields.TextField.extend(                                                           // 16556
    /**                                                                                                                // 16557
     * @lends Alpaca.Fields.URLField.prototype                                                                         // 16558
     */                                                                                                                // 16559
    {                                                                                                                  // 16560
        /**                                                                                                            // 16561
         * @constructs                                                                                                 // 16562
         * @augments Alpaca.Fields.TextField                                                                           // 16563
         *                                                                                                             // 16564
         * @class URL Control                                                                                          // 16565
         *                                                                                                             // 16566
         * @param {Object} container Field container.                                                                  // 16567
         * @param {Any} data Field data.                                                                               // 16568
         * @param {Object} options Field options.                                                                      // 16569
         * @param {Object} schema Field schema.                                                                        // 16570
         * @param {Object|String} view Field view.                                                                     // 16571
         * @param {Alpaca.Connector} connector Field connector.                                                        // 16572
         * @param {Function} errorCallback Error callback.                                                             // 16573
         */                                                                                                            // 16574
        constructor: function(container, data, options, schema, view, connector, errorCallback) {                      // 16575
            this.base(container, data, options, schema, view, connector, errorCallback);                               // 16576
        },                                                                                                             // 16577
                                                                                                                       // 16578
        /**                                                                                                            // 16579
         * @see Alpaca.Fields.TextField#setup                                                                          // 16580
         */                                                                                                            // 16581
        setup: function() {                                                                                            // 16582
                                                                                                                       // 16583
            this.schema.pattern = Alpaca.regexps.url;                                                                  // 16584
            this.schema.format = "uri";                                                                                // 16585
                                                                                                                       // 16586
            this.base();                                                                                               // 16587
        },                                                                                                             // 16588
                                                                                                                       // 16589
        /**                                                                                                            // 16590
         * @see Alpaca.Fields.TextField#postRender                                                                     // 16591
         */                                                                                                            // 16592
        postRender: function(callback) {                                                                               // 16593
                                                                                                                       // 16594
            var self = this;                                                                                           // 16595
                                                                                                                       // 16596
            this.base(function() {                                                                                     // 16597
                                                                                                                       // 16598
                if (self.fieldContainer) {                                                                             // 16599
                    self.fieldContainer.addClass('alpaca-controlfield-url');                                           // 16600
                }                                                                                                      // 16601
                                                                                                                       // 16602
                callback();                                                                                            // 16603
                                                                                                                       // 16604
            });                                                                                                        // 16605
        },                                                                                                             // 16606
                                                                                                                       // 16607
        /**                                                                                                            // 16608
         * @see Alpaca.Fields.TextField#handleValidate                                                                 // 16609
         */                                                                                                            // 16610
        handleValidate: function() {                                                                                   // 16611
            var baseStatus = this.base();                                                                              // 16612
                                                                                                                       // 16613
            var valInfo = this.validation;                                                                             // 16614
                                                                                                                       // 16615
            if (!valInfo["invalidPattern"]["status"]) {                                                                // 16616
                                                                                                                       // 16617
                valInfo["invalidPattern"]["message"] = this.view.getMessage("invalidURLFormat");                       // 16618
            }                                                                                                          // 16619
                                                                                                                       // 16620
            return baseStatus;                                                                                         // 16621
        }                                                                                                              // 16622
    });                                                                                                                // 16623
                                                                                                                       // 16624
    Alpaca.registerMessages({                                                                                          // 16625
        "invalidURLFormat": "The URL provided is not a valid web address."                                             // 16626
    });                                                                                                                // 16627
    Alpaca.registerFieldClass("url", Alpaca.Fields.URLField);                                                          // 16628
    Alpaca.registerDefaultFormatFieldMapping("url", "url");                                                            // 16629
                                                                                                                       // 16630
})(jQuery);                                                                                                            // 16631
                                                                                                                       // 16632
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['mrt:alpaca'] = {};

})();
